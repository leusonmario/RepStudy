import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test6001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str11 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test6002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6002");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
    }

    @Test
    public void test6003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str55 = builder3.mongoLocalPassword;
        builder3.setadvancedTransformation(true);
        boolean boolean58 = builder3.mongoSSLVerifyCertificate;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test6004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6004");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
    }

    @Test
    public void test6005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.indexName;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.getExcludeFields();
        boolean boolean9 = mongoDBRiverDefinition1.dropCollection;
        int int10 = mongoDBRiverDefinition1.socketTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test6006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        java.lang.String str30 = builder28.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter31 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str32 = serializedObjectSupporter31.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter31.deserializeObjectRiverSettings8();
        builder28.serializedObjectSupporter = serializedObjectSupporter31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        builder39.indexName = "options";
        boolean boolean47 = builder39.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean49 = builder48.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.script("bulk");
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder51.setmongoOplogFilter(basicDBObject52);
        com.mongodb.BasicDBObject basicDBObject54 = null;
        builder51.setmongoOplogFilter(basicDBObject54);
        java.lang.String str56 = builder51.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoAdminUser("socket_timeout");
        java.lang.String str63 = builder62.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject66 = builder62.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder51.mongoCollectionFilter(basicDBObject66);
        builder67.riverName = "mongodb-1638820218264";
        builder67.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter74 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str75 = serializedObjectSupporter74.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings76 = serializedObjectSupporter74.deserializeObjectRiverSettings4();
        java.lang.String str77 = serializedObjectSupporter74.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings78 = serializedObjectSupporter74.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService79 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings78, scriptService79);
        java.lang.String str81 = mongoDBRiverDefinition80.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions82 = mongoDBRiverDefinition80.mongoClientOptions;
        builder67.mongoClientOptions = mongoClientOptions82;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder39.mongoClientOptions(mongoClientOptions82);
        builder28.setmongoClientOptions(mongoClientOptions82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings33);
        org.junit.Assert.assertNotNull(riverSettings34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mongodb-1638820218326" + "'", str75, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mongodb-1638820218326" + "'", str77, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings78);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "mycollection" + "'", str81, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test6007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.indexName = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.statisticsIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        java.lang.String str14 = builder12.getscript();
        boolean boolean15 = builder12.dropCollection;
        builder12.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.mongoOplogFilter(basicDBObject23);
        builder12.storeStatistics = true;
        com.mongodb.BasicDBObject basicDBObject28 = builder12.getmongoCollectionFilter();
        builder11.setmongoOplogFilter(basicDBObject28);
        java.lang.String str30 = builder11.getmongoLocalPassword();
        java.lang.String str31 = builder11.getincludeCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test6008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.riverIndexName("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = builder34.build();
        java.lang.String str36 = mongoDBRiverDefinition35.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet37 = mongoDBRiverDefinition35.parentTypes;
        java.lang.String str38 = mongoDBRiverDefinition35.riverName;
        boolean boolean39 = mongoDBRiverDefinition35.disableIndexRefresh;
        java.lang.String str40 = mongoDBRiverDefinition35.riverIndexName;
        boolean boolean41 = mongoDBRiverDefinition35.getadvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition35.getMongoServers();
        builder31.mongoServers = serverAddressList42;
        boolean boolean44 = builder31.getdropCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index" + "'", str36, "index");
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test6009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        boolean boolean18 = builder16.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminUser("initial_timestamp");
        builder16.indexName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.scriptType("mycollection");
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder16.mongoClientOptions;
        java.lang.String str26 = builder16.mongoLocalPassword;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test6010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
    }

    @Test
    public void test6011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str14 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
    }

    @Test
    public void test6012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6012");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        builder16.skipInitialImport = false;
        builder16.setscriptType("script");
        java.lang.String[] strArray38 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet39);
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder8.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory45 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean47 = builder46.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.script("bulk");
        com.mongodb.BasicDBObject basicDBObject50 = builder49.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript51 = docScoreNativeScriptFactory45.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder8.mongoCollectionFilter = basicDBObject50;
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.common.settings.Settings settings54 = riverSettings53.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = riverSettings53.settings();
        org.elasticsearch.script.ScriptService scriptService56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("is_mongos", "mongodb-1638820218408", riverSettings53, scriptService56);
        org.elasticsearch.script.ScriptService scriptService58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("parent_types", "actions", riverSettings53, scriptService58);
        java.lang.Boolean boolean60 = mongoDBRiverDefinition59.isMongos();
        java.lang.String str61 = mongoDBRiverDefinition59.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(executableScript51);
        org.junit.Assert.assertNull(settings54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition59);
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "secondary_read_preference" + "'", str61, "secondary_read_preference");
    }

    @Test
    public void test6013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        int int8 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str10 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "user" + "'", str10, "user");
    }

    @Test
    public void test6014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.storeStatistics = false;
        java.util.Set<java.lang.String> strSet9 = builder5.getincludeFields();
        builder5.setthrottleSize((int) (short) -1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder5.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test6015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings1();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings1();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString8();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString14();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_river" + "'", str18, "_river");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
    }

    @Test
    public void test6016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean8 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test6017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test6018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        org.elasticsearch.common.logging.ESLogger eSLogger15 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str16 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 60000 + "'", int14 == 60000);
        org.junit.Assert.assertNotNull(eSLogger15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gridfs" + "'", str17, "gridfs");
    }

    @Test
    public void test6019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        builder22.skipInitialImport = false;
        builder22.setscriptType("script");
        java.lang.String[] strArray44 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet45);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder14.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean53 = builder52.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.script("bulk");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder14.mongoCollectionFilter = basicDBObject56;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder5.mongoOplogFilter = basicDBObject56;
        builder5.throttleSize = '#';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder5.script("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = builder66.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = mongoDBRiverDefinition67.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue69 = mongoDBRiverDefinition67.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean70 = mongoDBRiverDefinition67.dropCollection;
        boolean boolean71 = mongoDBRiverDefinition67.isMongoSecondaryReadPreference();
        java.lang.String str72 = mongoDBRiverDefinition67.getStatisticsTypeName();
        java.lang.String str73 = mongoDBRiverDefinition67.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str74 = mongoDBRiverDefinition67.getBULK_FIELD();
        com.mongodb.BasicDBObject basicDBObject75 = mongoDBRiverDefinition67.mongoCollectionFilter;
        builder65.setmongoOplogFilter(basicDBObject75);
        builder65.setimportAllCollections(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition67);
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertNotNull(timeValue69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "exclude_fields" + "'", str73, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "bulk" + "'", str74, "bulk");
        org.junit.Assert.assertNotNull(basicDBObject75);
    }

    @Test
    public void test6020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str12 = mongoDBRiverDefinition1.typeName;
        java.lang.String str13 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str14 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int15 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean16 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "import_all_collections" + "'", str14, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6021");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString18();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
    }

    @Test
    public void test6022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = null;
        builder11.serializedObjectSupporter = serializedObjectSupporter15;
        builder11.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test6023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean8 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminPassword;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "servers" + "'", str5, "servers");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test6024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6024");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory43 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory43.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        builder6.mongoCollectionFilter = basicDBObject48;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = riverSettings51.settings();
        org.elasticsearch.script.ScriptService scriptService53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("skip_initial_import", "mongodb-1638820218424", riverSettings51, scriptService53);
        java.lang.String str55 = mongoDBRiverDefinition54.getScriptType();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition54.getExcludeFields();
        java.lang.String str57 = mongoDBRiverDefinition54.getFLUSH_INTERVAL_FIELD();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition54.getParentTypes();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "flush_interval" + "'", str57, "flush_interval");
        org.junit.Assert.assertNull(strSet58);
    }

    @Test
    public void test6025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        java.lang.String str56 = builder54.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        java.lang.String str59 = builder57.getscript();
        boolean boolean60 = builder57.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray61 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList62 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList62, serverAddressArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder57.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList62);
        builder54.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList62);
        builder54.setconnectTimeout((int) 'a');
        builder54.disableIndexRefresh = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(serverAddressArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test6026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoSSLVerifyCertificate(true);
        boolean boolean34 = builder31.advancedTransformation;
        boolean boolean35 = builder31.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        builder31.setsocketTimeout((int) (short) 10);
        int int39 = builder31.getthrottleSize();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test6027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str6 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "exclude_fields" + "'", str6, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
    }

    @Test
    public void test6028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        boolean boolean38 = builder3.dropCollection;
        java.lang.Boolean boolean39 = builder3.getisMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(boolean39);
    }

    @Test
    public void test6029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "password" + "'", str10, "password");
        org.junit.Assert.assertNull(serializedObjectSupporter11);
    }

    @Test
    public void test6030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6030");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings5.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder7.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition8.parentTypes;
        boolean boolean11 = mongoDBRiverDefinition8.isStoreStatistics();
        boolean boolean12 = mongoDBRiverDefinition8.dropCollection;
        java.lang.String str13 = mongoDBRiverDefinition8.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.script("bulk");
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder19.setmongoOplogFilter(basicDBObject20);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder19.setmongoOplogFilter(basicDBObject22);
        builder19.statisticsIndexName = "socket_timeout";
        java.lang.String str26 = builder19.riverIndexName;
        boolean boolean27 = builder19.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder19.dropCollection(true);
        builder29.mongoAdminPassword = "_river";
        int int32 = builder29.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder36.setmongoOplogFilter(basicDBObject37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        builder36.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp43 = builder36.initialTimestamp;
        builder36.setadvancedTransformation(true);
        builder36.typeName = "gridfs";
        java.lang.String str48 = builder36.getindexName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter49 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str50 = serializedObjectSupporter49.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings51 = serializedObjectSupporter49.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings52 = riverSettings51.globalSettings();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory53 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter54 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str55 = serializedObjectSupporter54.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings56 = serializedObjectSupporter54.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = riverSettings56.settings();
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory53.newScript(strMap57);
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings52, strMap57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.script("store_statistics");
        java.lang.String str63 = builder62.mongoCollection;
        java.lang.String str64 = builder62.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.mongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject67 = builder66.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings52, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        builder36.setmongoOplogFilter(basicDBObject67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder29.mongoCollectionFilter(basicDBObject67);
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        org.elasticsearch.env.Environment environment72 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray73 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet74 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet74, scriptEngineServiceArray73);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService77 = new org.elasticsearch.script.ScriptService(settings6, environment72, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet74, resourceWatcherService76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index" + "'", str9, "index");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "collection" + "'", str13, "collection");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(wildcardTimestamp43);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb-1638820218326" + "'", str50, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_river" + "'", str55, "_river");
        org.junit.Assert.assertNotNull(riverSettings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test6031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6031");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings5.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder7.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition8.parentTypes;
        boolean boolean11 = mongoDBRiverDefinition8.isStoreStatistics();
        boolean boolean12 = mongoDBRiverDefinition8.dropCollection;
        java.lang.String str13 = mongoDBRiverDefinition8.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.script("bulk");
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder19.setmongoOplogFilter(basicDBObject20);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder19.setmongoOplogFilter(basicDBObject22);
        builder19.statisticsIndexName = "socket_timeout";
        java.lang.String str26 = builder19.riverIndexName;
        boolean boolean27 = builder19.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder19.dropCollection(true);
        builder29.mongoAdminPassword = "_river";
        int int32 = builder29.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder36.setmongoOplogFilter(basicDBObject37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        builder36.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp43 = builder36.initialTimestamp;
        builder36.setadvancedTransformation(true);
        builder36.typeName = "gridfs";
        java.lang.String str48 = builder36.getindexName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter49 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str50 = serializedObjectSupporter49.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings51 = serializedObjectSupporter49.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings52 = riverSettings51.globalSettings();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory53 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter54 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str55 = serializedObjectSupporter54.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings56 = serializedObjectSupporter54.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = riverSettings56.settings();
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory53.newScript(strMap57);
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings52, strMap57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.script("store_statistics");
        java.lang.String str63 = builder62.mongoCollection;
        java.lang.String str64 = builder62.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.mongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject67 = builder66.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings52, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        builder36.setmongoOplogFilter(basicDBObject67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder29.mongoCollectionFilter(basicDBObject67);
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter72 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str73 = serializedObjectSupporter72.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings74 = serializedObjectSupporter72.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings75 = serializedObjectSupporter72.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings76 = serializedObjectSupporter72.deserializeObjectRiverSettings2();
        org.elasticsearch.common.settings.Settings settings77 = riverSettings76.globalSettings();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter80 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str81 = serializedObjectSupporter80.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings82 = serializedObjectSupporter80.deserializeObjectRiverSettings3();
        java.lang.String str83 = serializedObjectSupporter80.deserializeObjectString12();
        java.lang.String str84 = serializedObjectSupporter80.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings85 = serializedObjectSupporter80.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService86 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition87 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "mongodb-1638820218299", riverSettings85, scriptService86);
        org.elasticsearch.common.settings.Settings settings88 = riverSettings85.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap89 = riverSettings85.settings();
        org.elasticsearch.river.RiverSettings riverSettings90 = new org.elasticsearch.river.RiverSettings(settings77, strMap89);
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings6, strMap89);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index" + "'", str9, "index");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "collection" + "'", str13, "collection");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(wildcardTimestamp43);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb-1638820218326" + "'", str50, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_river" + "'", str55, "_river");
        org.junit.Assert.assertNotNull(riverSettings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "_river" + "'", str73, "_river");
        org.junit.Assert.assertNotNull(riverSettings74);
        org.junit.Assert.assertNotNull(riverSettings75);
        org.junit.Assert.assertNotNull(riverSettings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "_river" + "'", str81, "_river");
        org.junit.Assert.assertNotNull(riverSettings82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "_river" + "'", str83, "_river");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "_river" + "'", str84, "_river");
        org.junit.Assert.assertNotNull(riverSettings85);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strMap89);
    }

    @Test
    public void test6032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6032");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218363" + "'", str1, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
    }

    @Test
    public void test6033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(false);
        int int17 = builder16.getsocketTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test6034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.statisticsTypeName("");
        boolean boolean11 = builder6.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoClientOptions(mongoClientOptions12);
        java.lang.String str14 = builder6.mongoCollection;
        builder6.dropCollection = true;
        builder6.setconnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.riverIndexName("drop_collection");
        builder11.typeName = "stats";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test6036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        builder5.disableIndexRefresh = true;
        builder5.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.typeName("script");
        builder15.setindexName("store_statistics");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test6037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "host" + "'", str5, "host");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test6038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        builder22.skipInitialImport = false;
        builder22.setscriptType("script");
        java.lang.String[] strArray44 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet45);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder14.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean53 = builder52.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.script("bulk");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder14.mongoCollectionFilter = basicDBObject56;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder5.mongoOplogFilter = basicDBObject56;
        builder5.throttleSize = '#';
        java.lang.String str64 = builder5.getscriptType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test6039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        builder3.setadvancedTransformation(true);
        java.lang.String str13 = builder3.getmongoDb();
        java.lang.String str14 = builder3.scriptType;
        java.lang.String str15 = builder3.getriverIndexName();
        builder3.setisMongos((java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test6040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder3.throttleSize(1000);
        java.lang.Boolean boolean77 = builder76.getisMongos();
        java.lang.String str78 = builder76.mongoCollection;
        java.lang.Boolean boolean79 = builder76.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder76.scriptType("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.mongoCollection("filter");
        boolean boolean84 = builder81.mongoUseSSL;
        boolean boolean85 = builder81.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(boolean79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test6041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoDb("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoCollection("script.default_lang");
        builder19.skipInitialImport = false;
        java.util.Set<java.lang.String> strSet24 = builder19.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.mongoSSLVerifyCertificate(true);
        builder19.setisMongos((java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test6042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6042");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = riverSettings6.settings();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test6043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean8 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
    }

    @Test
    public void test6044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder0.mongoAdminUser;
        java.lang.String str7 = builder0.getmongoAdminUser();
        int int8 = builder0.connectTimeout;
        builder0.setscriptType("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.storeStatistics(true);
        java.lang.String str13 = builder0.script;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
    }

    @Test
    public void test6045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        boolean boolean12 = builder11.dropCollection;
        builder11.setmongoLocalUser("admin");
        builder11.setdropCollection(false);
        int int17 = builder11.getthrottleSize();
        java.lang.String str18 = builder11.typeName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test6046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoClientOptions(mongoClientOptions13);
        java.util.Set<java.lang.String> strSet15 = builder14.parentTypes;
        builder14.scriptType = "";
        int int18 = builder14.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.disableIndexRefresh(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        java.lang.String str28 = builder26.riverName;
        builder26.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet35 = builder34.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.importAllCollections(false);
        java.util.Set<java.lang.String> strSet38 = builder37.includeFields;
        boolean boolean39 = builder37.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.mongoAdminUser("initial_timestamp");
        builder37.indexName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter46 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str47 = serializedObjectSupporter46.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings48 = serializedObjectSupporter46.deserializeObjectRiverSettings4();
        java.lang.String str49 = serializedObjectSupporter46.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings50 = serializedObjectSupporter46.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings50, scriptService51);
        java.lang.String str53 = mongoDBRiverDefinition52.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions54 = mongoDBRiverDefinition52.mongoClientOptions;
        builder37.mongoClientOptions = mongoClientOptions54;
        builder20.mongoClientOptions = mongoClientOptions54;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "mongodb-1638820218326" + "'", str47, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mongodb-1638820218326" + "'", str49, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "mycollection" + "'", str53, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions54);
    }

    @Test
    public void test6047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoDb("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoCollection("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.riverName("flush_interval");
        builder23.setstoreStatistics(false);
        builder23.setstatisticsIndexName("");
        boolean boolean28 = builder23.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test6048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.storeStatistics(true);
        int int16 = builder3.connectTimeout;
        builder3.setmongoLocalUser("size");
        com.mongodb.BasicDBObject basicDBObject19 = builder3.getmongoOplogFilter();
        java.lang.String str20 = builder3.scriptType;
        builder3.mongoAdminPassword = "mydatabase";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test6049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.getstatisticsIndexName();
        java.lang.String str4 = builder2.typeName;
        java.lang.String str5 = builder2.getmongoAdminPassword();
        java.lang.String str6 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.script("store_statistics");
        builder8.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test6050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str9 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "flush_interval" + "'", str5, "flush_interval");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "null.null" + "'", str8, "null.null");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
    }

    @Test
    public void test6051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        builder23.skipInitialImport = false;
        builder23.setscriptType("script");
        java.lang.String[] strArray45 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet46);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder3.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoCollection("user");
        java.lang.String str53 = builder50.includeCollection;
        java.lang.String str54 = builder50.riverIndexName;
        boolean boolean55 = builder50.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test6052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoSecondaryReadPreference(true);
        builder5.setstatisticsTypeName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder5.mongoAdminPassword("mongodb-1638820218326");
        builder5.statisticsIndexName = "script";
        builder5.setmongoCollection("bulk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test6053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str10 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str12 = mongoDBRiverDefinition1.getScriptType();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test6054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder3.mongoCollection("mongodb-1638820217755");
        builder34.includeCollection = "servers";
        boolean boolean37 = builder34.getdropCollection();
        java.lang.String str38 = builder34.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.scriptType("disable_index_refresh");
        boolean boolean41 = builder40.getdropCollection();
        java.lang.String str42 = builder40.mongoAdminUser;
        java.util.Set<java.lang.String> strSet43 = builder40.parentTypes;
        builder40.mongoLocalPassword = "secondary_read_preference";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(strSet43);
    }

    @Test
    public void test6055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("store_statistics");
        java.lang.String str15 = builder12.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder21.setmongoOplogFilter(basicDBObject22);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder21.setmongoOplogFilter(basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        builder29.skipInitialImport = false;
        builder29.setscriptType("script");
        java.lang.String[] strArray51 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet52);
        builder21.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        com.mongodb.BasicDBObject basicDBObject58 = builder57.getmongoOplogFilter();
        java.lang.String str59 = builder57.typeName;
        java.util.Set<java.lang.String> strSet60 = builder57.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder57.scriptType("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = builder63.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList65 = mongoDBRiverDefinition64.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue66 = mongoDBRiverDefinition64.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean67 = mongoDBRiverDefinition64.dropCollection;
        boolean boolean68 = mongoDBRiverDefinition64.isMongoSecondaryReadPreference();
        java.lang.String str69 = mongoDBRiverDefinition64.getStatisticsTypeName();
        java.lang.String str70 = mongoDBRiverDefinition64.getMongoLocalPassword();
        java.lang.String str71 = mongoDBRiverDefinition64.getIndexName();
        boolean boolean72 = mongoDBRiverDefinition64.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp73 = mongoDBRiverDefinition64.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter74 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition64.serializedObjectSupporter = serializedObjectSupporter74;
        java.lang.String str76 = serializedObjectSupporter74.deserializeObjectString5();
        java.lang.String str77 = serializedObjectSupporter74.deserializeObjectString17();
        java.lang.String str78 = serializedObjectSupporter74.deserializeObjectString13();
        java.lang.String str79 = serializedObjectSupporter74.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings80 = serializedObjectSupporter74.deserializeObjectRiverSettings7();
        java.lang.String str81 = serializedObjectSupporter74.deserializeObjectString5();
        java.lang.String str82 = serializedObjectSupporter74.deserializeObjectString16();
        java.lang.String str83 = serializedObjectSupporter74.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings84 = serializedObjectSupporter74.deserializeObjectRiverSettings1();
        builder62.serializedObjectSupporter = serializedObjectSupporter74;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(basicDBObject58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition64);
        org.junit.Assert.assertNotNull(serverAddressList65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(wildcardTimestamp73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "mongodb-1638820218299" + "'", str76, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mongodb-1638820218449" + "'", str77, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "mongodb-1638820218408" + "'", str78, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "mongodb-1638820218264" + "'", str79, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "mongodb-1638820218299" + "'", str81, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "_river" + "'", str82, "_river");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "_river" + "'", str83, "_river");
        org.junit.Assert.assertNotNull(riverSettings84);
    }

    @Test
    public void test6056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6056");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder11.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.connectTimeout((int) (byte) 10);
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str22 = serializedObjectSupporter21.deserializeObjectString7();
        java.lang.String str23 = serializedObjectSupporter21.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter21.deserializeObjectRiverSettings6();
        java.lang.String str25 = serializedObjectSupporter21.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings26 = serializedObjectSupporter21.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings27 = serializedObjectSupporter21.deserializeObjectRiverSettings1();
        java.lang.String str28 = serializedObjectSupporter21.deserializeObjectString6();
        java.lang.String str29 = serializedObjectSupporter21.deserializeObjectString5();
        java.lang.String str30 = serializedObjectSupporter21.deserializeObjectString13();
        java.lang.String str31 = serializedObjectSupporter21.deserializeObjectString15();
        docScoreSearchScript0.setNextVar("_river", (java.lang.Object) str31);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb-1638820218326" + "'", str22, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb-1638820218449" + "'", str23, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218326" + "'", str25, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings26);
        org.junit.Assert.assertNotNull(riverSettings27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb-1638820218299" + "'", str29, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218408" + "'", str30, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb-1638820218424" + "'", str31, "mongodb-1638820218424");
    }

    @Test
    public void test6057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        int int12 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean13 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.Boolean boolean15 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        boolean boolean17 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        boolean boolean24 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        int int25 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean27 = mongoDBRiverDefinition19.isImportAllCollections();
        int int28 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter29 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str30 = serializedObjectSupporter29.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings31 = serializedObjectSupporter29.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings32 = serializedObjectSupporter29.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition19.serializedObjectSupporter = serializedObjectSupporter29;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter29;
        org.elasticsearch.river.RiverSettings riverSettings35 = serializedObjectSupporter29.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter29.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27017 + "'", int25 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 27017 + "'", int28 == 27017);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_river" + "'", str30, "_river");
        org.junit.Assert.assertNotNull(riverSettings31);
        org.junit.Assert.assertNotNull(riverSettings32);
        org.junit.Assert.assertNotNull(riverSettings35);
        org.junit.Assert.assertNotNull(riverSettings36);
    }

    @Test
    public void test6058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        java.lang.String str10 = builder5.mongoLocalUser;
        builder5.setsocketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.riverName("host");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test6059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setincludeCollection("port");
        java.lang.String str11 = builder3.getscript();
        int int12 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.mongoLocalPassword("port");
        builder3.setstatisticsTypeName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.isMongos((java.lang.Boolean) false);
        builder3.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk" + "'", str11, "bulk");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test6060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder7.setadvancedTransformation(false);
        java.util.Set<java.lang.String> strSet10 = builder7.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject11 = builder7.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet12 = builder7.parentTypes;
        builder7.setmongoUseSSL(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test6061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.scriptType;
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test6062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "size" + "'", str9, "size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "skip_initial_import" + "'", str10, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
    }

    @Test
    public void test6063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str9 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
    }

    @Test
    public void test6064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str11 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getDB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "drop_collection" + "'", str11, "drop_collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "db" + "'", str12, "db");
    }

    @Test
    public void test6065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.mongoOplogFilter;
        int int10 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str11 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean13 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
    }

    @Test
    public void test6066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6066");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("concurrent_requests", (java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        docScoreSearchScript0.setNextVar("script_type", (java.lang.Object) basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder16.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder16.setmongoOplogFilter(basicDBObject19);
        builder16.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.advancedTransformation(false);
        docScoreSearchScript0.setNextVar("mongodb-1638820218363", (java.lang.Object) builder24);
        java.lang.Boolean boolean26 = builder24.getisMongos();
        builder24.includeCollection = "port";
        com.mongodb.BasicDBObject basicDBObject29 = builder24.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder24.build();
        builder24.script = "store_statistics";
        java.lang.String str33 = builder24.getriverIndexName();
        boolean boolean34 = builder24.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNull(basicDBObject29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test6067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        builder3.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) 10);
        builder17.setconnectTimeout((int) (short) -1);
        builder17.script = "";
        builder17.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = builder24.build();
        java.lang.String str26 = mongoDBRiverDefinition25.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet27 = mongoDBRiverDefinition25.parentTypes;
        java.lang.String str28 = mongoDBRiverDefinition25.riverName;
        boolean boolean29 = mongoDBRiverDefinition25.disableIndexRefresh;
        java.lang.String str30 = mongoDBRiverDefinition25.riverIndexName;
        java.lang.String str31 = mongoDBRiverDefinition25.getRiverName();
        java.lang.String str32 = mongoDBRiverDefinition25.getUSER_FIELD();
        java.lang.String str33 = mongoDBRiverDefinition25.getSCRIPT_FIELD();
        java.lang.String str34 = mongoDBRiverDefinition25.getNAME_FIELD();
        int int35 = mongoDBRiverDefinition25.getDEFAULT_CONCURRENT_REQUESTS();
        int int36 = mongoDBRiverDefinition25.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition25.getMongoServers();
        builder17.mongoServers = serverAddressList37;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index" + "'", str26, "index");
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "user" + "'", str32, "user");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "script" + "'", str33, "script");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "name" + "'", str34, "name");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 60000 + "'", int36 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList37);
    }

    @Test
    public void test6068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.getstatisticsIndexName();
        java.lang.String str4 = builder2.typeName;
        java.lang.String str5 = builder2.getmongoAdminPassword();
        java.lang.String str6 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("store_statistics");
        java.lang.String str12 = builder11.mongoCollection;
        java.lang.String str13 = builder11.getincludeCollection();
        java.lang.String str14 = builder11.mongoLocalPassword;
        java.lang.String str15 = builder11.mongoLocalPassword;
        java.lang.String str16 = builder11.typeName;
        builder11.mongoAdminUser = ".scripts";
        builder11.statisticsTypeName = "mycollection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("socket_timeout");
        java.lang.String str27 = builder26.riverName;
        com.mongodb.BasicDBObject basicDBObject28 = builder26.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.connectTimeout(100);
        java.lang.String str31 = builder26.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean33 = builder32.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.script("bulk");
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder35.setmongoOplogFilter(basicDBObject36);
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder35.setmongoOplogFilter(basicDBObject38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean41 = builder40.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.script("bulk");
        builder43.skipInitialImport = false;
        builder43.setscriptType("script");
        java.lang.String[] strArray65 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder43.excludeFields((java.util.Set<java.lang.String>) strSet66);
        builder35.setexcludeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder35.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder35.riverIndexName("bulk_timeout");
        builder35.riverName = "bulk";
        java.util.Set<java.lang.String> strSet76 = builder35.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder26.includeFields(strSet76);
        builder11.includeFields = strSet76;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder2.excludeFields(strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder2.dropCollection(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test6069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.statisticsTypeName;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder5.getmongoClientOptions();
        java.lang.String str8 = builder5.getmongoAdminUser();
        builder5.setscriptType("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.mongoSSLVerifyCertificate(false);
        builder12.setstoreStatistics(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test6070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str10 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str11 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.storeStatistics;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6071");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder36.disableIndexRefresh(false);
        int int42 = builder36.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.dropCollection(true);
        builder36.setdropCollection(false);
        boolean boolean47 = builder36.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder36.riverIndexName("skip_initial_import");
        java.lang.String str50 = builder49.gettypeName();
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder49.mongoClientOptions(mongoClientOptions51);
        java.lang.Object obj53 = docScoreSearchScript0.unwrap((java.lang.Object) builder52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean55 = builder54.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoAdminUser("socket_timeout");
        java.lang.String str60 = builder59.riverName;
        java.lang.String str61 = builder59.getstatisticsIndexName();
        boolean boolean62 = builder59.getmongoGridFS();
        java.lang.String str63 = builder59.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder59.storeStatistics(true);
        boolean boolean66 = builder59.mongoSSLVerifyCertificate;
        java.lang.String str67 = builder59.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder59.riverIndexName("user");
        builder59.setscript("script.default_lang");
        java.lang.Object obj72 = docScoreSearchScript0.unwrap((java.lang.Object) builder59);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(obj72);
    }

    @Test
    public void test6072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        java.lang.String str23 = builder22.getmongoCollection();
        builder22.mongoLocalUser = "parent_types";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test6073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str7 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test6074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        java.lang.String str13 = builder3.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder17.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder17.setmongoOplogFilter(basicDBObject20);
        boolean boolean22 = builder17.mongoGridFS;
        java.lang.String[] strArray65 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder17.includeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet66);
        boolean boolean70 = builder69.getadvancedTransformation();
        java.lang.String str71 = builder69.getstatisticsTypeName();
        boolean boolean72 = builder69.mongoSSLVerifyCertificate;
        builder69.setthrottleSize((int) (short) 100);
        builder69.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder69.includeCollection("exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test6075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.throttleSize((int) (byte) 0);
        java.lang.String str57 = builder56.getincludeCollection();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp58 = builder56.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        boolean boolean60 = mongoDBRiverDefinition59.isMongoUseSSL();
        java.lang.String str61 = mongoDBRiverDefinition59.getIncludeCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(wildcardTimestamp58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test6076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.indexName = "options";
        boolean boolean11 = builder3.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        java.lang.String str20 = builder15.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("socket_timeout");
        java.lang.String str27 = builder26.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject30 = builder26.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder15.mongoCollectionFilter(basicDBObject30);
        builder31.riverName = "mongodb-1638820218264";
        builder31.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter38 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str39 = serializedObjectSupporter38.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings40 = serializedObjectSupporter38.deserializeObjectRiverSettings4();
        java.lang.String str41 = serializedObjectSupporter38.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter38.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings42, scriptService43);
        java.lang.String str45 = mongoDBRiverDefinition44.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions46 = mongoDBRiverDefinition44.mongoClientOptions;
        builder31.mongoClientOptions = mongoClientOptions46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder3.mongoClientOptions(mongoClientOptions46);
        builder48.scriptType = "";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb-1638820218326" + "'", str39, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "mongodb-1638820218326" + "'", str41, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings42);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "mycollection" + "'", str45, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test6077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.getmongoUseSSL();
        builder11.statisticsTypeName = "actions";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6078");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setmongoUseSSL(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder3.mongoClientOptions = mongoClientOptions12;
        builder3.setscriptType("");
        builder3.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.mongoSSLVerifyCertificate(false);
        builder3.setadvancedTransformation(false);
        builder3.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder3.disableIndexRefresh(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test6079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6079");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218299" + "'", str3, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820217755" + "'", str7, "mongodb-1638820217755");
    }

    @Test
    public void test6080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setincludeCollection("port");
        java.lang.String str11 = builder3.getscript();
        int int12 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.mongoLocalPassword("port");
        java.lang.String str15 = builder14.mongoAdminUser;
        builder14.isMongos = false;
        boolean boolean18 = builder14.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk" + "'", str11, "bulk");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test6081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6081");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder17.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.socketTimeout((int) (byte) 0);
        boolean boolean21 = builder20.dropCollection;
        builder20.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test6082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str12 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        int int13 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "collection" + "'", str12, "collection");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test6083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder0.dropCollection = false;
        java.lang.String str11 = builder0.mongoAdminUser;
        java.lang.String str12 = builder0.getmongoCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test6084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str10 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test6086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.includeFields(strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.disableIndexRefresh(false);
        java.lang.String str23 = builder22.getstatisticsTypeName();
        java.lang.String str24 = builder22.riverName;
        int int25 = builder22.connectTimeout;
        java.lang.String[] strArray72 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet73);
        builder5.setexcludeFields((java.util.Set<java.lang.String>) strSet73);
        java.lang.String str77 = builder5.getstatisticsTypeName();
        builder5.connectTimeout = 27017;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test6087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminUser();
        int int12 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.isMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test6088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6088");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory43 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory43.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        builder6.mongoCollectionFilter = basicDBObject48;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = riverSettings51.settings();
        org.elasticsearch.script.ScriptService scriptService53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("skip_initial_import", "mongodb-1638820218424", riverSettings51, scriptService53);
        java.lang.String str55 = mongoDBRiverDefinition54.getScriptType();
        java.lang.String str56 = mongoDBRiverDefinition54.getBULK_FIELD();
        boolean boolean57 = mongoDBRiverDefinition54.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "bulk" + "'", str56, "bulk");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test6089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str55 = builder3.mongoLocalPassword;
        builder3.setadvancedTransformation(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = builder3.mongoServers;
        java.lang.String str59 = builder3.mongoDb;
        java.lang.String str60 = builder3.typeName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(serverAddressList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test6090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.importAllCollections(true);
        builder3.mongoUseSSL = false;
        java.util.Set<java.lang.String> strSet18 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoDb("filter");
        java.lang.String str21 = builder20.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminPassword("actions");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test6091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.statisticsTypeName = "name";
        builder5.throttleSize = 0;
        boolean boolean12 = builder5.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6092");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218363" + "'", str5, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test6093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int11 = mongoDBRiverDefinition1.getThrottleSize();
        int int12 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str13 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str14 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str15 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int16 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1000 + "'", int16 == 1000);
    }

    @Test
    public void test6094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoGridFS();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str12 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.riverIndexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disable_index_refresh" + "'", str12, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "is_mongos" + "'", str13, "is_mongos");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        int int9 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean10 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "type" + "'", str12, "type");
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test6096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        java.lang.String str7 = builder6.scriptType;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString9();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings9();
        java.lang.String str13 = serializedObjectSupporter8.deserializeObjectString13();
        java.lang.String str14 = serializedObjectSupporter8.deserializeObjectString1();
        builder6.serializedObjectSupporter = serializedObjectSupporter8;
        java.lang.String str16 = serializedObjectSupporter8.deserializeObjectString9();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218363" + "'", str10, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218387" + "'", str11, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218408" + "'", str13, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820217755" + "'", str14, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218363" + "'", str16, "mongodb-1638820218363");
    }

    @Test
    public void test6097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 0);
        java.lang.String str7 = builder6.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str12 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str13 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.indexName;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        builder6.mongoCollectionFilter = basicDBObject15;
        java.lang.String str17 = builder6.getincludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test6098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test6099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6099");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218299" + "'", str5, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test6100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str11 = mongoDBRiverDefinition1.getStatisticsIndexName();
        boolean boolean12 = mongoDBRiverDefinition1.importAllCollections;
        org.elasticsearch.common.logging.ESLogger eSLogger13 = mongoDBRiverDefinition1.getlogger();
        int int14 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.Boolean boolean15 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str16 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "user" + "'", str16, "user");
    }

    @Test
    public void test6101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6101");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test6102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
    }

    @Test
    public void test6103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getRiverIndexName();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl_verify_certificate" + "'", str8, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
    }

    @Test
    public void test6104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean7 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test6105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        int int7 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.script;
        java.lang.String str10 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "drop_collection" + "'", str10, "drop_collection");
    }

    @Test
    public void test6106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean12 = mongoDBRiverDefinition9.dropCollection;
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str16 = mongoDBRiverDefinition9.getIndexName();
        boolean boolean17 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str18 = mongoDBRiverDefinition9.getSOCKET_TIMEOUT();
        boolean boolean19 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        int int20 = mongoDBRiverDefinition9.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject21 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoOplogFilter(basicDBObject21);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "socket_timeout" + "'", str18, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test6107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        boolean boolean56 = builder54.dropCollection;
        java.lang.String str57 = builder54.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder54.mongoGridFS(true);
        org.bson.types.BSONTimestamp bSONTimestamp62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder54.initialTimestamp(bSONTimestamp62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test6108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder0.getscript();
        builder0.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "store_statistics" + "'", str3, "store_statistics");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test6109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6109");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
    }

    @Test
    public void test6110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean3 = mongoDBRiverDefinition1.mongoUseSSL;
        boolean boolean4 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
    }

    @Test
    public void test6111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        builder23.skipInitialImport = false;
        builder23.setscriptType("script");
        java.lang.String[] strArray45 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet46);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder3.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoCollection("user");
        java.lang.String str53 = builder50.includeCollection;
        java.lang.String str54 = builder50.getmongoLocalPassword();
        java.lang.String str55 = builder50.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test6112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoGridFS();
        boolean boolean10 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test6113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder0.getscript();
        java.lang.String str4 = builder0.getstatisticsTypeName();
        java.lang.String str5 = builder0.gettypeName();
        java.lang.String str6 = builder0.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.setmongoClientOptions(mongoClientOptions7);
        java.lang.String str9 = builder0.scriptType;
        builder0.setimportAllCollections(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "store_statistics" + "'", str3, "store_statistics");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        int int12 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test6115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        java.lang.String str10 = builder9.getmongoLocalUser();
        java.lang.String str11 = builder9.getmongoCollection();
        java.lang.String str12 = builder9.getindexName();
        builder9.setmongoDb("user");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test6116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet15 = builder14.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoAdminUser("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder23.setmongoOplogFilter(basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder23.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.script("bulk");
        builder31.skipInitialImport = false;
        builder31.setscriptType("script");
        java.lang.String[] strArray53 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder31.excludeFields((java.util.Set<java.lang.String>) strSet54);
        builder23.setexcludeFields((java.util.Set<java.lang.String>) strSet54);
        builder19.setincludeFields((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder13.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder13.socketTimeout((-1));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test6117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getriverIndexName();
        builder5.includeCollection = "bulk";
        builder5.setdisableIndexRefresh(false);
        java.lang.String[] strArray34 = new java.lang.String[] { "credentials", "bulk", "concurrent_bulk_requests", "", "mongodb-1638820218424", "mydatabase", "throttle_size", "actions", "advanced_transformation", "mycollection", "import_all_collections", "credentials", "dummy-stats", "script", "mongodb-1638820218449", "mongodb-1638820218424", "mongodb-1638820218424", "flush_interval", "ssl_verify_certificate", "password", "servers", "throttle_size", "parent_types" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder5.parentTypes = strSet35;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test6118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean8 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str9 = mongoDBRiverDefinition1.mongoCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str11 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "flush_interval" + "'", str11, "flush_interval");
    }

    @Test
    public void test6119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        com.mongodb.BasicDBObject basicDBObject2 = builder0.getmongoCollectionFilter();
        builder0.mongoUseSSL = false;
        boolean boolean5 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(basicDBObject2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test6120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.riverIndexName("servers");
        builder9.mongoAdminUser = "include_collection";
        builder9.setindexName("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test6121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int4 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str5 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean6 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "script_type" + "'", str3, "script_type");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index" + "'", str5, "index");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
    }

    @Test
    public void test6122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
    }

    @Test
    public void test6123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        int int11 = builder5.throttleSize;
        builder5.script = "script.default_lang";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder17.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder17.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        builder25.skipInitialImport = false;
        builder25.setscriptType("script");
        java.lang.String[] strArray47 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder25.excludeFields((java.util.Set<java.lang.String>) strSet48);
        builder17.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder17.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder17.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet56 = builder17.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        java.lang.String str59 = builder57.getscript();
        boolean boolean60 = builder57.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray61 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList62 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList62, serverAddressArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder57.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean66 = builder65.getdropCollection();
        java.lang.String str67 = builder65.getscript();
        boolean boolean68 = builder65.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray69 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList70 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList70, serverAddressArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder65.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList70);
        builder57.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList70);
        builder17.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList70);
        java.lang.String str75 = builder17.getmongoLocalUser();
        builder17.mongoAdminUser = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder17.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder17.riverIndexName("null.null");
        com.mongodb.BasicDBObject basicDBObject82 = builder81.mongoCollectionFilter;
        builder5.setmongoOplogFilter(basicDBObject82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(serverAddressArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(serverAddressArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(basicDBObject82);
    }

    @Test
    public void test6124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.setdropCollection(false);
        builder5.setmongoCollection("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.dropCollection(true);
        boolean boolean14 = builder13.getskipInitialImport();
        java.lang.String str15 = builder13.getscript();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk" + "'", str15, "bulk");
    }

    @Test
    public void test6125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6125");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "type" + "'", str5, "type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "options" + "'", str8, "options");
    }

    @Test
    public void test6126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.indexName = "";
        builder0.mongoAdminPassword = "mycollection";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test6127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6127");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition52.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition52.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition52.getParentTypes();
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition52);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = builder61.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = mongoDBRiverDefinition62.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue64 = mongoDBRiverDefinition62.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean65 = mongoDBRiverDefinition62.dropCollection;
        boolean boolean66 = mongoDBRiverDefinition62.isMongoSecondaryReadPreference();
        java.lang.String str67 = mongoDBRiverDefinition62.getStatisticsTypeName();
        java.lang.String str68 = mongoDBRiverDefinition62.getMongoLocalPassword();
        java.lang.String str69 = mongoDBRiverDefinition62.getIndexName();
        boolean boolean70 = mongoDBRiverDefinition62.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp71 = mongoDBRiverDefinition62.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter72 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition62.serializedObjectSupporter = serializedObjectSupporter72;
        java.lang.String str74 = mongoDBRiverDefinition62.getPARENT_TYPES_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition62.getStatisticsIndexName();
        java.lang.Object obj76 = docScoreSearchScript0.unwrap((java.lang.Object) str75);
        // The following exception was thrown during execution in test generation
        try {
            long long77 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition62);
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(wildcardTimestamp71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "parent_types" + "'", str74, "parent_types");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test6128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6128");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("_river");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?_river?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test6129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str12 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getScript();
        java.lang.String str14 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str15 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean17 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str19 = mongoDBRiverDefinition1.script;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "size" + "'", str12, "size");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl" + "'", str15, "ssl");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "user" + "'", str16, "user");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test6130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        builder8.statisticsIndexName = "socket_timeout";
        builder8.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        builder28.skipInitialImport = false;
        builder28.setscriptType("script");
        java.lang.String[] strArray50 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder28.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder8.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder56.typeName = "";
        boolean boolean59 = builder56.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder56.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(mongoClientOptions60);
    }

    @Test
    public void test6131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString15();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        java.lang.String str14 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str15 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str16 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218424" + "'", str10, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test6132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.disableIndexRefresh(false);
        java.lang.String str11 = builder10.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet12 = builder10.excludeFields;
        java.lang.String str13 = builder10.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder25.mongoGridFS;
        java.lang.String[] strArray73 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder25.includeFields((java.util.Set<java.lang.String>) strSet74);
        builder19.setincludeFields((java.util.Set<java.lang.String>) strSet74);
        builder10.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet74);
        builder4.mongoAdminPassword = "flush_interval";
        builder4.mongoAdminUser = "include_fields";
        builder4.typeName = "null.null";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test6133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        boolean boolean9 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test6134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.getmongoUseSSL();
        java.lang.String str13 = builder11.includeCollection;
        java.lang.String str14 = builder11.mongoAdminUser;
        builder11.isMongos = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test6135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder3.typeName;
        java.lang.String str30 = builder3.includeCollection;
        builder3.connectTimeout = (byte) -1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder3.mongoAdminPassword("script");
        java.lang.Boolean boolean35 = builder34.getisMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(boolean35);
    }

    @Test
    public void test6136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        java.util.Set<java.lang.String> strSet9 = builder5.getincludeFields();
        builder5.skipInitialImport = true;
        builder5.connectTimeout = '#';
        builder5.setskipInitialImport(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test6137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6137");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test6138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoCollection("throttle_size");
        java.lang.String str15 = builder11.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.isMongos((java.lang.Boolean) false);
        boolean boolean18 = builder11.getskipInitialImport();
        builder11.setstatisticsIndexName("parent_types");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk" + "'", str15, "bulk");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoOplogFilter();
        builder0.setthrottleSize((int) (short) 1);
        boolean boolean7 = builder0.mongoUseSSL;
        builder0.setscript("port");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test6140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int6 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str8 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disable_index_refresh" + "'", str8, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
    }

    @Test
    public void test6141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString17();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString13();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings5();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString15();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218408" + "'", str15, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218264" + "'", str16, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218424" + "'", str18, "mongodb-1638820218424");
    }

    @Test
    public void test6142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        int int8 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test6143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str11 = mongoDBRiverDefinition1.getScriptType();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "throttle_size" + "'", str6, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "actions" + "'", str8, "actions");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test6144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.Boolean boolean9 = builder5.isMongos;
        java.lang.String str10 = builder5.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.mongoClientOptions(mongoClientOptions11);
        builder5.setisMongos((java.lang.Boolean) true);
        builder5.setincludeCollection("socket_timeout");
        java.lang.String str17 = builder5.getriverName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test6145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        builder15.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = builder24.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition25.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue27 = mongoDBRiverDefinition25.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean28 = mongoDBRiverDefinition25.dropCollection;
        boolean boolean29 = mongoDBRiverDefinition25.isMongoSecondaryReadPreference();
        java.lang.String str30 = mongoDBRiverDefinition25.getStatisticsTypeName();
        java.lang.String str31 = mongoDBRiverDefinition25.getMongoLocalPassword();
        java.lang.String str32 = mongoDBRiverDefinition25.getIndexName();
        boolean boolean33 = mongoDBRiverDefinition25.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = mongoDBRiverDefinition25.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter35 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition25.serializedObjectSupporter = serializedObjectSupporter35;
        java.lang.String str37 = serializedObjectSupporter35.deserializeObjectString5();
        java.lang.String str38 = serializedObjectSupporter35.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings39 = serializedObjectSupporter35.deserializeObjectRiverSettings1();
        java.lang.String str40 = serializedObjectSupporter35.deserializeObjectString1();
        builder23.serializedObjectSupporter = serializedObjectSupporter35;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter35;
        int int43 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb-1638820218299" + "'", str37, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "mongodb-1638820218449" + "'", str38, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "mongodb-1638820217755" + "'", str40, "mongodb-1638820217755");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 30000 + "'", int43 == 30000);
    }

    @Test
    public void test6146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.importAllCollections(true);
        builder3.mongoUseSSL = false;
        java.util.Set<java.lang.String> strSet18 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoDb("filter");
        java.lang.String str21 = builder20.getincludeCollection();
        builder20.storeStatistics = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test6147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition1.getisMongos();
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.storeStatistics(true);
        java.lang.String str15 = builder14.mongoDb;
        builder14.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.skipInitialImport(true);
        builder14.throttleSize = (-1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test6149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.riverName("script.disable_dynamic");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoCollectionFilter(basicDBObject14);
        java.lang.String str17 = builder16.statisticsTypeName;
        java.lang.String str18 = builder16.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test6150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter10.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter10.deserializeObjectRiverSettings8();
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString15();
        java.lang.String str15 = serializedObjectSupporter10.deserializeObjectString10();
        builder0.serializedObjectSupporter = serializedObjectSupporter10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder0.build();
        java.lang.String str18 = mongoDBRiverDefinition17.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218326" + "'", str11, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNotNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218424" + "'", str14, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "include_collection" + "'", str18, "include_collection");
    }

    @Test
    public void test6151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.skipInitialImport = true;
        boolean boolean10 = builder5.getadvancedTransformation();
        boolean boolean11 = builder5.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        boolean boolean9 = builder8.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        builder15.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder15.initialTimestamp;
        builder15.setadvancedTransformation(true);
        builder15.typeName = "gridfs";
        java.lang.String str27 = builder15.getindexName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter28 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str29 = serializedObjectSupporter28.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings30 = serializedObjectSupporter28.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings31 = riverSettings30.globalSettings();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory32 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter33 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str34 = serializedObjectSupporter33.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings35 = serializedObjectSupporter33.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = riverSettings35.settings();
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory32.newScript(strMap36);
        org.elasticsearch.river.RiverSettings riverSettings38 = new org.elasticsearch.river.RiverSettings(settings31, strMap36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.script("store_statistics");
        java.lang.String str42 = builder41.mongoCollection;
        java.lang.String str43 = builder41.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.mongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject46 = builder45.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        builder15.setmongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder8.mongoOplogFilter(basicDBObject46);
        java.lang.String str50 = builder49.getscriptType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb-1638820218326" + "'", str29, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_river" + "'", str34, "_river");
        org.junit.Assert.assertNotNull(riverSettings35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test6153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.statisticsTypeName("");
        boolean boolean11 = builder6.getskipInitialImport();
        java.lang.String str12 = builder6.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.storeStatistics(true);
        java.lang.String str15 = builder6.script;
        builder6.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
    }

    @Test
    public void test6154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str38 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder3.includeCollection("bulk_size");
        java.lang.String str41 = builder40.getriverIndexName();
        builder40.riverIndexName = "concurrent_requests";
        int int44 = builder40.throttleSize;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test6155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.statisticsTypeName = "name";
        boolean boolean10 = builder5.advancedTransformation;
        boolean boolean11 = builder5.dropCollection;
        builder5.includeCollection = "actions";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalUser;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString9();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString11();
        java.lang.String str12 = serializedObjectSupporter8.deserializeObjectString15();
        java.lang.String str13 = serializedObjectSupporter8.deserializeObjectString18();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218363" + "'", str10, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218387" + "'", str11, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218424" + "'", str12, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_river" + "'", str13, "_river");
    }

    @Test
    public void test6157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        builder5.typeName = "socket_timeout";
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder5.mongoClientOptions = mongoClientOptions11;
        boolean boolean13 = builder5.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str7 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "throttle_size" + "'", str7, "throttle_size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_collection" + "'", str12, "include_collection");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_fields" + "'", str13, "include_fields");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.null" + "'", str14, "null.null");
    }

    @Test
    public void test6159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean6 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder8.setmongoOplogFilter(basicDBObject9);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        builder8.statisticsIndexName = "socket_timeout";
        builder8.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        builder28.skipInitialImport = false;
        builder28.setscriptType("script");
        java.lang.String[] strArray50 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder28.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder8.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet51);
        java.lang.Boolean boolean57 = builder56.getisMongos();
        builder56.setthrottleSize((int) (short) 1);
        builder56.setstoreStatistics(false);
        java.lang.String str62 = builder56.getincludeCollection();
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test6160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(true);
        builder10.indexName = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder16.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder16.setmongoOplogFilter(basicDBObject19);
        boolean boolean21 = builder16.mongoGridFS;
        java.lang.String[] strArray64 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder16.includeFields((java.util.Set<java.lang.String>) strSet65);
        int int68 = builder67.throttleSize;
        java.lang.String str69 = builder67.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean71 = builder70.getdropCollection();
        java.lang.String str72 = builder70.getscript();
        boolean boolean73 = builder70.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray74 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList75 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList75, serverAddressArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder70.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList75);
        builder67.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder10.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder10.isMongos((java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serverAddressArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test6161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        java.lang.String str14 = builder11.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        java.lang.String str17 = builder15.getscript();
        boolean boolean18 = builder15.dropCollection;
        builder15.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder15.mongoOplogFilter(basicDBObject26);
        builder15.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder15.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject33 = builder32.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.BasicDBObject basicDBObject36 = builder35.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean38 = builder37.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.script("bulk");
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder40.setmongoOplogFilter(basicDBObject41);
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder40.setmongoOplogFilter(basicDBObject43);
        builder40.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder40.throttleSize((int) (short) 0);
        builder40.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str51 = builder40.getmongoCollection();
        boolean boolean52 = builder40.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean54 = builder53.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder53.disableIndexRefresh(false);
        java.lang.String str59 = builder58.getstatisticsTypeName();
        java.lang.String str60 = builder58.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean62 = builder61.getdropCollection();
        java.lang.String str63 = builder61.getscript();
        boolean boolean64 = builder61.dropCollection;
        builder61.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory67 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean69 = builder68.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder68.script("bulk");
        com.mongodb.BasicDBObject basicDBObject72 = builder71.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript73 = docScoreNativeScriptFactory67.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder61.mongoOplogFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder58.mongoCollectionFilter(basicDBObject72);
        builder40.setmongoOplogFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder35.mongoOplogFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder11.mongoCollectionFilter(basicDBObject72);
        builder11.setmongoGridFS(true);
        builder11.settypeName("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertNotNull(executableScript73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test6162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("script.disable_dynamic");
        builder14.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test6163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6163");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218408" + "'", str5, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820217755" + "'", str6, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218424" + "'", str10, "mongodb-1638820218424");
    }

    @Test
    public void test6164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalPassword;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test6165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        java.lang.String str8 = builder5.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.statisticsIndexName("ssl_verify_certificate");
        builder5.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition14.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition14.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean17 = mongoDBRiverDefinition14.dropCollection;
        boolean boolean18 = mongoDBRiverDefinition14.isMongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition14.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition14.getMongoServers();
        builder5.setmongoServers(serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder5.socketTimeout((int) '4');
        builder23.mongoDb = "";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test6166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition1.riverName;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        boolean boolean11 = mongoDBRiverDefinition1.isImportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(byteSizeValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
    }

    @Test
    public void test6168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        builder5.importAllCollections = true;
        builder5.riverName = "credentials";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test6169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        builder41.importAllCollections = true;
        builder41.mongoDb = "filter";
        java.lang.String str46 = builder41.statisticsTypeName;
        java.util.Set<java.lang.String> strSet47 = builder41.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.script("include_collection");
        java.lang.String str50 = builder41.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder41.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test6170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6170");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test6171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        java.lang.String str10 = builder9.mongoAdminUser;
        builder9.mongoUseSSL = true;
        builder9.setincludeCollection("concurrent_bulk_requests");
        boolean boolean15 = builder9.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6172");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218363" + "'", str5, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820217755" + "'", str6, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218264" + "'", str9, "mongodb-1638820218264");
    }

    @Test
    public void test6173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        builder5.skipInitialImport = true;
        builder5.indexName = "ssl_verify_certificate";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoCollection("mongodb-1638820218449");
        boolean boolean14 = builder5.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoAdminUser("script.default_lang");
        builder16.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test6174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        java.lang.String str8 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("socket_timeout");
        java.lang.String str15 = builder14.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject18 = builder14.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.mongoCollectionFilter(basicDBObject18);
        builder19.riverName = "mongodb-1638820218264";
        builder19.mongoAdminPassword = "mongodb-1638820218424";
        builder19.setindexName("gridfs");
        builder19.statisticsIndexName = "_river";
        builder19.setstatisticsIndexName("mongodb-1638820218424");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test6175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString15();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        java.lang.String str14 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str15 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218424" + "'", str10, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_size" + "'", str16, "bulk_size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test6176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder0.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.scriptType("script.default_lang");
        java.lang.String str15 = builder14.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.script("bulk");
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder19.setmongoOplogFilter(basicDBObject20);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder19.setmongoOplogFilter(basicDBObject22);
        builder19.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.throttleSize((int) (short) 0);
        boolean boolean28 = builder27.mongoSSLVerifyCertificate;
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoClientOptions(mongoClientOptions29);
        java.lang.String str31 = builder27.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean33 = builder32.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.disableIndexRefresh(false);
        java.lang.String str38 = builder37.getstatisticsTypeName();
        java.lang.String str39 = builder37.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean41 = builder40.getdropCollection();
        java.lang.String str42 = builder40.getscript();
        boolean boolean43 = builder40.dropCollection;
        builder40.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory46 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean48 = builder47.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.script("bulk");
        com.mongodb.BasicDBObject basicDBObject51 = builder50.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory46.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder40.mongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder37.mongoCollectionFilter(basicDBObject51);
        builder27.setmongoCollectionFilter(basicDBObject51);
        builder14.mongoCollectionFilter = basicDBObject51;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(executableScript52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test6177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoCollection();
        int int9 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean10 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder3.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder43.mongoOplogFilter = basicDBObject44;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test6179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        builder5.setisMongos((java.lang.Boolean) true);
        builder5.setconnectTimeout((int) 'a');
        java.util.Set<java.lang.String> strSet12 = builder5.getparentTypes();
        boolean boolean13 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = builder5.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
    }

    @Test
    public void test6180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.riverName("admin");
        java.lang.Boolean boolean34 = builder33.getisMongos();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(boolean34);
    }

    @Test
    public void test6181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.typeName("");
        builder8.mongoSecondaryReadPreference = false;
        int int11 = builder8.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoDb("is_mongos");
        java.lang.String str14 = builder8.indexName;
        java.lang.String str15 = builder8.script;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
    }

    @Test
    public void test6182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        java.lang.String str10 = builder5.getscriptType();
        java.lang.String str11 = builder5.getriverIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test6183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.throttleSize((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.scriptType("sandbox");
        builder11.storeStatistics = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test6184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        builder5.setmongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean22 = mongoDBRiverDefinition21.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test6185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        java.lang.String str9 = builder0.mongoLocalPassword;
        java.lang.String str10 = builder0.typeName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test6186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6186");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
    }

    @Test
    public void test6187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.riverIndexName("port");
        builder3.setmongoAdminUser("mongodb-1638820218449");
        builder3.typeName = "credentials";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test6188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6188");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter7.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = riverSettings9.settings();
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory6.newScript(strMap10);
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings5, strMap10);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = riverSettings12.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = riverSettings12.settings();
        org.elasticsearch.script.ScriptService scriptService15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("options", "include_fields", riverSettings12, scriptService15);
        java.lang.String str17 = mongoDBRiverDefinition16.getDROP_COLLECTION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition16.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition16.getHOST_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "drop_collection" + "'", str17, "drop_collection");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "host" + "'", str19, "host");
    }

    @Test
    public void test6189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder0.setdropCollection(false);
        boolean boolean11 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverIndexName("skip_initial_import");
        java.lang.String str14 = builder13.gettypeName();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoClientOptions(mongoClientOptions15);
        builder16.statisticsIndexName = "import_all_collections";
        builder16.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test6190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.statisticsTypeName = "name";
        builder5.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.skipInitialImport(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test6191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("credentials");
        java.lang.String str10 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverIndexName("mongodb-1638820218424");
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder12.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList13);
    }

    @Test
    public void test6192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6192");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.disableIndexRefresh(false);
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        builder22.skipInitialImport = false;
        builder22.setscriptType("script");
        java.lang.String[] strArray44 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet45);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder14.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder14.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet53 = builder14.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder8.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder8.riverName("throttle_size");
        builder56.setmongoAdminPassword("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.connectTimeout(10);
        com.mongodb.BasicDBObject basicDBObject61 = builder56.mongoCollectionFilter;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(basicDBObject61);
    }

    @Test
    public void test6193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.throttleSize(1);
        builder15.includeCollection = "credentials";
        builder15.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.statisticsIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.dropCollection(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test6195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.mongoDb("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder39.mongoLocalPassword("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoDb("hi!");
        boolean boolean48 = builder47.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test6196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertNull(mongoClientOptions5);
    }

    @Test
    public void test6197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.disableIndexRefresh(false);
        java.lang.String str17 = builder16.getstatisticsTypeName();
        java.lang.String str18 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder32.skipInitialImport = false;
        builder32.setscriptType("script");
        java.lang.String[] strArray54 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        builder16.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder60.setriverIndexName("password");
        builder60.mongoCollection = "include_collection";
        java.lang.String str65 = builder60.getmongoLocalUser();
        java.lang.String str66 = builder60.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test6198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str12 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "admin" + "'", str12, "admin");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "servers" + "'", str13, "servers");
    }

    @Test
    public void test6199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6199");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str4 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "exclude_fields" + "'", str4, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
    }

    @Test
    public void test6200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int9 = mongoDBRiverDefinition1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test6201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        boolean boolean8 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.isMongos((java.lang.Boolean) false);
        builder5.mongoDb = "script";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test6202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition1.initialTimestamp;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(wildcardTimestamp7);
    }

    @Test
    public void test6203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6203");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        int int31 = mongoDBRiverDefinition19.getThrottleSize();
        java.lang.String str32 = mongoDBRiverDefinition19.script;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp33 = mongoDBRiverDefinition19.initialTimestamp;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(wildcardTimestamp33);
    }

    @Test
    public void test6204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6204");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString14();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218408" + "'", str3, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
    }

    @Test
    public void test6205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder3.throttleSize(1000);
        builder76.setskipInitialImport(false);
        builder76.setstatisticsTypeName("localhost");
        java.lang.String str81 = builder76.statisticsTypeName;
        java.util.Set<java.lang.String> strSet82 = builder76.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder76.mongoAdminUser("collection");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "localhost" + "'", str81, "localhost");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test6206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        int int10 = builder7.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.throttleSize((int) (byte) 1);
        builder7.settypeName("concurrent_requests");
        builder7.settypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder7.riverIndexName("mongodb-1638820218449");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test6207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test6208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        boolean boolean12 = builder11.dropCollection;
        builder11.setmongoLocalUser("admin");
        builder11.setdropCollection(false);
        int int17 = builder11.getthrottleSize();
        builder11.advancedTransformation = true;
        builder11.mongoAdminUser = "skip_initial_import";
        java.lang.String str22 = builder11.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder11.dropCollection(false);
        java.util.Set<java.lang.String> strSet25 = builder24.includeFields;
        java.lang.String str26 = builder24.mongoAdminUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "skip_initial_import" + "'", str26, "skip_initial_import");
    }

    @Test
    public void test6209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test6210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6210");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.disableIndexRefresh(false);
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.lang.String str10 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition9.parentTypes;
        boolean boolean12 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean13 = mongoDBRiverDefinition9.dropCollection;
        java.lang.String str14 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.Object obj16 = docScoreSearchScript0.unwrap((java.lang.Object) str15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.disableIndexRefresh(false);
        java.lang.String str23 = builder22.getstatisticsTypeName();
        builder22.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.script("bulk");
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder31.setmongoOplogFilter(basicDBObject32);
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder31.setmongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        builder39.skipInitialImport = false;
        builder39.setscriptType("script");
        java.lang.String[] strArray61 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder39.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder31.setexcludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder31.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory68 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean70 = builder69.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder69.script("bulk");
        com.mongodb.BasicDBObject basicDBObject73 = builder72.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript74 = docScoreNativeScriptFactory68.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject73);
        builder31.mongoCollectionFilter = basicDBObject73;
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject73);
        org.elasticsearch.river.RiverSettings riverSettings77 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject73);
        builder22.mongoOplogFilter = basicDBObject73;
        java.lang.Object obj79 = docScoreSearchScript0.unwrap((java.lang.Object) builder22);
        org.apache.lucene.search.Scorer scorer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "throttle_size" + "'", obj16, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertNotNull(executableScript74);
        org.junit.Assert.assertNotNull(obj79);
    }

    @Test
    public void test6211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        int int8 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        boolean boolean10 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.isMongos();
        boolean boolean12 = mongoDBRiverDefinition1.storeStatistics;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoLocalPassword("index");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString7();
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter11.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings2();
        builder5.serializedObjectSupporter = serializedObjectSupporter11;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings3();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString4();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218326" + "'", str12, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218449" + "'", str13, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_river" + "'", str18, "_river");
    }

    @Test
    public void test6213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        java.lang.String str75 = builder3.mongoLocalUser;
        java.lang.String str76 = builder3.mongoLocalUser;
        builder3.setskipInitialImport(false);
        java.lang.String str79 = builder3.getmongoAdminUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test6214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        java.lang.String str12 = builder11.getmongoAdminUser();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.script("store_statistics");
        java.lang.String str18 = builder17.mongoCollection;
        java.lang.String str19 = builder17.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder25.mongoGridFS;
        int int31 = builder25.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.mongoLocalPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("store_statistics");
        java.lang.String str37 = builder34.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean41 = builder40.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.script("bulk");
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder43.setmongoOplogFilter(basicDBObject44);
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder43.setmongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean49 = builder48.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.script("bulk");
        builder51.skipInitialImport = false;
        builder51.setscriptType("script");
        java.lang.String[] strArray73 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder51.excludeFields((java.util.Set<java.lang.String>) strSet74);
        builder43.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        builder34.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder25.includeFields((java.util.Set<java.lang.String>) strSet74);
        builder17.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet74);
        int int82 = builder81.getconnectTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "store_statistics" + "'", str37, "store_statistics");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test6215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        builder54.mongoSecondaryReadPreference = false;
        java.util.Set<java.lang.String> strSet58 = builder54.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject59 = builder54.mongoOplogFilter;
        builder54.dropCollection = true;
        builder54.mongoLocalUser = "options";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNull(basicDBObject59);
    }

    @Test
    public void test6216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        builder13.skipInitialImport = false;
        builder13.setscriptType("script");
        java.lang.String[] strArray35 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet36);
        builder13.setscript("local");
        java.util.Set<java.lang.String> strSet41 = builder13.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder5.includeFields(strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.socketTimeout((-1));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test6217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str14 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str15 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.mongoAdminPassword;
        boolean boolean17 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "db" + "'", str15, "db");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test6218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6218");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder13.mongoCollection = "";
        builder13.riverIndexName = "collection";
        boolean boolean18 = builder13.mongoSSLVerifyCertificate;
        builder13.setmongoDb("import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.connectTimeout = 27017;
        builder3.setconnectTimeout((int) (short) 100);
        java.lang.String str16 = builder3.getindexName();
        java.lang.String str17 = builder3.scriptType;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test6220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        java.lang.String str9 = builder0.mongoLocalPassword;
        java.lang.String str10 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        java.lang.String str13 = builder11.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        java.lang.String str21 = builder19.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.socketTimeout(100);
        boolean boolean24 = builder19.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.disableIndexRefresh(false);
        java.lang.String str31 = builder30.getstatisticsTypeName();
        java.lang.String str32 = builder30.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder38.setmongoOplogFilter(basicDBObject39);
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder38.setmongoOplogFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("bulk");
        builder46.skipInitialImport = false;
        builder46.setscriptType("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder46.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder38.setexcludeFields((java.util.Set<java.lang.String>) strSet69);
        builder30.includeFields = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder11.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder0.includeFields((java.util.Set<java.lang.String>) strSet69);
        builder76.setscript("user");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test6221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test6222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6222");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        builder14.statisticsIndexName = "socket_timeout";
        builder14.setmongoUseSSL(false);
        java.lang.Object obj23 = docScoreSearchScript0.unwrap((java.lang.Object) builder14);
        docScoreSearchScript0.setNextVar("gridfs", (java.lang.Object) "filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.disableIndexRefresh(false);
        builder33.setthrottleSize((int) ' ');
        java.lang.String str36 = builder33.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder33.statisticsIndexName("ssl_verify_certificate");
        boolean boolean39 = builder33.getimportAllCollections();
        docScoreSearchScript0.setNextVar("", (java.lang.Object) boolean39);
        org.apache.lucene.search.Scorer scorer41 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test6223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsIndexName();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl" + "'", str11, "ssl");
    }

    @Test
    public void test6224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray4 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList5 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList5, serverAddressArray4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet9 = builder8.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalUser("credentials");
        java.lang.String str12 = builder11.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder16.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder16.setmongoOplogFilter(basicDBObject19);
        builder16.statisticsIndexName = "socket_timeout";
        builder16.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder28.setmongoOplogFilter(basicDBObject29);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder28.setmongoOplogFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        builder36.skipInitialImport = false;
        builder36.setscriptType("script");
        java.lang.String[] strArray58 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet59);
        builder28.setexcludeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder16.includeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet59);
        builder0.parentTypes = strSet59;
        builder0.setmongoSecondaryReadPreference(true);
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean72 = builder0.mongoGridFS;
        java.lang.String str73 = builder0.getriverName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serverAddressArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test6225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        builder3.riverName = "bulk";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder3.mongoLocalUser("_river");
        builder45.mongoDb = "credentials";
        java.lang.String str48 = builder45.getmongoDb();
        builder45.setmongoLocalPassword("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.script("bulk");
        builder51.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder51.connectTimeout((int) (byte) 10);
        builder58.setincludeCollection("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.indexName("throttle_size");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter65 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str66 = serializedObjectSupporter65.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings67 = serializedObjectSupporter65.deserializeObjectRiverSettings4();
        java.lang.String str68 = serializedObjectSupporter65.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings69 = serializedObjectSupporter65.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings69, scriptService70);
        java.lang.String str72 = mongoDBRiverDefinition71.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions73 = mongoDBRiverDefinition71.mongoClientOptions;
        builder62.setmongoClientOptions(mongoClientOptions73);
        builder45.setmongoClientOptions(mongoClientOptions73);
        builder45.mongoGridFS = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "mongodb-1638820218326" + "'", str66, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "mongodb-1638820218326" + "'", str68, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings69);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "mycollection" + "'", str72, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions73);
    }

    @Test
    public void test6226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder3.getmongoClientOptions();
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.bson.types.Binary binary8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.initialTimestamp(binary8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test6227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
    }

    @Test
    public void test6228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder17.mongoOplogFilter;
        builder17.mongoLocalUser = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoSecondaryReadPreference(false);
        com.mongodb.BasicDBObject basicDBObject23 = builder17.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = builder24.build();
        java.lang.String str26 = mongoDBRiverDefinition25.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet27 = mongoDBRiverDefinition25.parentTypes;
        boolean boolean28 = mongoDBRiverDefinition25.isStoreStatistics();
        boolean boolean29 = mongoDBRiverDefinition25.dropCollection;
        java.lang.String str30 = mongoDBRiverDefinition25.scriptType;
        java.lang.String str31 = mongoDBRiverDefinition25.getCREDENTIALS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = mongoDBRiverDefinition25.getInitialTimestamp();
        java.lang.String str33 = mongoDBRiverDefinition25.getSSL_CONNECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject34 = mongoDBRiverDefinition25.mongoCollectionFilter;
        builder17.mongoCollectionFilter = basicDBObject34;
        java.lang.String str36 = builder17.getmongoLocalUser();
        boolean boolean37 = builder17.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index" + "'", str26, "index");
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "credentials" + "'", str31, "credentials");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ssl" + "'", str33, "ssl");
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "password" + "'", str36, "password");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test6229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder3.mongoCollection("mongodb-1638820217755");
        builder34.includeCollection = "servers";
        builder34.setisMongos((java.lang.Boolean) true);
        java.lang.Boolean boolean39 = builder34.isMongos;
        builder34.scriptType = "disable_index_refresh";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + boolean39 + "' != '" + true + "'", boolean39, true);
    }

    @Test
    public void test6230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(true);
        builder3.skipInitialImport = true;
        boolean boolean16 = builder3.dropCollection;
        int int17 = builder3.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.disableIndexRefresh(false);
        java.lang.String str24 = builder23.getstatisticsTypeName();
        java.lang.String str25 = builder23.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.socketTimeout(100);
        boolean boolean28 = builder23.dropCollection;
        java.lang.String str29 = builder23.riverIndexName;
        boolean boolean30 = builder23.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder23.socketTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder23.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        builder35.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter41 = builder35.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        builder35.mongoClientOptions = mongoClientOptions42;
        builder35.settypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder35.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean49 = builder48.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.script("bulk");
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder51.setmongoOplogFilter(basicDBObject52);
        com.mongodb.BasicDBObject basicDBObject54 = null;
        builder51.setmongoOplogFilter(basicDBObject54);
        java.lang.String str56 = builder51.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoAdminUser("socket_timeout");
        java.lang.String str63 = builder62.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject66 = builder62.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder51.mongoCollectionFilter(basicDBObject66);
        builder67.riverName = "mongodb-1638820218264";
        builder67.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter74 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str75 = serializedObjectSupporter74.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings76 = serializedObjectSupporter74.deserializeObjectRiverSettings4();
        java.lang.String str77 = serializedObjectSupporter74.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings78 = serializedObjectSupporter74.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService79 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings78, scriptService79);
        java.lang.String str81 = mongoDBRiverDefinition80.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions82 = mongoDBRiverDefinition80.mongoClientOptions;
        builder67.mongoClientOptions = mongoClientOptions82;
        builder35.setmongoClientOptions(mongoClientOptions82);
        builder23.setmongoClientOptions(mongoClientOptions82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder3.mongoClientOptions(mongoClientOptions82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoDb("bulk");
        boolean boolean89 = builder86.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(serializedObjectSupporter41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mongodb-1638820218326" + "'", str75, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mongodb-1638820218326" + "'", str77, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings78);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "mycollection" + "'", str81, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test6231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        builder3.setadvancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.typeName("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test6232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        builder3.mongoLocalPassword = "script_type";
        java.lang.String str14 = builder3.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.connectTimeout((int) (byte) 1);
        boolean boolean17 = builder16.mongoGridFS;
        builder16.advancedTransformation = true;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject20);
    }

    @Test
    public void test6233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder3.throttleSize(1000);
        builder76.setskipInitialImport(false);
        boolean boolean79 = builder76.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder76.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder76.socketTimeout(27017);
        org.bson.types.Binary binary84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.initialTimestamp(binary84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test6234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoCollection("throttle_size");
        builder14.socketTimeout = 60000;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test6235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getScript();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
    }

    @Test
    public void test6236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
    }

    @Test
    public void test6237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.isMongos = true;
        boolean boolean10 = builder5.importAllCollections;
        builder5.setindexName("socket_timeout");
        builder5.setscriptType("connect_timeout");
        boolean boolean15 = builder5.mongoUseSSL;
        java.lang.String str16 = builder5.script;
        java.lang.String str17 = builder5.getmongoLocalUser();
        boolean boolean18 = builder5.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk" + "'", str16, "bulk");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.getmongoUseSSL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder0.getscript();
        java.lang.String str4 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "store_statistics" + "'", str3, "store_statistics");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
    }

    @Test
    public void test6240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        builder19.scriptType = "user";
        builder19.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder19.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.mongoOplogFilter(basicDBObject30);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.getmongoClientOptions();
        boolean boolean35 = builder33.mongoSSLVerifyCertificate;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test6241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoLocalPassword("index");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString7();
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter11.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings2();
        builder5.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str17 = serializedObjectSupporter11.deserializeObjectString18();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString3();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218326" + "'", str12, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218449" + "'", str13, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218264" + "'", str18, "mongodb-1638820218264");
    }

    @Test
    public void test6242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str12 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean14 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "collection" + "'", str12, "collection");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test6243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.disableIndexRefresh(false);
        java.lang.String str17 = builder16.getstatisticsTypeName();
        java.lang.String str18 = builder16.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder32.skipInitialImport = false;
        builder32.setscriptType("script");
        java.lang.String[] strArray54 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        builder16.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoLocalPassword("advanced_transformation");
        java.lang.String str63 = builder62.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.mongoLocalUser("bulk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test6244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean12 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test6245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getFILTER_FIELD();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
    }

    @Test
    public void test6246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.connectTimeout = 27017;
        builder3.setconnectTimeout((int) (short) 100);
        java.lang.String str16 = builder3.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.importAllCollections(true);
        java.util.Set<java.lang.String> strSet19 = builder18.getexcludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test6247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6247");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getParentTypes();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        int int11 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test6248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder9.setmongoCollection("advanced_transformation");
        boolean boolean12 = builder9.getdropCollection();
        boolean boolean13 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoCollection("admin");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder9.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder9.build();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
    }

    @Test
    public void test6249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "store_statistics" + "'", str6, "store_statistics");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disable_index_refresh" + "'", str7, "disable_index_refresh");
    }

    @Test
    public void test6250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.scriptType("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoAdminUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        java.util.Set<java.lang.String> strSet14 = builder8.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.socketTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.statisticsTypeName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.disableIndexRefresh(false);
        builder24.setthrottleSize((int) ' ');
        boolean boolean27 = builder24.getadvancedTransformation();
        java.lang.String str28 = builder24.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        builder32.skipInitialImport = false;
        builder32.setscriptType("script");
        java.lang.String[] strArray54 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder32.setscript("local");
        java.util.Set<java.lang.String> strSet60 = builder32.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder24.includeFields(strSet60);
        builder8.excludeFields = strSet60;
        builder5.excludeFields = strSet60;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test6251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        java.lang.String str12 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder11.getinitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = builder11.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoAdminPassword("local");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test6252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("credentials");
        java.lang.String str10 = builder0.getmongoAdminPassword();
        boolean boolean11 = builder0.getdropCollection();
        boolean boolean12 = builder0.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject13 = builder0.getmongoOplogFilter();
        int int14 = builder0.getconnectTimeout();
        builder0.mongoLocalPassword = "dummy-stats";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test6253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        int int9 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean11 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean12 = mongoDBRiverDefinition1.isImportAllCollections();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        java.lang.String str4 = builder3.script;
        builder3.connectTimeout = (short) 0;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder3.mongoServers;
        java.lang.String str9 = builder3.mongoLocalUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoServers(serverAddressList10);
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test6255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.getmongoUseSSL();
        java.lang.String str13 = builder11.includeCollection;
        java.lang.String str14 = builder11.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.storeStatistics(false);
        builder11.setconnectTimeout((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test6256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        java.lang.String str30 = builder28.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter31 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str32 = serializedObjectSupporter31.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter31.deserializeObjectRiverSettings8();
        builder28.serializedObjectSupporter = serializedObjectSupporter31;
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        java.lang.String str37 = serializedObjectSupporter31.deserializeObjectString10();
        java.lang.String str38 = serializedObjectSupporter31.deserializeObjectString4();
        java.lang.String str39 = serializedObjectSupporter31.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings40 = serializedObjectSupporter31.deserializeObjectRiverSettings5();
        java.lang.String str41 = serializedObjectSupporter31.deserializeObjectString17();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings33);
        org.junit.Assert.assertNotNull(riverSettings34);
        org.junit.Assert.assertNotNull(riverSettings36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_river" + "'", str37, "_river");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_river" + "'", str38, "_river");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb-1638820218264" + "'", str39, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "mongodb-1638820218449" + "'", str41, "mongodb-1638820218449");
    }

    @Test
    public void test6257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6257");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.includeCollection;
        boolean boolean10 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str11 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
    }

    @Test
    public void test6258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test6259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder14.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.script("bulk");
        builder22.skipInitialImport = false;
        builder22.setscriptType("script");
        java.lang.String[] strArray44 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet45);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder14.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean53 = builder52.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.script("bulk");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder14.mongoCollectionFilter = basicDBObject56;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder5.mongoOplogFilter = basicDBObject56;
        builder5.throttleSize = '#';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder5.advancedTransformation(true);
        builder65.mongoLocalUser = "filter";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test6260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        boolean boolean18 = builder16.getmongoGridFS();
        java.lang.String str19 = builder16.mongoCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test6261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.gettypeName();
        java.lang.String str8 = builder5.gettypeName();
        builder5.setthrottleSize(32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test6262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoLocalUser("mongodb-1638820218299");
        java.lang.String str15 = builder14.getstatisticsIndexName();
        builder14.setmongoUseSSL(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "socket_timeout" + "'", str15, "socket_timeout");
    }

    @Test
    public void test6263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str13 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean14 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "size" + "'", str13, "size");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test6264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        boolean boolean7 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        java.lang.String str9 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str10 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
    }

    @Test
    public void test6265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getConnectTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.getdropCollection();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test6266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6266");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter13.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings16 = riverSettings15.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        builder20.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder20.initialTimestamp;
        com.mongodb.BasicDBObject basicDBObject28 = builder20.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder33.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder33.setmongoOplogFilter(basicDBObject36);
        builder33.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.throttleSize((int) (short) 0);
        builder33.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str44 = builder33.getmongoCollection();
        boolean boolean45 = builder33.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean47 = builder46.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder46.disableIndexRefresh(false);
        java.lang.String str52 = builder51.getstatisticsTypeName();
        java.lang.String str53 = builder51.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean55 = builder54.getdropCollection();
        java.lang.String str56 = builder54.getscript();
        boolean boolean57 = builder54.dropCollection;
        builder54.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory60 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean62 = builder61.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.script("bulk");
        com.mongodb.BasicDBObject basicDBObject65 = builder64.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript66 = docScoreNativeScriptFactory60.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder54.mongoOplogFilter(basicDBObject65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder51.mongoCollectionFilter(basicDBObject65);
        builder33.setmongoOplogFilter(basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings70 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.script.ExecutableScript executableScript71 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218326" + "'", str14, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(wildcardTimestamp27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(executableScript66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executableScript71);
    }

    @Test
    public void test6267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminPassword("secondary_read_preference");
        builder11.script = "mongodb-1638820218363";
        builder11.disableIndexRefresh = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test6268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.getstatisticsIndexName();
        boolean boolean8 = builder5.getmongoGridFS();
        java.lang.String str9 = builder5.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.storeStatistics(true);
        boolean boolean12 = builder5.getadvancedTransformation();
        builder5.setstoreStatistics(false);
        builder5.setdisableIndexRefresh(false);
        int int17 = builder5.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        java.lang.String str20 = builder18.riverName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = builder18.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder25.setmongoOplogFilter(basicDBObject26);
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder25.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        builder33.skipInitialImport = false;
        builder33.setscriptType("script");
        java.lang.String[] strArray55 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder33.excludeFields((java.util.Set<java.lang.String>) strSet56);
        builder25.setexcludeFields((java.util.Set<java.lang.String>) strSet56);
        builder18.excludeFields = strSet56;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(serializedObjectSupporter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test6269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6269");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218326" + "'", str6, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
    }

    @Test
    public void test6270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoGridFS(false);
        java.lang.String str11 = builder10.statisticsTypeName;
        boolean boolean12 = builder10.getdropCollection();
        java.lang.String str13 = builder10.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test6271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        builder9.throttleSize = (short) 100;
        builder9.mongoAdminUser = "concurrent_requests";
        builder9.includeCollection = "servers";
        java.lang.String str16 = builder9.getstatisticsIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test6272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder0.mongoAdminUser;
        boolean boolean7 = builder0.getstoreStatistics();
        boolean boolean8 = builder0.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test6273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.connectTimeout(30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.importAllCollections(true);
        boolean boolean18 = builder17.getdisableIndexRefresh();
        builder17.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.statisticsIndexName("concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test6274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder15.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        builder23.skipInitialImport = false;
        builder23.setscriptType("script");
        java.lang.String[] strArray45 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder23.excludeFields((java.util.Set<java.lang.String>) strSet46);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder3.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoCollection("user");
        java.lang.String str53 = builder50.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoSSLVerifyCertificate(false);
        builder50.setscriptType("mongodb-1638820217755");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test6275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.indexName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoGridFS(true);
        builder9.setmongoCollection("is_mongos");
        boolean boolean12 = builder9.getdropCollection();
        builder9.setriverIndexName("script_type");
        builder9.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6276");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) 60000);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test6277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        java.lang.String str8 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.disableIndexRefresh(false);
        builder14.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        boolean boolean25 = builder20.mongoGridFS;
        java.lang.String[] strArray68 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder20.includeFields((java.util.Set<java.lang.String>) strSet69);
        builder14.setincludeFields((java.util.Set<java.lang.String>) strSet69);
        builder5.setexcludeFields((java.util.Set<java.lang.String>) strSet69);
        builder5.setmongoDb("script.disable_dynamic");
        boolean boolean76 = builder5.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test6278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        java.lang.String str10 = builder9.mongoAdminUser;
        builder9.mongoUseSSL = true;
        builder9.setincludeCollection("concurrent_bulk_requests");
        builder9.setsocketTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder9.build();
        int int18 = builder9.getsocketTimeout();
        java.lang.Boolean boolean19 = builder9.isMongos;
        builder9.setdropCollection(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
    }

    @Test
    public void test6279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        java.lang.String str32 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = builder33.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList35 = mongoDBRiverDefinition34.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue36 = mongoDBRiverDefinition34.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean37 = mongoDBRiverDefinition34.dropCollection;
        boolean boolean38 = mongoDBRiverDefinition34.getmongoSecondaryReadPreference();
        boolean boolean39 = mongoDBRiverDefinition34.isMongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = mongoDBRiverDefinition34.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.mongoServers(serverAddressList40);
        java.lang.String str42 = builder41.getriverIndexName();
        com.mongodb.BasicDBObject basicDBObject43 = builder41.mongoOplogFilter;
        builder41.storeStatistics = true;
        java.lang.String str46 = builder41.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder41.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalUser("script_type");
        boolean boolean51 = builder50.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition34);
        org.junit.Assert.assertNotNull(serverAddressList35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(basicDBObject43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test6280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6280");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.riverIndexName("mongodb-1638820218299");
        builder33.typeName = "host";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter36 = builder33.serializedObjectSupporter;
        builder33.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean40 = builder39.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder39.disableIndexRefresh(false);
        java.lang.String str45 = builder44.getstatisticsTypeName();
        java.lang.String str46 = builder44.riverName;
        builder44.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder44.connectTimeout(27017);
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = builder50.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.connectTimeout((int) (short) -1);
        builder50.mongoAdminUser = "import_all_collections";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder50.typeName("");
        builder57.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean61 = builder60.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder60.script("bulk");
        com.mongodb.BasicDBObject basicDBObject64 = null;
        builder63.setmongoOplogFilter(basicDBObject64);
        com.mongodb.BasicDBObject basicDBObject66 = null;
        builder63.setmongoOplogFilter(basicDBObject66);
        builder63.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder63.throttleSize((int) (short) 0);
        builder63.mongoLocalPassword = "script.disable_dynamic";
        builder63.riverName = "include_fields";
        java.lang.String str76 = builder63.gettypeName();
        com.mongodb.BasicDBObject basicDBObject77 = builder63.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder57.mongoOplogFilter(basicDBObject77);
        builder33.setmongoOplogFilter(basicDBObject77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(serializedObjectSupporter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test6281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition1.mongoClientOptions;
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.includeFields;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test6282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        builder3.riverName = "bulk";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder3.mongoLocalUser("_river");
        builder45.mongoDb = "credentials";
        java.lang.String str48 = builder45.getmongoDb();
        int int49 = builder45.getsocketTimeout();
        java.util.Set<java.lang.String> strSet50 = builder45.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder45.statisticsIndexName("options");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test6283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getConnectTimeout();
        int int5 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str6 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test6284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        builder20.setriverName("collection");
        builder20.mongoGridFS = true;
        java.lang.String str26 = builder20.getmongoAdminPassword();
        boolean boolean27 = builder20.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.skipInitialImport(true);
        builder29.setmongoCollection("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.mongoLocalPassword("mongodb-1638820218424");
        builder33.setscript("servers");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test6285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.importAllCollections(true);
        boolean boolean11 = builder5.getmongoSSLVerifyCertificate();
        java.lang.String str12 = builder5.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsTypeName("");
        builder14.setdisableIndexRefresh(true);
        builder14.dropCollection = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test6286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        int int16 = mongoDBRiverDefinition1.getSocketTimeout();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_bulk_requests" + "'", str14, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(basicDBObject17);
    }

    @Test
    public void test6287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "servers" + "'", str9, "servers");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNull(serializedObjectSupporter12);
    }

    @Test
    public void test6288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str13 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondary_read_preference" + "'", str13, "secondary_read_preference");
    }

    @Test
    public void test6289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        builder3.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) 10);
        builder17.setconnectTimeout((int) (short) -1);
        int int20 = builder17.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoAdminUser("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(false);
        builder26.setdropCollection(true);
        builder26.throttleSize = (byte) 100;
        java.lang.Class<?> wildcardClass31 = builder26.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test6290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.getScript();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str11 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "exclude_fields" + "'", str6, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
    }

    @Test
    public void test6291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder8.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean12 = mongoDBRiverDefinition9.dropCollection;
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str16 = mongoDBRiverDefinition9.getIndexName();
        boolean boolean17 = mongoDBRiverDefinition9.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter19 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition9.serializedObjectSupporter = serializedObjectSupporter19;
        java.lang.String str21 = serializedObjectSupporter19.deserializeObjectString5();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter19;
        java.lang.String str23 = mongoDBRiverDefinition1.statisticsTypeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218299" + "'", str21, "mongodb-1638820218299");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test6292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        boolean boolean9 = builder8.getadvancedTransformation();
        java.lang.String str10 = builder8.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoAdminPassword("options");
        boolean boolean15 = builder8.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        builder13.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.throttleSize((int) (short) 0);
        builder13.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder13.throttleSize(1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder25.getmongoServers();
        builder3.mongoServers = serverAddressList26;
        boolean boolean28 = builder3.mongoSSLVerifyCertificate;
        java.lang.String str29 = builder3.mongoAdminUser;
        builder3.scriptType = "skip_initial_import";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test6294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean6 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str7 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
    }

    @Test
    public void test6295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6295");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString7();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter2.deserializeObjectRiverSettings2();
        java.lang.String str7 = serializedObjectSupporter2.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        org.elasticsearch.script.ScriptService scriptService10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "concurrent_requests", riverSettings9, scriptService10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218363" + "'", str7, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
    }

    @Test
    public void test6296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6296");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test6297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.typeName;
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "null.null" + "'", str11, "null.null");
    }

    @Test
    public void test6298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        builder0.setthrottleSize(32);
        java.lang.String str49 = builder0.getmongoDb();
        com.mongodb.BasicDBObject basicDBObject50 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder0.riverIndexName("gridfs");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(basicDBObject50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test6299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        builder5.setmongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.scriptType("is_mongos");
        int int23 = builder22.getsocketTimeout();
        boolean boolean24 = builder22.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test6300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        int int6 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.initialTimestamp;
        int int11 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean12 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6301");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218326" + "'", str6, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218408" + "'", str8, "mongodb-1638820218408");
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertNotNull(riverSettings10);
    }

    @Test
    public void test6302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.riverName;
        java.lang.String str3 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder0.getmongoClientOptions();
        int int5 = builder0.getconnectTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test6303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6303");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder11.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.connectTimeout((int) (byte) 10);
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean21 = builder20.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.disableIndexRefresh(false);
        java.lang.String str26 = builder25.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet27 = builder25.excludeFields;
        java.lang.Object obj28 = docScoreSearchScript0.unwrap((java.lang.Object) strSet27);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        docScoreSearchScript0.setNextScore((float) 30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = builder33.build();
        java.lang.String str35 = mongoDBRiverDefinition34.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet36 = mongoDBRiverDefinition34.parentTypes;
        java.lang.String str37 = mongoDBRiverDefinition34.riverName;
        boolean boolean38 = mongoDBRiverDefinition34.disableIndexRefresh;
        java.lang.String str39 = mongoDBRiverDefinition34.riverIndexName;
        java.lang.String str40 = mongoDBRiverDefinition34.getRiverName();
        java.lang.String str41 = mongoDBRiverDefinition34.typeName;
        boolean boolean42 = mongoDBRiverDefinition34.getdisableIndexRefresh();
        boolean boolean43 = mongoDBRiverDefinition34.getmongoUseSSL();
        java.lang.Object obj44 = docScoreSearchScript0.unwrap((java.lang.Object) boolean43);
        org.apache.lucene.search.Scorer scorer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "index" + "'", str35, "index");
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + false + "'", obj44, false);
    }

    @Test
    public void test6304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
    }

    @Test
    public void test6305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6305");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test6306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.includeCollection;
        boolean boolean10 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str11 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str13 = mongoDBRiverDefinition1.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "drop_collection" + "'", str11, "drop_collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test6307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.dropCollection;
        int int12 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.getisMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test6308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean8 = mongoDBRiverDefinition1.advancedTransformation;
        boolean boolean9 = mongoDBRiverDefinition1.getstoreStatistics();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test6309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.riverName("script.disable_dynamic");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoCollectionFilter(basicDBObject14);
        java.lang.String str17 = builder16.statisticsTypeName;
        builder16.setscriptType(".scripts");
        builder16.setisMongos((java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test6310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder8.setriverIndexName("credentials");
        builder8.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoCollection("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test6311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder3.mongoSecondaryReadPreference;
        java.lang.String str13 = builder3.getincludeCollection();
        java.lang.String str14 = builder3.gettypeName();
        boolean boolean15 = builder3.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test6313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str38 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder3.includeCollection("bulk_size");
        int int41 = builder40.getthrottleSize();
        builder40.dropCollection = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test6314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str5 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.riverName;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test6315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        int int9 = mongoDBRiverDefinition1.throttleSize;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test6316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.mongoDb("bulk_timeout");
        builder39.mongoLocalUser = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.scriptType("mycollection");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test6317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getmongoCollection();
        boolean boolean15 = builder3.mongoSSLVerifyCertificate;
        int int16 = builder3.getsocketTimeout();
        java.util.Set<java.lang.String> strSet17 = builder3.excludeFields;
        java.lang.String str18 = builder3.statisticsTypeName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test6318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        int int9 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str10 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "skip_initial_import" + "'", str10, "skip_initial_import");
    }

    @Test
    public void test6319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test6320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
    }

    @Test
    public void test6321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.settypeName("drop_collection");
        java.lang.String str10 = builder5.getmongoCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder5.getmongoServers();
        boolean boolean12 = builder5.skipInitialImport;
        java.util.Set<java.lang.String> strSet13 = builder5.includeFields;
        java.lang.String str14 = builder5.statisticsTypeName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoDb;
        boolean boolean8 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getIncludeFields();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsTypeName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "connect_timeout" + "'", str6, "connect_timeout");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test6324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        java.util.Set<java.lang.String> strSet5 = builder2.getparentTypes();
        builder2.throttleSize = 'a';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.mongoSSLVerifyCertificate(false);
        int int12 = builder2.getsocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test6325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getstatisticsIndexName();
        int int13 = builder5.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoLocalPassword("script.default_lang");
        java.lang.String str16 = builder15.typeName;
        java.util.Set<java.lang.String> strSet17 = builder15.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        java.lang.String str20 = builder18.getscript();
        boolean boolean21 = builder18.dropCollection;
        builder18.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript30 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder18.mongoOplogFilter(basicDBObject29);
        builder31.mongoCollection = "";
        builder31.riverIndexName = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = builder36.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList38 = mongoDBRiverDefinition37.mongoServers;
        java.lang.String str39 = mongoDBRiverDefinition37.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet40 = mongoDBRiverDefinition37.getParentTypes();
        int int41 = mongoDBRiverDefinition37.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp42 = mongoDBRiverDefinition37.getInitialTimestamp();
        java.lang.String str43 = mongoDBRiverDefinition37.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition37.getCONNECT_TIMEOUT();
        java.lang.String str45 = mongoDBRiverDefinition37.getSERVERS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition37.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition37.getMongoCollectionFilter();
        builder31.setmongoOplogFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder15.mongoCollectionFilter(basicDBObject47);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition37);
        org.junit.Assert.assertNotNull(serverAddressList38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "bulk_timeout" + "'", str39, "bulk_timeout");
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "script" + "'", str43, "script");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "connect_timeout" + "'", str44, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "servers" + "'", str45, "servers");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "collection" + "'", str46, "collection");
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test6326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = null;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        java.lang.String str11 = mongoDBRiverDefinition1.getTYPE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean13 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.Class<?> wildcardClass14 = mongoDBRiverDefinition1.getClass();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "type" + "'", str11, "type");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test6327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        java.lang.String str12 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("servers");
        boolean boolean15 = builder11.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder0.setdropCollection(false);
        boolean boolean11 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverIndexName("skip_initial_import");
        java.lang.String str14 = builder13.gettypeName();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoClientOptions(mongoClientOptions15);
        builder16.statisticsIndexName = "import_all_collections";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.mongoAdminPassword("mydatabase");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test6329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String[] strArray47 = new java.lang.String[] { "user", "gridfs", "socket_timeout", "socket_timeout", "exclude_fields", "bulk_timeout", "actions", "disable_index_refresh", "bulk_size", "size", "script.disable_dynamic", "size", "index", "concurrent_requests", "type", "", "concurrent_requests", "script_type", "initial_timestamp", "import_all_collections", "throttle_size", "skip_initial_import", "ssl_verify_certificate", "script", "name", "concurrent_requests", "port", "bulk", "options", "script.disable_dynamic", "size", "", "script.disable_dynamic", "user", "parent_types", "bulk_size", "initial_timestamp", ".scripts", "sandbox", "script", "include_fields" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder5.setincludeFields((java.util.Set<java.lang.String>) strSet48);
        java.lang.String str51 = builder5.mongoAdminPassword;
        builder5.setthrottleSize(30000);
        java.lang.String str54 = builder5.getmongoAdminPassword();
        builder5.setmongoCollection("bulk_timeout");
        boolean boolean57 = builder5.getmongoGridFS();
        builder5.includeCollection = "";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test6330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6330");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218326" + "'", str4, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
    }

    @Test
    public void test6331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        builder13.statisticsIndexName = "socket_timeout";
        java.lang.String str20 = builder13.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder13.skipInitialImport(false);
        java.lang.String str23 = builder13.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.script("bulk");
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder27.setmongoOplogFilter(basicDBObject28);
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder27.setmongoOplogFilter(basicDBObject30);
        boolean boolean32 = builder27.mongoGridFS;
        java.lang.String[] strArray75 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder27.includeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet76);
        builder80.riverIndexName = "ssl";
        java.lang.String str83 = builder80.getmongoDb();
        java.lang.String str84 = builder80.getstatisticsIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test6332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.statisticsTypeName = "name";
        boolean boolean10 = builder5.advancedTransformation;
        boolean boolean11 = builder5.dropCollection;
        builder5.setconnectTimeout((int) 'a');
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder5.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serverAddressList14);
    }

    @Test
    public void test6333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.mongoAdminPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder16.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder16.setmongoOplogFilter(basicDBObject19);
        builder16.statisticsIndexName = "socket_timeout";
        java.lang.String str23 = builder16.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder16.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory26 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean28 = builder27.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.script("bulk");
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript32 = docScoreNativeScriptFactory26.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder16.mongoCollectionFilter(basicDBObject31);
        java.lang.String str34 = builder16.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.disableIndexRefresh(false);
        java.lang.String str41 = builder40.getstatisticsTypeName();
        builder40.scriptType = "user";
        builder40.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory46 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean48 = builder47.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.script("bulk");
        com.mongodb.BasicDBObject basicDBObject51 = builder50.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript52 = docScoreNativeScriptFactory46.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        builder40.setmongoCollectionFilter(basicDBObject51);
        builder16.setmongoOplogFilter(basicDBObject51);
        builder12.mongoOplogFilter = basicDBObject51;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(executableScript32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(executableScript52);
    }

    @Test
    public void test6334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        boolean boolean6 = builder3.getdropCollection();
        builder3.advancedTransformation = false;
        builder3.disableIndexRefresh = true;
        java.lang.String str11 = builder3.mongoDb;
        builder3.setsocketTimeout(10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test6335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.String[] strArray55 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.disableIndexRefresh(true);
        builder58.importAllCollections = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test6336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = builder0.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        java.lang.String str9 = builder0.getstatisticsIndexName();
        java.lang.String str10 = builder0.script;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
    }

    @Test
    public void test6337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6337");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test6338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = builder48.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition49.mongoServers;
        java.lang.String str51 = mongoDBRiverDefinition49.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean52 = mongoDBRiverDefinition49.getdropCollection();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition49.getParentTypes();
        java.lang.String str54 = mongoDBRiverDefinition49.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject55 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder47.mongoOplogFilter(basicDBObject55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition49);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "script_type" + "'", str51, "script_type");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test6339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "null.null" + "'", str8, "null.null");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder18.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder18.setmongoOplogFilter(basicDBObject21);
        builder18.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.disableIndexRefresh(false);
        java.lang.String str35 = builder34.getstatisticsTypeName();
        builder34.scriptType = "user";
        builder34.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder34.setmongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder18.mongoOplogFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder13.mongoCollectionFilter(basicDBObject45);
        builder13.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder13.socketTimeout((int) 'a');
        java.lang.String str54 = builder53.statisticsTypeName;
        builder53.settypeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder53.throttleSize(30000);
        java.lang.String str59 = builder53.riverName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test6341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition1.mongoClientOptions;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition1.initialTimestamp;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        boolean boolean15 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        int int16 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.Boolean boolean17 = mongoDBRiverDefinition1.isMongos;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test6342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) true);
        builder14.riverIndexName = "mongodb-1638820218408";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.statisticsIndexName("mongodb-1638820218326");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder14.setmongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.mongoAdminPassword("dummy-stats");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test6343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.getskipInitialImport();
        boolean boolean12 = builder3.mongoSSLVerifyCertificate;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.disableIndexRefresh(true);
        java.lang.String str40 = builder3.getscriptType();
        java.util.Set<java.lang.String> strSet41 = builder3.parentTypes;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
    }

    @Test
    public void test6345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        boolean boolean18 = builder16.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.getisMongos();
        int int12 = mongoDBRiverDefinition1.socketTimeout;
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str14 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getIncludeCollection();
        int int16 = mongoDBRiverDefinition1.getConnectTimeout();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test6347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int6 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoGridFS();
        int int8 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test6348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder11.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
    }

    @Test
    public void test6349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        builder3.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder3.statisticsTypeName("name");
        java.lang.String str44 = builder43.scriptType;
        builder43.setscriptType("hi!");
        builder43.typeName = "";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test6350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        builder19.setdropCollection(false);
        builder19.mongoSSLVerifyCertificate = false;
        builder19.throttleSize = 1;
        builder19.storeStatistics = false;
        boolean boolean28 = builder19.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test6351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        boolean boolean21 = builder20.dropCollection;
        builder20.setriverName("collection");
        builder20.setmongoAdminPassword("dummy-stats");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test6352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str9 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        int int13 = mongoDBRiverDefinition1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test6353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test6354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.getstatisticsIndexName();
        boolean boolean8 = builder5.getmongoGridFS();
        java.lang.String str9 = builder5.mongoAdminUser;
        java.lang.String str10 = builder5.statisticsTypeName;
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder5.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(mongoClientOptions11);
    }

    @Test
    public void test6355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString15();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        java.lang.String str14 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str15 = serializedObjectSupporter8.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter8.deserializeObjectRiverSettings5();
        java.lang.String str17 = serializedObjectSupporter8.deserializeObjectString7();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218424" + "'", str10, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218449" + "'", str15, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218326" + "'", str17, "mongodb-1638820218326");
    }

    @Test
    public void test6356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        int int7 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test6357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        int int8 = builder5.connectTimeout;
        java.lang.String[] strArray55 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet56);
        java.lang.String str59 = builder5.getscriptType();
        builder5.mongoAdminUser = "secondary_read_preference";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test6358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str6 = mongoDBRiverDefinition1.getIndexName();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
    }

    @Test
    public void test6359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str12 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondary_read_preference" + "'", str13, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
    }

    @Test
    public void test6360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        builder39.setriverIndexName("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.disableIndexRefresh(false);
        java.lang.String str48 = builder47.mongoLocalPassword;
        builder47.riverIndexName = "gridfs";
        builder47.isMongos = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test6361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.gettypeName();
        java.lang.String str8 = builder5.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.includeCollection("include_fields");
        int int11 = builder5.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoCollection("skip_initial_import");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.throttleSize(32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test6362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalUser("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.script("store_statistics");
        java.lang.String str7 = builder4.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        builder21.skipInitialImport = false;
        builder21.setscriptType("script");
        java.lang.String[] strArray43 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet44);
        builder13.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        builder4.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        builder0.parentTypes = strSet44;
        int int50 = builder0.throttleSize;
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "store_statistics" + "'", str7, "store_statistics");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test6363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        boolean boolean12 = builder5.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.socketTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.skipInitialImport(true);
        boolean boolean17 = builder5.getstoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test6364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        int int55 = builder54.throttleSize;
        java.lang.String str56 = builder54.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder60.setmongoOplogFilter(basicDBObject61);
        com.mongodb.BasicDBObject basicDBObject63 = null;
        builder60.setmongoOplogFilter(basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean66 = builder65.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder65.script("bulk");
        builder68.skipInitialImport = false;
        builder68.setscriptType("script");
        java.lang.String[] strArray90 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet91 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet91, strArray90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder68.excludeFields((java.util.Set<java.lang.String>) strSet91);
        builder60.setexcludeFields((java.util.Set<java.lang.String>) strSet91);
        builder54.setexcludeFields((java.util.Set<java.lang.String>) strSet91);
        boolean boolean96 = builder54.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder54.dropCollection(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test6365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = builder0.mongoLocalPassword;
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean4 = builder0.getmongoGridFS();
        boolean boolean5 = builder0.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(true);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test6366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean23 = builder5.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder5.connectTimeout((int) 'a');
        java.lang.String str26 = builder5.getincludeCollection();
        builder5.throttleSize = (byte) 100;
        java.lang.String str29 = builder5.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test6367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6367");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoUseSSL();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test6368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.connectTimeout(30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        com.mongodb.BasicDBObject basicDBObject20 = builder18.mongoCollectionFilter;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("bulk");
        builder22.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder22.connectTimeout((int) (byte) 10);
        builder29.setadvancedTransformation(false);
        java.util.Set<java.lang.String> strSet32 = builder29.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject33 = builder29.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder18.setmongoOplogFilter(basicDBObject33);
        builder17.mongoOplogFilter = basicDBObject33;
        org.bson.types.Binary binary37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder17.initialTimestamp(binary37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
    }

    @Test
    public void test6369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str9 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
    }

    @Test
    public void test6370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoSSLVerifyCertificate(true);
        boolean boolean34 = builder31.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = builder35.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition36.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue38 = mongoDBRiverDefinition36.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean39 = mongoDBRiverDefinition36.dropCollection;
        boolean boolean40 = mongoDBRiverDefinition36.isMongoSecondaryReadPreference();
        java.lang.String str41 = mongoDBRiverDefinition36.getStatisticsTypeName();
        java.lang.String str42 = mongoDBRiverDefinition36.getMongoLocalPassword();
        java.lang.String str43 = mongoDBRiverDefinition36.getIndexName();
        boolean boolean44 = mongoDBRiverDefinition36.mongoUseSSL;
        java.lang.String str45 = mongoDBRiverDefinition36.getSOCKET_TIMEOUT();
        boolean boolean46 = mongoDBRiverDefinition36.getmongoSecondaryReadPreference();
        int int47 = mongoDBRiverDefinition36.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition36.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder31.mongoOplogFilter(basicDBObject48);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition36);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "socket_timeout" + "'", str45, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test6371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        java.lang.String str12 = builder5.getstatisticsIndexName();
        boolean boolean13 = builder5.mongoSSLVerifyCertificate;
        builder5.mongoGridFS = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.scriptType("gridfs");
        builder5.setstatisticsTypeName("advanced_transformation");
        builder5.setskipInitialImport(true);
        boolean boolean19 = builder5.importAllCollections;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test6373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.statisticsTypeName = "name";
        builder5.throttleSize = 0;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder5.initialTimestamp;
        int int13 = builder5.getconnectTimeout();
        java.lang.String str14 = builder5.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.disableIndexRefresh(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test6374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test6375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6375");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean12 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
    }

    @Test
    public void test6376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str12 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "localhost" + "'", str11, "localhost");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
    }

    @Test
    public void test6377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.scriptType("type");
        java.lang.String str14 = builder3.getscriptType();
        builder3.connectTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.connectTimeout(2000);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test6378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str14 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean16 = mongoDBRiverDefinition1.getmongoGridFS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition1.getMongoServers();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_requests" + "'", str14, "concurrent_requests");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test6379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.indexName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoGridFS(true);
        builder9.setmongoCollection("is_mongos");
        boolean boolean12 = builder9.getdropCollection();
        builder9.setscript("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.disableIndexRefresh(false);
        java.lang.String str21 = builder20.getstatisticsTypeName();
        java.lang.String str22 = builder20.riverName;
        builder20.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet29 = builder28.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = builder30.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = mongoDBRiverDefinition31.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue33 = mongoDBRiverDefinition31.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean34 = mongoDBRiverDefinition31.dropCollection;
        boolean boolean35 = mongoDBRiverDefinition31.getmongoSecondaryReadPreference();
        boolean boolean36 = mongoDBRiverDefinition31.isMongoSecondaryReadPreference();
        int int37 = mongoDBRiverDefinition31.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp38 = mongoDBRiverDefinition31.getInitialTimestamp();
        java.lang.String str39 = mongoDBRiverDefinition31.getMongoDb();
        java.lang.String str40 = mongoDBRiverDefinition31.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList41 = mongoDBRiverDefinition31.getMongoServers();
        builder28.mongoServers = serverAddressList41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder9.mongoServers(serverAddressList41);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition31);
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 27017 + "'", int37 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(serverAddressList41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test6380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6380");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218264" + "'", str7, "mongodb-1638820218264");
    }

    @Test
    public void test6381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
    }

    @Test
    public void test6382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6382");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("filter", (java.lang.Object) "gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.script("bulk");
        builder7.skipInitialImport = false;
        builder7.setscriptType("script");
        java.lang.String[] strArray29 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet30);
        java.lang.String str33 = builder32.getriverIndexName();
        java.lang.String str34 = builder32.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter35 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str36 = serializedObjectSupporter35.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings37 = serializedObjectSupporter35.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings38 = serializedObjectSupporter35.deserializeObjectRiverSettings8();
        builder32.serializedObjectSupporter = serializedObjectSupporter35;
        org.elasticsearch.river.RiverSettings riverSettings40 = serializedObjectSupporter35.deserializeObjectRiverSettings4();
        java.lang.String str41 = serializedObjectSupporter35.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter35.deserializeObjectRiverSettings2();
        org.elasticsearch.common.settings.Settings settings43 = riverSettings42.globalSettings();
        java.lang.Object obj44 = docScoreSearchScript0.unwrap((java.lang.Object) riverSettings42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.script("store_statistics");
        builder47.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject50 = null;
        builder47.mongoOplogFilter = basicDBObject50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder47.storeStatistics(false);
        java.lang.String str54 = builder53.includeCollection;
        builder53.throttleSize = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder53.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = builder59.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList61 = mongoDBRiverDefinition60.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue62 = mongoDBRiverDefinition60.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean63 = mongoDBRiverDefinition60.dropCollection;
        boolean boolean64 = mongoDBRiverDefinition60.isMongoSecondaryReadPreference();
        java.lang.String str65 = mongoDBRiverDefinition60.getStatisticsTypeName();
        org.elasticsearch.common.unit.TimeValue timeValue66 = mongoDBRiverDefinition60.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str67 = mongoDBRiverDefinition60.getPARENT_TYPES_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition60.getSSL_VERIFY_CERT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList69 = mongoDBRiverDefinition60.mongoServers;
        builder53.setmongoServers(serverAddressList69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean72 = builder71.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder71.script("bulk");
        builder71.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter77 = builder71.serializedObjectSupporter;
        com.mongodb.BasicDBObject basicDBObject78 = builder71.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder53.mongoOplogFilter(basicDBObject78);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb-1638820218326" + "'", str36, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings37);
        org.junit.Assert.assertNotNull(riverSettings38);
        org.junit.Assert.assertNotNull(riverSettings40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_river" + "'", str41, "_river");
        org.junit.Assert.assertNotNull(riverSettings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition60);
        org.junit.Assert.assertNotNull(serverAddressList61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "parent_types" + "'", str67, "parent_types");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ssl_verify_certificate" + "'", str68, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(serverAddressList69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(serializedObjectSupporter77);
        org.junit.Assert.assertNotNull(basicDBObject78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test6383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.throttleSize(1);
        builder15.includeCollection = "credentials";
        builder15.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.statisticsIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.statisticsTypeName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean25 = builder24.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.script("bulk");
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder27.setmongoOplogFilter(basicDBObject28);
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder27.setmongoOplogFilter(basicDBObject30);
        builder27.statisticsIndexName = "socket_timeout";
        java.lang.String str34 = builder27.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder27.skipInitialImport(false);
        java.lang.String str37 = builder27.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder41.setmongoOplogFilter(basicDBObject42);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder41.setmongoOplogFilter(basicDBObject44);
        boolean boolean46 = builder41.mongoGridFS;
        java.lang.String[] strArray89 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder41.includeFields((java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet90);
        java.util.List<com.mongodb.ServerAddress> serverAddressList94 = builder27.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder21.mongoServers(serverAddressList94);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder21.throttleSize((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject98 = builder97.mongoCollectionFilter;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(serverAddressList94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(basicDBObject98);
    }

    @Test
    public void test6384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test6385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean13 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str14 = mongoDBRiverDefinition1.getRiverIndexName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition1.initialTimestamp;
        boolean boolean16 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str17 = mongoDBRiverDefinition1.getPORT_FIELD();
        boolean boolean18 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "port" + "'", str17, "port");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.riverIndexName("hi!");
        java.lang.String str8 = builder3.getmongoAdminUser();
        builder3.mongoGridFS = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test6387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean13 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder3.mongoCollectionFilter = basicDBObject45;
        builder3.connectTimeout = (-1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder3.scriptType("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoCollection("skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test6389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        builder3.setconnectTimeout((int) (byte) 1);
        builder3.mongoLocalPassword = "script_type";
        java.lang.String str14 = builder3.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.connectTimeout((int) (byte) 1);
        boolean boolean17 = builder16.advancedTransformation;
        java.lang.String str18 = builder16.getincludeCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test6390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        builder5.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = null;
        builder9.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoAdminPassword("options");
        boolean boolean17 = builder16.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("bulk");
        builder21.skipInitialImport = false;
        builder21.setscriptType("script");
        java.lang.String[] strArray43 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet44);
        builder16.setparentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder5.includeFields((java.util.Set<java.lang.String>) strSet44);
        boolean boolean49 = builder5.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder5.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.throttleSize(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test6391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6391");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218264" + "'", str6, "mongodb-1638820218264");
    }

    @Test
    public void test6392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        int int4 = mongoDBRiverDefinition1.getConnectTimeout();
        int int5 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str6 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test6393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test6394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        boolean boolean11 = builder3.advancedTransformation;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.mongoLocalUser("");
        java.lang.String str15 = builder14.getriverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder14.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(serverAddressList16);
    }

    @Test
    public void test6395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder3.setscript("local");
        java.util.Set<java.lang.String> strSet31 = builder3.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.riverName("admin");
        builder33.connectTimeout = 'a';
        boolean boolean36 = builder33.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = builder33.build();
        builder33.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition37);
    }

    @Test
    public void test6396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        builder5.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet22 = builder5.excludeFields;
        java.lang.String str23 = builder5.indexName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = builder5.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(serializedObjectSupporter24);
    }

    @Test
    public void test6397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.connectTimeout((int) (short) 1);
        boolean boolean9 = builder5.skipInitialImport;
        builder5.mongoLocalUser = "type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.statisticsTypeName("password");
        builder5.script = "script_type";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test6398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        builder19.scriptType = "user";
        builder19.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder19.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.mongoOplogFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.statisticsIndexName("local");
        builder33.includeCollection = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder33.script("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder33.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test6399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoLocalPassword("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoGridFS(false);
        builder6.setscriptType("mongodb-1638820218363");
        java.lang.String str11 = builder6.indexName;
        com.mongodb.BasicDBObject basicDBObject12 = builder6.getmongoCollectionFilter();
        builder6.mongoAdminUser = "secondary_read_preference";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test6400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        java.util.Set<java.lang.String> strSet6 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.throttleSize(0);
        java.lang.String str10 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean14 = builder13.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.disableIndexRefresh(false);
        java.lang.String str19 = builder18.getstatisticsTypeName();
        java.lang.String str20 = builder18.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.socketTimeout(100);
        boolean boolean23 = builder18.dropCollection;
        java.lang.String str24 = builder18.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.riverIndexName("secondary_read_preference");
        builder26.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = builder26.build();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition29.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoCollectionFilter(basicDBObject30);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test6401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = null;
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        builder39.mongoSecondaryReadPreference = false;
        builder39.setriverIndexName("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.disableIndexRefresh(false);
        java.lang.String str48 = builder47.mongoLocalPassword;
        builder47.statisticsIndexName = "null.null";
        builder47.setmongoDb("mongodb-1638820218449");
        java.lang.String str53 = builder47.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder47.socketTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = builder56.build();
        java.lang.String str58 = mongoDBRiverDefinition57.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet59 = mongoDBRiverDefinition57.parentTypes;
        int int60 = mongoDBRiverDefinition57.getSocketTimeout();
        java.lang.String str61 = mongoDBRiverDefinition57.getTYPE_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition57.getIS_MONGOS_FIELD();
        java.lang.String str63 = mongoDBRiverDefinition57.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList64 = mongoDBRiverDefinition57.getMongoServers();
        builder55.mongoServers = serverAddressList64;
        boolean boolean66 = builder55.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet67 = builder55.getincludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "index" + "'", str58, "index");
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "type" + "'", str61, "type");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "is_mongos" + "'", str62, "is_mongos");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "secondary_read_preference" + "'", str63, "secondary_read_preference");
        org.junit.Assert.assertNotNull(serverAddressList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strSet67);
    }

    @Test
    public void test6402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        java.lang.String[] strArray51 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str55 = builder3.mongoLocalPassword;
        builder3.setadvancedTransformation(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = builder3.mongoServers;
        builder3.disableIndexRefresh = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(serverAddressList58);
    }

    @Test
    public void test6403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
    }

    @Test
    public void test6404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6404");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings8 = riverSettings7.globalSettings();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218424" + "'", str6, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test6405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        java.lang.String str14 = builder3.getmongoCollection();
        builder3.setmongoSecondaryReadPreference(false);
        java.lang.String str17 = builder3.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "socket_timeout" + "'", str17, "socket_timeout");
    }

    @Test
    public void test6406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.script("bulk");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(false);
        builder17.mongoUseSSL = false;
        boolean boolean20 = builder17.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test6407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        java.lang.String str13 = builder3.getmongoLocalPassword();
        boolean boolean14 = builder3.importAllCollections;
        builder3.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoAdminPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.isMongos((java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test6408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.script("bulk");
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder6.setmongoOplogFilter(basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder6.setmongoOplogFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        builder14.skipInitialImport = false;
        builder14.setscriptType("script");
        java.lang.String[] strArray36 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet45 = builder6.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.parentTypes(strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.riverName("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean50 = builder49.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder49.script("bulk");
        com.mongodb.BasicDBObject basicDBObject53 = null;
        builder52.setmongoOplogFilter(basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.riverIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder57.disableIndexRefresh(false);
        java.lang.String str63 = builder62.getstatisticsTypeName();
        java.lang.String str64 = builder62.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean66 = builder65.getdropCollection();
        java.lang.String str67 = builder65.getscript();
        boolean boolean68 = builder65.dropCollection;
        builder65.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory71 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean73 = builder72.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder72.script("bulk");
        com.mongodb.BasicDBObject basicDBObject76 = builder75.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript77 = docScoreNativeScriptFactory71.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder65.mongoOplogFilter(basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder62.mongoCollectionFilter(basicDBObject76);
        builder56.mongoOplogFilter = basicDBObject76;
        builder56.mongoLocalUser = "gridfs";
        builder56.skipInitialImport = true;
        boolean boolean85 = builder56.getimportAllCollections();
        builder56.setriverName("concurrent_requests");
        com.mongodb.BasicDBObject basicDBObject88 = builder56.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder48.mongoCollectionFilter(basicDBObject88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(executableScript77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test6409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6409");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString6();
        java.lang.String str7 = serializedObjectSupporter2.deserializeObjectString5();
        java.lang.String str8 = serializedObjectSupporter2.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter2.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter2.deserializeObjectRiverSettings8();
        org.elasticsearch.script.ScriptService scriptService11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("mydatabase", "null.null", riverSettings10, scriptService11);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218299" + "'", str7, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218408" + "'", str8, "mongodb-1638820218408");
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertNotNull(riverSettings10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
    }

    @Test
    public void test6410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoAdminUser("socket_timeout");
        java.lang.String str6 = builder5.riverName;
        java.lang.String str7 = builder5.getstatisticsIndexName();
        boolean boolean8 = builder5.getmongoGridFS();
        builder5.connectTimeout = 1000;
        builder5.throttleSize = 32;
        boolean boolean13 = builder5.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.mongoAdminUser = "mongodb-1638820217755";
        builder3.setmongoDb("credentials");
        builder3.mongoLocalPassword = "socket_timeout";
        java.lang.String str14 = builder3.getmongoCollection();
        boolean boolean15 = builder3.getmongoSSLVerifyCertificate();
        java.lang.String str16 = builder3.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test6412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30000 + "'", int9 == 30000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test6413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        int int12 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str13 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_bulk_requests" + "'", str13, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.dropCollection;
        int int10 = mongoDBRiverDefinition1.getConnectTimeout();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test6415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition1.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str13 = mongoDBRiverDefinition1.mongoCollection;
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str15 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl" + "'", str10, "ssl");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
    }

    @Test
    public void test6416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6416");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("hi!", "include_fields", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test6417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        int int6 = builder0.getsocketTimeout();
        builder0.setstoreStatistics(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test6418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        builder19.scriptType = "user";
        builder19.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder19.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.mongoOplogFilter(basicDBObject30);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.getmongoClientOptions();
        java.lang.Boolean boolean35 = builder33.isMongos;
        int int36 = builder33.getsocketTimeout();
        java.lang.String str37 = builder33.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder33.includeCollection("skip_initial_import");
        boolean boolean40 = builder39.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.riverIndexName("_river");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + true + "'", boolean35, true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test6419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        int int8 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        boolean boolean10 = mongoDBRiverDefinition1.importAllCollections;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str12 = mongoDBRiverDefinition1.getDB_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "db" + "'", str12, "db");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
        org.junit.Assert.assertNull(basicDBObject15);
    }

    @Test
    public void test6420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6420");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString7();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString4();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("admin", "password", riverSettings6, scriptService7);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218449" + "'", str5, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
    }

    @Test
    public void test6421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test6422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test6423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean7 = builder6.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.script("bulk");
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder9.setmongoOplogFilter(basicDBObject10);
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder9.setmongoOplogFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        builder17.skipInitialImport = false;
        builder17.setscriptType("script");
        java.lang.String[] strArray39 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet40);
        builder9.setexcludeFields((java.util.Set<java.lang.String>) strSet40);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet40);
        builder0.setthrottleSize((int) (byte) 1);
        builder0.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder0.connectTimeout(1000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "store_statistics" + "'", str3, "store_statistics");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test6424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.script("bulk");
        builder38.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean45 = builder44.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.script("bulk");
        builder47.skipInitialImport = false;
        builder47.setscriptType("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder47.excludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.includeFields((java.util.Set<java.lang.String>) strSet70);
        java.lang.String str75 = builder3.script;
        boolean boolean76 = builder3.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder3.typeName("size");
        com.mongodb.BasicDBObject basicDBObject79 = builder3.getmongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "bulk" + "'", str75, "bulk");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(basicDBObject79);
    }

    @Test
    public void test6425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        boolean boolean12 = builder11.mongoSSLVerifyCertificate;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoClientOptions(mongoClientOptions13);
        java.util.Set<java.lang.String> strSet15 = builder14.parentTypes;
        builder14.scriptType = "";
        int int18 = builder14.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoAdminPassword("drop_collection");
        builder14.dropCollection = true;
        java.lang.String str23 = builder14.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test6426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str10 = mongoDBRiverDefinition1.riverName;
        java.lang.String str11 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str14 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "port" + "'", str11, "port");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
    }

    @Test
    public void test6427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        int int9 = builder3.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.mongoLocalPassword("include_fields");
        java.lang.String str12 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder11.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.statisticsTypeName("skip_initial_import");
        builder11.storeStatistics = false;
        builder11.setscriptType("index");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test6428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        builder5.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoSecondaryReadPreference(true);
        boolean boolean16 = builder15.storeStatistics;
        java.lang.String str17 = builder15.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.mongoLocalPassword("size");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test6429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test6430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.skipInitialImport(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder3.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.skipInitialImport(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test6431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        boolean boolean7 = builder5.getmongoSSLVerifyCertificate();
        java.lang.String str8 = builder5.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject9 = builder5.getmongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject9);
    }

    @Test
    public void test6432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_timeout" + "'", str9, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
    }

    @Test
    public void test6433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("size");
        builder5.setincludeCollection("initial_timestamp");
        java.lang.String str12 = builder5.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.socketTimeout((int) (short) 0);
        boolean boolean15 = builder14.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray4 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList5 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList5, serverAddressArray4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder11.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder11.setmongoOplogFilter(basicDBObject14);
        builder11.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.throttleSize((int) (short) 0);
        builder11.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.throttleSize(1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoServers(serverAddressList24);
        boolean boolean26 = builder25.getimportAllCollections();
        builder25.riverName = "";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serverAddressArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test6435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean15 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str16 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition1.initialTimestamp;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 60000 + "'", int14 == 60000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_timeout" + "'", str16, "bulk_timeout");
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test6436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        int int7 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder3.skipInitialImport = false;
        builder3.setscriptType("script");
        java.lang.String[] strArray25 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder3.excludeFields((java.util.Set<java.lang.String>) strSet26);
        java.lang.String str29 = builder28.getriverIndexName();
        java.lang.String str30 = builder28.getmongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter31 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str32 = serializedObjectSupporter31.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter31.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter31.deserializeObjectRiverSettings8();
        builder28.serializedObjectSupporter = serializedObjectSupporter31;
        java.lang.String str36 = serializedObjectSupporter31.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = serializedObjectSupporter31.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings33);
        org.junit.Assert.assertNotNull(riverSettings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb-1638820218264" + "'", str36, "mongodb-1638820218264");
    }

    @Test
    public void test6438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoLocalPassword("index");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString7();
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter11.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings2();
        builder5.serializedObjectSupporter = serializedObjectSupporter11;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter11.deserializeObjectRiverSettings2();
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = riverSettings17.settings();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218326" + "'", str12, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218449" + "'", str13, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test6439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6439");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218408" + "'", str3, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820217755" + "'", str4, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test6440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getExcludeFields();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "store_statistics" + "'", str11, "store_statistics");
    }

    @Test
    public void test6441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.disableIndexRefresh(false);
        java.lang.String str18 = builder17.getstatisticsTypeName();
        builder17.setmongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder26.setmongoOplogFilter(basicDBObject27);
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder26.setmongoOplogFilter(basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean32 = builder31.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("bulk");
        builder34.skipInitialImport = false;
        builder34.setscriptType("script");
        java.lang.String[] strArray56 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder34.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder26.setexcludeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder26.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory63 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean65 = builder64.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.script("bulk");
        com.mongodb.BasicDBObject basicDBObject68 = builder67.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript69 = docScoreNativeScriptFactory63.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        builder26.mongoCollectionFilter = basicDBObject68;
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings22, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        builder17.mongoOplogFilter = basicDBObject68;
        builder11.setmongoOplogFilter(basicDBObject68);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp75 = builder11.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder11.riverIndexName("actions");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(executableScript69);
        org.junit.Assert.assertNull(wildcardTimestamp75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test6442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        builder3.setthrottleSize(0);
        com.mongodb.BasicDBObject basicDBObject13 = builder3.getmongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test6443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6443");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = builder51.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition52.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition52.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition52.getParentTypes();
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean58 = builder57.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.script("bulk");
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder60.setmongoOplogFilter(basicDBObject61);
        com.mongodb.BasicDBObject basicDBObject63 = null;
        builder60.setmongoOplogFilter(basicDBObject63);
        builder60.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder60.throttleSize((int) (short) 0);
        boolean boolean69 = builder68.getmongoUseSSL();
        java.lang.String str70 = builder68.includeCollection;
        java.lang.String str71 = builder68.mongoAdminUser;
        java.lang.Object obj72 = docScoreSearchScript0.unwrap((java.lang.Object) builder68);
        builder68.indexName = "mycollection";
        java.util.List<com.mongodb.ServerAddress> serverAddressList75 = builder68.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(serverAddressList75);
    }

    @Test
    public void test6444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str9 = mongoDBRiverDefinition1.mongoLocalPassword;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test6445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setscript("throttle_size");
        builder3.settypeName("concurrent_bulk_requests");
        boolean boolean42 = builder3.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test6446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test6447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setmongoAdminUser("bulk");
        builder5.isMongos = true;
        boolean boolean10 = builder5.importAllCollections;
        builder5.setindexName("socket_timeout");
        builder5.setscriptType("connect_timeout");
        boolean boolean15 = builder5.storeStatistics;
        java.lang.String str16 = builder5.riverIndexName;
        builder5.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test6448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder3.build();
        java.lang.String str5 = mongoDBRiverDefinition4.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition4.parentTypes;
        java.lang.String str7 = mongoDBRiverDefinition4.riverName;
        java.lang.String str8 = mongoDBRiverDefinition4.getScriptType();
        int int9 = mongoDBRiverDefinition4.connectTimeout;
        boolean boolean10 = mongoDBRiverDefinition4.getmongoGridFS();
        int int11 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition4.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject12);
        java.lang.String str14 = builder0.getindexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index" + "'", str5, "index");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.socketTimeout(100);
        boolean boolean10 = builder5.dropCollection;
        java.lang.String str11 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("secondary_read_preference");
        builder13.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder13.build();
        java.lang.String str17 = mongoDBRiverDefinition16.statisticsIndexName;
        java.lang.Boolean boolean18 = mongoDBRiverDefinition16.getisMongos();
        java.lang.String str19 = mongoDBRiverDefinition16.getMongoLocalPassword();
        java.lang.String str20 = mongoDBRiverDefinition16.mongoDb;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test6450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.connectTimeout = 27017;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.throttleSize(1);
        builder15.includeCollection = "credentials";
        builder15.setstoreStatistics(false);
        java.lang.String str20 = builder15.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        java.lang.String str25 = builder23.getscript();
        boolean boolean26 = builder23.dropCollection;
        builder23.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory29 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        com.mongodb.BasicDBObject basicDBObject34 = builder33.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory29.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder23.mongoOplogFilter(basicDBObject34);
        builder23.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder23.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder23.mongoDb("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoCollection("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet46 = builder45.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.mongoLocalUser("credentials");
        builder45.setthrottleSize(8);
        boolean boolean51 = builder45.getmongoGridFS();
        builder45.mongoUseSSL = false;
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder45.getmongoServers();
        builder44.setmongoServers(serverAddressList54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder15.mongoServers(serverAddressList54);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test6451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        java.lang.String str14 = builder11.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder18.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder18.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder18.mongoGridFS;
        java.lang.String[] strArray66 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder18.includeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder18.throttleSize((int) (byte) 0);
        java.lang.String str72 = builder18.scriptType;
        java.lang.String str73 = builder18.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = builder74.build();
        java.lang.String str76 = mongoDBRiverDefinition75.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet77 = mongoDBRiverDefinition75.parentTypes;
        org.elasticsearch.common.logging.ESLogger eSLogger78 = mongoDBRiverDefinition75.getlogger();
        java.lang.String str79 = mongoDBRiverDefinition75.getSOCKET_TIMEOUT();
        java.lang.String str80 = mongoDBRiverDefinition75.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList81 = mongoDBRiverDefinition75.getMongoServers();
        builder18.mongoServers = serverAddressList81;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder11.mongoServers(serverAddressList81);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "index" + "'", str76, "index");
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertNotNull(eSLogger78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "socket_timeout" + "'", str79, "socket_timeout");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(serverAddressList81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test6452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        java.lang.String str10 = builder3.riverIndexName;
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.scriptType("type");
        boolean boolean14 = builder3.dropCollection;
        builder3.setincludeCollection("ssl");
        java.lang.String str17 = builder3.statisticsTypeName;
        boolean boolean18 = builder3.mongoSSLVerifyCertificate;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6453");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        com.mongodb.MongoClientOptions mongoClientOptions4 = mongoDBRiverDefinition1.getMongoClientOptions();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_fields" + "'", str8, "include_fields");
    }

    @Test
    public void test6454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6454");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test6455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        int int9 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean10 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition1.mongoServers;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_timeout" + "'", str11, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertNotNull(serverAddressList13);
    }

    @Test
    public void test6456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        java.lang.String str10 = builder8.getscript();
        boolean boolean11 = builder8.dropCollection;
        builder8.indexName = "";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder5.mongoCollectionFilter(basicDBObject19);
        builder22.setmongoCollection("type");
        builder22.mongoSSLVerifyCertificate = true;
        java.util.Set<java.lang.String> strSet27 = builder22.getincludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet27);
    }

    @Test
    public void test6457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        boolean boolean3 = builder0.dropCollection;
        builder0.indexName = "";
        java.util.Set<java.lang.String> strSet6 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.throttleSize(10);
        boolean boolean11 = builder10.disableIndexRefresh;
        builder10.setmongoCollection("size");
        boolean boolean14 = builder10.getmongoSSLVerifyCertificate();
        builder10.mongoAdminPassword = "null.null";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test6458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean7 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoCollection();
        int int9 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean10 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test6459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.script("bulk");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder18.setmongoOplogFilter(basicDBObject19);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder18.setmongoOplogFilter(basicDBObject21);
        builder18.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.disableIndexRefresh(false);
        java.lang.String str35 = builder34.getstatisticsTypeName();
        builder34.scriptType = "user";
        builder34.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder34.setmongoCollectionFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder18.mongoOplogFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder13.mongoCollectionFilter(basicDBObject45);
        builder13.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder13.socketTimeout((int) 'a');
        java.lang.String str54 = builder53.statisticsTypeName;
        builder53.settypeName("disable_index_refresh");
        boolean boolean57 = builder53.skipInitialImport;
        boolean boolean58 = builder53.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test6460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test6461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str7 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder10.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition11.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition11.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean14 = mongoDBRiverDefinition11.dropCollection;
        boolean boolean15 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str17 = mongoDBRiverDefinition11.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition11.getIndexName();
        boolean boolean19 = mongoDBRiverDefinition11.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition11.getInitialTimestamp();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        mongoDBRiverDefinition11.serializedObjectSupporter = serializedObjectSupporter21;
        java.lang.String str23 = serializedObjectSupporter21.deserializeObjectString5();
        java.lang.String str24 = serializedObjectSupporter21.deserializeObjectString17();
        java.lang.String str25 = serializedObjectSupporter21.deserializeObjectString13();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter21;
        java.lang.Boolean boolean27 = mongoDBRiverDefinition1.getisMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "throttle_size" + "'", str7, "throttle_size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardTimestamp20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb-1638820218299" + "'", str23, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb-1638820218449" + "'", str24, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218408" + "'", str25, "mongodb-1638820218408");
        org.junit.Assert.assertNull(boolean27);
    }

    @Test
    public void test6462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6462");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.riverIndexName("bulk_timeout");
        builder3.riverName = "bulk";
        java.util.Set<java.lang.String> strSet44 = builder3.getparentTypes();
        builder3.mongoSSLVerifyCertificate = false;
        java.lang.String str47 = builder3.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder3.mongoDb("flush_interval");
        builder3.script = "socket_timeout";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test6463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        builder11.setimportAllCollections(true);
        java.util.Set<java.lang.String> strSet18 = builder11.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.mongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = builder20.build();
        java.lang.String str22 = mongoDBRiverDefinition21.getCOLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "collection" + "'", str22, "collection");
    }

    @Test
    public void test6464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str12 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.Boolean boolean13 = mongoDBRiverDefinition1.getisMongos();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test6465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition1.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition1.getRiverName();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str15 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition1.mongoServers;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 60000 + "'", int14 == 60000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertNotNull(serverAddressList16);
    }

    @Test
    public void test6466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoOplogFilter();
        boolean boolean5 = builder0.getmongoUseSSL();
        builder0.mongoDb = "secondary_read_preference";
        java.lang.String str8 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder12.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder12.setmongoOplogFilter(basicDBObject15);
        boolean boolean17 = builder12.mongoGridFS;
        builder12.indexName = "options";
        boolean boolean20 = builder12.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        java.lang.String str29 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean31 = builder30.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("socket_timeout");
        java.lang.String str36 = builder35.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.connectTimeout((int) (short) 1);
        com.mongodb.BasicDBObject basicDBObject39 = builder35.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder24.mongoCollectionFilter(basicDBObject39);
        builder40.riverName = "mongodb-1638820218264";
        builder40.mongoGridFS = true;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter47 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str48 = serializedObjectSupporter47.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings49 = serializedObjectSupporter47.deserializeObjectRiverSettings4();
        java.lang.String str50 = serializedObjectSupporter47.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings51 = serializedObjectSupporter47.deserializeObjectRiverSettings2();
        org.elasticsearch.script.ScriptService scriptService52 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "concurrent_requests", riverSettings51, scriptService52);
        java.lang.String str54 = mongoDBRiverDefinition53.getMongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions55 = mongoDBRiverDefinition53.mongoClientOptions;
        builder40.mongoClientOptions = mongoClientOptions55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder12.mongoClientOptions(mongoClientOptions55);
        builder0.setmongoClientOptions(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "mongodb-1638820218326" + "'", str48, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb-1638820218326" + "'", str50, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings51);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mycollection" + "'", str54, "mycollection");
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test6467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoSSLVerifyCertificate(false);
        int int5 = builder4.connectTimeout;
        java.util.Set<java.lang.String> strSet6 = builder4.getexcludeFields();
        java.lang.String str7 = builder4.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.dropCollection(true);
        java.util.Set<java.lang.String> strSet10 = null;
        builder9.setparentTypes(strSet10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test6468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.typeName("");
        builder8.mongoSecondaryReadPreference = false;
        builder8.mongoCollection = "_river";
        builder8.setscript("import_all_collections");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test6469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str10 = mongoDBRiverDefinition1.getStatisticsIndexName();
        boolean boolean11 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str12 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str14 = mongoDBRiverDefinition1.mongoAdminUser;
        boolean boolean15 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteSizeValue16);
    }

    @Test
    public void test6470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        builder2.socketTimeout = (byte) -1;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder2.mongoOplogFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder2.build();
        java.lang.String str10 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl" + "'", str10, "ssl");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disable_index_refresh" + "'", str11, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
    }

    @Test
    public void test6471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        java.lang.String str20 = builder19.getstatisticsTypeName();
        builder19.scriptType = "user";
        builder19.includeCollection = "include_fields";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("bulk");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder19.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder3.mongoOplogFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.statisticsIndexName("local");
        builder33.includeCollection = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder33.script("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoSSLVerifyCertificate(false);
        builder45.socketTimeout = (byte) 10;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test6472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("credentials");
        builder0.setmongoDb("mongodb-1638820218326");
        builder0.mongoLocalPassword = "user";
        java.lang.String str14 = builder0.typeName;
        boolean boolean15 = builder0.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoAdminUser("stats");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test6473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.mongoOplogFilter;
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean15 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondary_read_preference" + "'", str13, "secondary_read_preference");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_timeout" + "'", str10, "bulk_timeout");
    }

    @Test
    public void test6475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str4 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test6476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        builder3.mongoLocalPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.importAllCollections(true);
        builder3.mongoUseSSL = false;
        java.util.Set<java.lang.String> strSet18 = builder3.getexcludeFields();
        builder3.setsocketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder3.includeCollection("concurrent_bulk_requests");
        boolean boolean23 = builder3.getmongoSSLVerifyCertificate();
        builder3.mongoDb = "script.disable_dynamic";
        boolean boolean26 = builder3.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test6477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        java.lang.String str2 = builder0.getscript();
        builder0.mongoUseSSL = true;
        boolean boolean5 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str6 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test6478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "options" + "'", str11, "options");
    }

    @Test
    public void test6479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.statisticsTypeName;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder5.getmongoClientOptions();
        builder5.importAllCollections = false;
        java.lang.String str10 = builder5.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.script("bulk");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = null;
        builder11.serializedObjectSupporter = serializedObjectSupporter15;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.mongoAdminPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean22 = builder21.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder24.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        builder24.statisticsIndexName = "socket_timeout";
        java.lang.String str31 = builder24.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.skipInitialImport(false);
        java.lang.String str34 = builder24.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("bulk");
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder38.setmongoOplogFilter(basicDBObject39);
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder38.setmongoOplogFilter(basicDBObject41);
        boolean boolean43 = builder38.mongoGridFS;
        java.lang.String[] strArray86 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder38.includeFields((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder24.excludeFields((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet87);
        builder5.excludeFields = strSet87;
        java.lang.String str93 = builder5.mongoCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test6480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        builder5.scriptType = "user";
        builder5.includeCollection = "include_fields";
        boolean boolean11 = builder5.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        java.lang.String str16 = builder14.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.script("bulk");
        builder28.skipInitialImport = false;
        builder28.setscriptType("script");
        java.lang.String[] strArray50 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder28.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder20.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder20.riverIndexName("bulk_timeout");
        java.util.Set<java.lang.String> strSet59 = builder20.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder14.parentTypes(strSet59);
        builder5.includeFields = strSet59;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test6481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.Boolean boolean11 = mongoDBRiverDefinition1.getisMongos();
        int int12 = mongoDBRiverDefinition1.socketTimeout;
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue3 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str13 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        boolean boolean14 = mongoDBRiverDefinition1.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition1.mongoClientOptions;
        int int16 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition1.getMongoAdminUser();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertNotNull(timeValue3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_timeout" + "'", str11, "bulk_timeout");
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk_size" + "'", str13, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test6483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.connectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("credentials");
        java.lang.String str10 = builder0.getmongoAdminPassword();
        boolean boolean11 = builder0.getdropCollection();
        boolean boolean12 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.advancedTransformation(true);
        builder0.mongoAdminPassword = "sandbox";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test6484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6484");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition12.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean15 = mongoDBRiverDefinition12.dropCollection;
        boolean boolean16 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) boolean16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.dropCollection;
        boolean boolean23 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        java.lang.String str24 = mongoDBRiverDefinition19.getStatisticsTypeName();
        java.lang.String str25 = mongoDBRiverDefinition19.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition19.getIndexName();
        boolean boolean27 = mongoDBRiverDefinition19.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = mongoDBRiverDefinition19.getInitialTimestamp();
        boolean boolean29 = mongoDBRiverDefinition19.getstoreStatistics();
        java.lang.Object obj30 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition19);
        java.lang.String str31 = mongoDBRiverDefinition19.scriptType;
        java.util.Set<java.lang.String> strSet32 = mongoDBRiverDefinition19.getExcludeFields();
        boolean boolean33 = mongoDBRiverDefinition19.getstoreStatistics();
        boolean boolean34 = mongoDBRiverDefinition19.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardTimestamp28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test6485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.script("bulk");
        builder11.skipInitialImport = false;
        builder11.setscriptType("script");
        java.lang.String[] strArray33 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet34);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.throttleSize(100);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        builder3.mongoCollectionFilter = basicDBObject45;
        builder3.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder3.socketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = builder51.getinitialTimestamp();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(wildcardTimestamp52);
    }

    @Test
    public void test6486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getDB_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "db" + "'", str9, "db");
    }

    @Test
    public void test6487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoOplogFilter();
        builder0.setthrottleSize((int) (short) 1);
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.socketTimeout((int) (short) 1);
        builder10.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test6488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet7 = builder5.excludeFields;
        java.lang.String str8 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.disableIndexRefresh(false);
        builder14.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder20.setmongoOplogFilter(basicDBObject23);
        boolean boolean25 = builder20.mongoGridFS;
        java.lang.String[] strArray68 = new java.lang.String[] { "credentials", "script.default_lang", "admin", "servers", "bulk", "script_type", "filter", "drop_collection", "local", "options", "store_statistics", "import_all_collections", "", "user", "secondary_read_preference", "actions", "concurrent_requests", "exclude_fields", "script_type", "exclude_fields", "socket_timeout", "admin", "filter", "user", "throttle_size", "bulk_timeout", "name", "local", "local", "skip_initial_import", "filter", ".scripts", "store_statistics", "concurrent_requests", "gridfs", "collection", "password", "script_type", "socket_timeout", "ssl_verify_certificate", "store_statistics", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder20.includeFields((java.util.Set<java.lang.String>) strSet69);
        builder14.setincludeFields((java.util.Set<java.lang.String>) strSet69);
        builder5.setexcludeFields((java.util.Set<java.lang.String>) strSet69);
        builder5.setmongoDb("script.disable_dynamic");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean77 = builder76.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder76.disableIndexRefresh(false);
        java.lang.String str82 = builder81.getstatisticsTypeName();
        java.lang.String str83 = builder81.riverName;
        builder81.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder81.connectTimeout(27017);
        java.lang.String str88 = builder87.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder87.mongoAdminUser("localhost");
        builder87.setmongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder87.mongoAdminUser("mongodb-1638820218299");
        java.util.List<com.mongodb.ServerAddress> serverAddressList95 = builder87.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder5.mongoServers(serverAddressList95);
        builder5.setriverIndexName("credentials");
        java.util.List<com.mongodb.ServerAddress> serverAddressList99 = builder5.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(serverAddressList95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(serverAddressList99);
    }

    @Test
    public void test6489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("store_statistics");
        java.lang.String str3 = builder2.mongoCollection;
        java.lang.String str4 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.riverIndexName("drop_collection");
        builder8.setsocketTimeout(0);
        builder8.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder8.build();
        java.lang.String str16 = mongoDBRiverDefinition15.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
    }

    @Test
    public void test6490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean4 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean5 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl" + "'", str10, "ssl");
    }

    @Test
    public void test6491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList2 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.getimportAllCollections();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str7 = serializedObjectSupporter6.deserializeObjectString7();
        java.lang.String str8 = serializedObjectSupporter6.deserializeObjectString12();
        java.lang.String str9 = serializedObjectSupporter6.deserializeObjectString7();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter6;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertNotNull(serverAddressList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_timeout" + "'", str3, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218326" + "'", str7, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218326" + "'", str9, "mongodb-1638820218326");
    }

    @Test
    public void test6492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6492");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218424" + "'", str2, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
    }

    @Test
    public void test6493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        builder3.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.throttleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoSSLVerifyCertificate(false);
        builder11.setimportAllCollections(true);
        java.util.Set<java.lang.String> strSet18 = builder11.getincludeFields();
        boolean boolean19 = builder11.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.importAllCollections(true);
        builder11.storeStatistics = false;
        boolean boolean24 = builder11.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test6494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6494");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = builder0.build();
        java.lang.String str2 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        boolean boolean5 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean7 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str8 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index" + "'", str2, "index");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "db" + "'", str8, "db");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test6495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6495");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        builder5.setthrottleSize((int) ' ');
        boolean boolean8 = builder5.getadvancedTransformation();
        java.lang.String str9 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str12 = builder5.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.includeFields(strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.disableIndexRefresh(false);
        java.lang.String str23 = builder22.getstatisticsTypeName();
        java.lang.String str24 = builder22.riverName;
        int int25 = builder22.connectTimeout;
        java.lang.String[] strArray72 = new java.lang.String[] { "type", "index", "", "db", "null.null", "_river", "mongodb-1638820217755", "mongodb-1638820218449", "local", "script.default_lang", "bulk_size", "host", "size", ".scripts", "secondary_read_preference", "script", "script_type", "mongodb-1638820218424", "script", "bulk_timeout", "collection", "mongodb-1638820218424", "initial_timestamp", "skip_initial_import", "", "port", "initial_timestamp", "mongodb-1638820217755", ".scripts", "index", "password", ".scripts", "flush_interval", "is_mongos", "ssl_verify_certificate", "servers", "localhost", "script.disable_dynamic", "ssl_verify_certificate", "bulk", "connect_timeout", "mongodb-1638820218449", "", "skip_initial_import", "mongodb-1638820218449", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet73);
        builder5.setexcludeFields((java.util.Set<java.lang.String>) strSet73);
        java.util.Set<java.lang.String> strSet77 = builder5.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder5.statisticsTypeName("null.null");
        builder5.throttleSize = (byte) -1;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test6496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder3.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.mongoGridFS;
        builder3.setindexName("initial_timestamp");
        boolean boolean11 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean13 = builder12.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.disableIndexRefresh(false);
        java.lang.String str18 = builder17.getstatisticsTypeName();
        java.lang.String str19 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.socketTimeout(100);
        boolean boolean22 = builder17.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.disableIndexRefresh(false);
        java.lang.String str29 = builder28.getstatisticsTypeName();
        java.lang.String str30 = builder28.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.mongoAdminPassword("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("bulk");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder36.setmongoOplogFilter(basicDBObject37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean42 = builder41.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("bulk");
        builder44.skipInitialImport = false;
        builder44.setscriptType("script");
        java.lang.String[] strArray66 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder36.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        builder28.includeFields = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder3.includeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory74 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean76 = builder75.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder75.script("bulk");
        com.mongodb.BasicDBObject basicDBObject79 = builder78.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript80 = docScoreNativeScriptFactory74.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        builder3.setmongoCollectionFilter(basicDBObject79);
        java.lang.String str82 = builder3.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder3.scriptType("mongodb-1638820218363");
        builder84.setmongoLocalPassword("local");
        java.lang.String str87 = builder84.mongoAdminUser;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(executableScript80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "initial_timestamp" + "'", str82, "initial_timestamp");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test6497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6497");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218326" + "'", str1, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test6498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6498");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean3 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.script("bulk");
        builder2.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.connectTimeout((int) (byte) 10);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) builder9);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.disableIndexRefresh(false);
        builder19.setthrottleSize((int) ' ');
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = null;
        builder19.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str26 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.isMongos((java.lang.Boolean) true);
        builder19.setindexName("script.default_lang");
        java.lang.String str31 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder19.getinitialTimestamp();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) builder19);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean37 = builder36.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.script("bulk");
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder39.setmongoOplogFilter(basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder39.setmongoOplogFilter(basicDBObject42);
        boolean boolean44 = builder39.mongoGridFS;
        int int45 = builder39.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.mongoLocalPassword("include_fields");
        java.lang.String str48 = builder47.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder47.getinitialTimestamp();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean52 = builder51.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.script("bulk");
        builder54.skipInitialImport = false;
        builder54.setscriptType("script");
        java.lang.String[] strArray76 = new java.lang.String[] { "exclude_fields", "servers", "secondary_read_preference", "name", "exclude_fields", "bulk_timeout", "skip_initial_import", "bulk", "script", "disable_index_refresh", "script.default_lang", "skip_initial_import", "gridfs", "user", "port", "parent_types", "size" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder54.excludeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder47.parentTypes((java.util.Set<java.lang.String>) strSet77);
        java.lang.String str81 = builder80.mongoAdminPassword;
        builder80.storeStatistics = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test6499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.disableIndexRefresh(false);
        java.lang.String str6 = builder5.getstatisticsTypeName();
        java.lang.String str7 = builder5.riverName;
        builder5.statisticsTypeName = "name";
        boolean boolean10 = builder5.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.statisticsTypeName("mongodb-1638820218387");
        java.lang.String str13 = builder5.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test6500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6500");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("actions", "socket_timeout");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?socket_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }
}

