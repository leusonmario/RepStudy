import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        java.lang.String str16 = mongoDBRiverDefinition13.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition13.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int18 = mongoDBRiverDefinition13.getThrottleSize();
        java.lang.String str19 = mongoDBRiverDefinition13.getLOCAL_DB_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition13.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_bulk_requests" + "'", str16, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "local" + "'", str19, "local");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "store_statistics" + "'", str20, "store_statistics");
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        boolean boolean21 = builder20.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str25 = mongoDBRiverDefinition24.mongoDb;
        java.lang.String str26 = mongoDBRiverDefinition24.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int27 = mongoDBRiverDefinition24.throttleSize;
        boolean boolean28 = mongoDBRiverDefinition24.getskipInitialImport();
        java.lang.String str29 = mongoDBRiverDefinition24.getScriptType();
        java.lang.String str30 = mongoDBRiverDefinition24.getSIZE_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition24.statisticsIndexName;
        java.lang.String str32 = mongoDBRiverDefinition24.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition24.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder20.mongoCollectionFilter = basicDBObject33;
        builder20.mongoCollection = "advanced_transformation";
        boolean boolean38 = builder20.getmongoGridFS();
        builder20.setriverName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder20.socketTimeout(8);
        boolean boolean43 = builder20.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder20.script("archive-stats");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "concurrent_bulk_requests" + "'", str26, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "size" + "'", str30, "size");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        boolean boolean11 = builder10.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setdropCollection(true);
        builder10.setdropCollection(false);
        boolean boolean17 = builder10.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet20 = builder10.getincludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setdisableIndexRefresh(false);
        builder0.setmongoAdminPassword("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.mongoSecondaryReadPreference(true);
        builder7.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.mongoDb("concurrent_bulk_requests");
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        builder19.socketTimeout = (short) 0;
        boolean boolean26 = builder19.storeStatistics;
        builder19.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray30 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet31);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = builder17.build();
        java.util.Set<java.lang.String> strSet36 = mongoDBRiverDefinition35.getParentTypes();
        builder0.includeFields = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoDb("import_all_collections");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.dropCollection(false);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        java.util.Set<java.lang.String> strSet23 = builder0.excludeFields;
        builder0.dropCollection = false;
        builder0.setisMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder28.mongoSecondaryReadPreference(true);
        builder28.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder28.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp39 = builder38.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        builder38.setmongoClientOptions(mongoClientOptions40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.connectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter46 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings47 = serializedObjectSupporter46.deserializeObjectRiverSettings3();
        java.lang.String str48 = serializedObjectSupporter46.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings49 = serializedObjectSupporter46.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings49, scriptService50);
        int int52 = mongoDBRiverDefinition51.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.common.unit.TimeValue timeValue53 = mongoDBRiverDefinition51.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str54 = mongoDBRiverDefinition51.getIS_MONGOS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions55 = mongoDBRiverDefinition51.getMongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder43.mongoClientOptions(mongoClientOptions55);
        builder0.mongoClientOptions = mongoClientOptions55;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(wildcardTimestamp39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(riverSettings47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "_river" + "'", str48, "_river");
        org.junit.Assert.assertNotNull(riverSettings49);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1000 + "'", int52 == 1000);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "is_mongos" + "'", str54, "is_mongos");
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.typeName("collection");
        builder19.settypeName("secondary_read_preference");
        boolean boolean22 = builder19.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        boolean boolean24 = mongoDBRiverDefinition23.skipInitialImport;
        boolean boolean25 = mongoDBRiverDefinition23.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoSSLVerifyCertificate = false;
        builder12.setmongoSecondaryReadPreference(true);
        builder12.setskipInitialImport(false);
        boolean boolean19 = builder12.getadvancedTransformation();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        builder0.storeStatistics = false;
        java.lang.String str8 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.script("hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str5 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "store_statistics" + "'", str5, "store_statistics");
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        java.lang.Boolean boolean13 = builder0.isMongos;
        builder0.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        java.lang.String str17 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoAdminUser("localhost");
        builder19.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.Set<java.lang.String> strSet24 = builder22.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.mongoAdminPassword = "";
        builder25.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.importAllCollections(true);
        java.lang.String str34 = builder33.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        builder37.mongoAdminPassword = "";
        builder37.socketTimeout = (short) 0;
        boolean boolean44 = builder37.storeStatistics;
        builder37.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray48 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet49);
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        java.lang.String str56 = mongoDBRiverDefinition55.mongoDb;
        int int57 = mongoDBRiverDefinition55.throttleSize;
        int int58 = mongoDBRiverDefinition55.getDEFAULT_BULK_ACTIONS();
        java.lang.String str59 = mongoDBRiverDefinition55.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition55.mongoCollectionFilter;
        builder53.setmongoOplogFilter(basicDBObject60);
        builder19.setmongoOplogFilter(basicDBObject60);
        java.lang.String str63 = builder19.getscript();
        builder19.riverIndexName = "host";
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder19.getmongoClientOptions();
        java.lang.String str67 = builder19.getscript();
        java.lang.String str68 = builder19.getmongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder19.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1000 + "'", int58 == 1000);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(mongoClientOptions66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(mongoClientOptions69);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getScript();
        java.lang.String str9 = mongoDBRiverDefinition7.getBULK_TIMEOUT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition7.getIS_MONGOS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition7.isStoreStatistics();
        boolean boolean12 = mongoDBRiverDefinition7.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_timeout" + "'", str9, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "is_mongos" + "'", str10, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        java.lang.String str15 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.mongoDb;
        java.lang.String str19 = mongoDBRiverDefinition17.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int20 = mongoDBRiverDefinition17.throttleSize;
        boolean boolean21 = mongoDBRiverDefinition17.getskipInitialImport();
        java.lang.String str22 = mongoDBRiverDefinition17.getScriptType();
        java.lang.String str23 = mongoDBRiverDefinition17.getSIZE_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition17.statisticsIndexName;
        java.lang.String str25 = mongoDBRiverDefinition17.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition17.getMongoCollectionFilter();
        builder14.setmongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter28 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter28.deserializeObjectRiverSettings4();
        java.lang.String str30 = serializedObjectSupporter28.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings31 = serializedObjectSupporter28.deserializeObjectRiverSettings3();
        java.lang.String str32 = serializedObjectSupporter28.deserializeObjectString7();
        builder14.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str34 = serializedObjectSupporter28.deserializeObjectString4();
        java.lang.String str35 = serializedObjectSupporter28.deserializeObjectString4();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_bulk_requests" + "'", str19, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "size" + "'", str23, "size");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(riverSettings29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_river" + "'", str30, "_river");
        org.junit.Assert.assertNotNull(riverSettings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_river" + "'", str34, "_river");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_river" + "'", str35, "_river");
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.skipInitialImport(false);
        builder8.setmongoAdminUser("script");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter16 = builder8.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        builder8.mongoUseSSL = false;
        java.lang.String str12 = builder8.gettypeName();
        builder8.setskipInitialImport(false);
        java.lang.String str15 = builder8.getscriptType();
        builder8.setmongoAdminUser("collection");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        builder16.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        builder21.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoSecondaryReadPreference(true);
        builder21.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder21.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.includeCollection("mongodb-1638820218299");
        int int34 = builder31.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.mongoAdminPassword = "";
        builder35.socketTimeout = (short) 0;
        boolean boolean42 = builder35.storeStatistics;
        builder35.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray46 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder35.excludeFields((java.util.Set<java.lang.String>) strSet47);
        builder31.setincludeFields((java.util.Set<java.lang.String>) strSet47);
        builder16.includeFields = strSet47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder16.mongoLocalUser("disable_index_refresh");
        java.lang.String str54 = builder16.getmongoCollection();
        builder16.script = "hi!";
        builder16.typeName = "";
        builder16.storeStatistics = true;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.typeName("collection");
        builder19.settypeName("secondary_read_preference");
        boolean boolean22 = builder19.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        boolean boolean24 = mongoDBRiverDefinition23.skipInitialImport;
        java.lang.String str25 = mongoDBRiverDefinition23.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition23.getINCLUDE_FIELDS_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition23.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "import_all_collections" + "'", str25, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "include_fields" + "'", str26, "include_fields");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bulk_timeout" + "'", str27, "bulk_timeout");
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        boolean boolean13 = builder12.getmongoSecondaryReadPreference();
        builder12.setriverIndexName("mongodb-1638820218326");
        boolean boolean16 = builder12.skipInitialImport;
        builder12.mongoLocalUser = "exclude_fields";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        boolean boolean13 = builder12.getskipInitialImport();
        java.lang.String str14 = builder12.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder12.build();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        builder10.setmongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("mongodb-1638820218299");
        int int26 = builder23.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        builder27.socketTimeout = (short) 0;
        boolean boolean34 = builder27.storeStatistics;
        builder27.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray38 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet39);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("filter");
        boolean boolean47 = builder43.getskipInitialImport();
        builder43.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.socketTimeout = (short) 0;
        boolean boolean57 = builder50.storeStatistics;
        builder50.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray61 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder43.setparentTypes((java.util.Set<java.lang.String>) strSet62);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder10.setstatisticsTypeName("bulk_size");
        builder10.setmongoGridFS(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoUseSSL(true);
        builder17.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter22 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter22.deserializeObjectRiverSettings3();
        java.lang.String str24 = serializedObjectSupporter22.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings25 = serializedObjectSupporter22.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings25, scriptService26);
        int int28 = mongoDBRiverDefinition27.getDEFAULT_BULK_ACTIONS();
        java.lang.String str29 = mongoDBRiverDefinition27.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition27.mongoCollectionFilter;
        builder17.setmongoOplogFilter(basicDBObject30);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(riverSettings23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_river" + "'", str24, "_river");
        org.junit.Assert.assertNotNull(riverSettings25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1000 + "'", int28 == 1000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bulk_size" + "'", str29, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject30);
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        builder8.setconnectTimeout((int) (short) 100);
        builder8.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.typeName("gridfs");
        java.lang.String str16 = builder8.scriptType;
        java.lang.String str17 = builder8.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.Class<?> wildcardClass8 = riverSettings7.getClass();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218299" + "'", str5, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        boolean boolean13 = builder12.getskipInitialImport();
        int int14 = builder12.connectTimeout;
        builder12.setstatisticsIndexName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.mongoGridFS(true);
        java.lang.String str21 = builder12.getriverName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str7 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "type" + "'", str7, "type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "password" + "'", str8, "password");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        java.lang.String str17 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoAdminUser("localhost");
        builder19.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        com.mongodb.MongoClientOptions mongoClientOptions23 = mongoDBRiverDefinition22.getMongoClientOptions();
        java.lang.String str24 = mongoDBRiverDefinition22.getRiverIndexName();
        java.lang.String str25 = mongoDBRiverDefinition22.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "throttle_size" + "'", str25, "throttle_size");
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition13.getDEFAULT_FLUSH_INTERVAL();
        int int17 = mongoDBRiverDefinition13.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str18 = mongoDBRiverDefinition13.riverIndexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setskipInitialImport(true);
        int int15 = builder8.getthrottleSize();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("initial_timestamp", "name");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?name? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getNAME_FIELD();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition12.getMongoOplogFilter();
        java.lang.String str15 = mongoDBRiverDefinition12.getPARENT_TYPES_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition12.mongoLocalUser;
        java.lang.String str17 = mongoDBRiverDefinition12.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getScript();
        java.lang.String str9 = mongoDBRiverDefinition7.getBULK_TIMEOUT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition7.getRiverIndexName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_timeout" + "'", str9, "bulk_timeout");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        java.lang.String str12 = builder8.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean14 = mongoDBRiverDefinition13.disableIndexRefresh;
        java.lang.String str15 = mongoDBRiverDefinition13.getMongoDb();
        java.lang.String str16 = mongoDBRiverDefinition13.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script_type" + "'", str16, "script_type");
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean9 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str12 = mongoDBRiverDefinition1.scriptType;
        boolean boolean13 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str15 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean16 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "initial_timestamp" + "'", str10, "initial_timestamp");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_fields" + "'", str15, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        java.lang.String str17 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoAdminUser("localhost");
        builder19.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder19.build();
        com.mongodb.MongoClientOptions mongoClientOptions23 = mongoDBRiverDefinition22.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNull(mongoClientOptions23);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        boolean boolean20 = mongoDBRiverDefinition19.getimportAllCollections();
        boolean boolean21 = mongoDBRiverDefinition19.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        java.lang.String str11 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder0.build();
        java.lang.String str13 = mongoDBRiverDefinition12.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getSSL_CONNECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition12.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition12.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_bulk_requests" + "'", str13, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        java.lang.String str15 = builder0.scriptType;
        builder0.includeCollection = "concurrent_bulk_requests";
        boolean boolean18 = builder0.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218299" + "'", str15, "mongodb-1638820218299");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        boolean boolean9 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str11 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "null.null" + "'", str10, "null.null");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        boolean boolean13 = builder12.getskipInitialImport();
        builder12.mongoDb = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        builder16.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoSecondaryReadPreference(true);
        builder16.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.statisticsTypeName("socket_timeout");
        builder28.setmongoLocalUser("host");
        com.mongodb.BasicDBObject basicDBObject34 = builder28.mongoCollectionFilter;
        builder12.setmongoOplogFilter(basicDBObject34);
        builder12.setmongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject34);
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.mongoSecondaryReadPreference(true);
        builder7.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.mongoDb("concurrent_bulk_requests");
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        builder19.socketTimeout = (short) 0;
        boolean boolean26 = builder19.storeStatistics;
        builder19.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray30 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet31);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet31);
        java.lang.String str36 = builder35.riverName;
        int int37 = builder35.getconnectTimeout();
        builder35.riverName = "mongodb-1638820218326";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("", "throttle_size", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?throttle_size? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        boolean boolean7 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.script("filter");
        boolean boolean14 = builder10.getskipInitialImport();
        builder10.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.mongoAdminPassword = "";
        builder17.socketTimeout = (short) 0;
        boolean boolean24 = builder17.storeStatistics;
        builder17.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray28 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet29);
        java.lang.String str33 = builder10.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder10.mongoSecondaryReadPreference(false);
        boolean boolean36 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder10.mongoLocalUser("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.mongoSecondaryReadPreference(true);
        builder41.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder41.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.includeCollection("mongodb-1638820218299");
        int int54 = builder51.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        builder55.mongoAdminPassword = "";
        builder55.socketTimeout = (short) 0;
        boolean boolean62 = builder55.storeStatistics;
        builder55.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray66 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder55.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder51.setincludeFields((java.util.Set<java.lang.String>) strSet67);
        builder40.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder0.includeFields((java.util.Set<java.lang.String>) strSet67);
        builder72.setstatisticsTypeName("include_collection");
        builder72.settypeName("actions");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("password");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?password?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "admin" + "'", str3, "admin");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        builder12.mongoLocalPassword = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.settypeName("_river");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        java.util.Set<java.lang.String> strSet11 = builder0.getincludeFields();
        builder0.setincludeCollection("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str15 = builder0.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        builder8.mongoAdminPassword = "name";
        boolean boolean14 = builder8.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.socketTimeout((int) '#');
        boolean boolean17 = builder8.importAllCollections;
        int int18 = builder8.getconnectTimeout();
        java.lang.String str19 = builder8.getmongoCollection();
        java.lang.String str20 = builder8.getriverName();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition13.getACTIONS_FIELD();
        boolean boolean16 = mongoDBRiverDefinition13.getstoreStatistics();
        java.lang.String str17 = mongoDBRiverDefinition13.getADMIN_DB_FIELD();
        boolean boolean18 = mongoDBRiverDefinition13.importAllCollections;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "actions" + "'", str15, "actions");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "admin" + "'", str17, "admin");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        java.lang.String str16 = mongoDBRiverDefinition13.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition13.getMongoAdminPassword();
        boolean boolean18 = mongoDBRiverDefinition13.dropCollection;
        boolean boolean19 = mongoDBRiverDefinition13.isMongoSecondaryReadPreference();
        java.lang.String str20 = mongoDBRiverDefinition13.getIncludeCollection();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = mongoDBRiverDefinition13.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_bulk_requests" + "'", str16, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb-1638820218299" + "'", str20, "mongodb-1638820218299");
        org.junit.Assert.assertNull(serializedObjectSupporter21);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoSecondaryReadPreference(true);
        builder6.setmongoUseSSL(false);
        java.lang.String str15 = builder6.includeCollection;
        java.lang.String[] strArray50 = new java.lang.String[] { "credentials", "bulk_timeout", "mongodb-1638820218326", "localhost", "host", "bulk", "hi!", "bulk_size", "is_mongos", "script_type", "import_all_collections", "host", "ssl", "exclude_fields", "concurrent_bulk_requests", "advanced_transformation", "mongodb-1638820218326", "null.null", "filter", "host", "gridfs", "mongodb-1638820218326", "include_fields", "mongodb-1638820218387", ".scripts", "null.null", "", "ssl_verify_certificate", "name", "null.null", "bulk_timeout", "advanced_transformation", "throttle_size", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder6.excludeFields = strSet51;
        builder6.mongoLocalPassword = "filter";
        org.elasticsearch.common.settings.Settings settings56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        builder57.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.mongoSecondaryReadPreference(true);
        builder57.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder57.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str71 = mongoDBRiverDefinition70.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.BasicDBObject basicDBObject72 = mongoDBRiverDefinition70.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings73 = new org.elasticsearch.river.RiverSettings(settings56, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject72);
        builder6.mongoOplogFilter = basicDBObject72;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder0.mongoCollectionFilter(basicDBObject72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.scriptType("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder75.advancedTransformation(true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ssl_verify_certificate" + "'", str71, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        builder12.mongoSecondaryReadPreference = true;
        boolean boolean15 = builder12.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.storeStatistics(true);
        java.util.Set<java.lang.String> strSet19 = builder12.getexcludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoSecondaryReadPreference(true);
        builder19.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder19.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp30 = builder29.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        builder29.setmongoClientOptions(mongoClientOptions31);
        java.lang.String[] strArray43 = new java.lang.String[] { "filter", "socket_timeout", "local", "admin", "include_collection", "hi!", "password", "socket_timeout", "hi!", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder29.excludeFields = strSet44;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder18.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder50.mongoSecondaryReadPreference(true);
        builder50.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder50.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.includeCollection("mongodb-1638820218299");
        builder60.setmongoLocalPassword("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder60.includeCollection("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        java.lang.String str69 = mongoDBRiverDefinition68.mongoDb;
        int int70 = mongoDBRiverDefinition68.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList71 = mongoDBRiverDefinition68.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder66.mongoServers(serverAddressList71);
        builder18.setmongoServers(serverAddressList71);
        builder18.settypeName("concurrent_bulk_requests.null");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardTimestamp30);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(serverAddressList71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(riverSettings4);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.riverName = "localhost";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.mongoDb;
        java.lang.String str11 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int12 = mongoDBRiverDefinition9.throttleSize;
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        java.lang.String str14 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.statisticsIndexName;
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoSecondaryReadPreference(true);
        builder20.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.mongoDb("concurrent_bulk_requests");
        java.lang.String str31 = builder30.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject32 = builder30.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        java.lang.String str35 = mongoDBRiverDefinition34.mongoDb;
        java.lang.String str36 = mongoDBRiverDefinition34.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int37 = mongoDBRiverDefinition34.throttleSize;
        boolean boolean38 = mongoDBRiverDefinition34.getskipInitialImport();
        java.lang.String str39 = mongoDBRiverDefinition34.getScriptType();
        com.mongodb.BasicDBObject basicDBObject40 = mongoDBRiverDefinition34.mongoCollectionFilter;
        builder30.mongoCollectionFilter = basicDBObject40;
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.mongoCollectionFilter(basicDBObject40);
        builder43.setmongoCollection("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = builder43.build();
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_bulk_requests" + "'", str11, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(basicDBObject32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "concurrent_bulk_requests" + "'", str36, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition46);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject20 = builder12.getmongoOplogFilter();
        builder12.setisMongos((java.lang.Boolean) false);
        builder12.setindexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.throttleSize(0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 60000);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter4.deserializeObjectRiverSettings3();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString5();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString14();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString8();
        docScoreSearchScript0.setNextVar("mongodb-1638820218424", (java.lang.Object) str8);
        docScoreSearchScript0.setNextScore((float) 8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.mongoCollection("ssl");
        docScoreSearchScript0.setNextVar("_river", (java.lang.Object) "ssl");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218299" + "'", str6, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str7 = mongoDBRiverDefinition1.script;
        java.lang.String str8 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str10 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "user" + "'", str10, "user");
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = builder10.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str31 = builder10.mongoAdminPassword;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        java.lang.String str17 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoAdminUser("localhost");
        builder19.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        boolean boolean23 = mongoDBRiverDefinition22.dropCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.util.Set<java.lang.String> strSet3 = builder0.getincludeFields();
        java.util.Set<java.lang.String> strSet4 = builder0.getparentTypes();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(0);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.mongoLocalPassword("mongodb-1638820218449");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout(10);
        boolean boolean7 = builder6.dropCollection;
        builder6.throttleSize = 1000;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder6.getinitialTimestamp();
        builder6.setriverName("gridfs");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder8.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.riverIndexName = "mongodb-1638820218264";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = builder12.serializedObjectSupporter;
        boolean boolean14 = builder12.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.includeCollection("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.skipInitialImport(false);
        builder12.setmongoLocalPassword("password");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoLocalPassword("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("mongodb-1638820218449");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        java.lang.String str12 = builder8.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder13.advancedTransformation(true);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str24 = mongoDBRiverDefinition23.mongoDb;
        java.lang.String str25 = mongoDBRiverDefinition23.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int26 = mongoDBRiverDefinition23.throttleSize;
        boolean boolean27 = mongoDBRiverDefinition23.getskipInitialImport();
        java.lang.String str28 = mongoDBRiverDefinition23.getScriptType();
        java.lang.String str29 = mongoDBRiverDefinition23.getSIZE_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition23.statisticsIndexName;
        java.lang.String str31 = mongoDBRiverDefinition23.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder20.mongoCollectionFilter(basicDBObject32);
        builder8.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "concurrent_bulk_requests" + "'", str25, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "size" + "'", str29, "size");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218449" + "'", str3, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218299" + "'", str5, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.mongoClientOptions = mongoClientOptions12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoCollection("");
        boolean boolean16 = builder15.mongoSSLVerifyCertificate;
        java.lang.String str17 = builder15.getscript();
        builder15.setriverIndexName("");
        builder15.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.throttleSize((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoSecondaryReadPreference(true);
        builder6.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder6.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoAdminPassword("host");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str24 = mongoDBRiverDefinition23.mongoDb;
        java.lang.String str25 = mongoDBRiverDefinition23.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int26 = mongoDBRiverDefinition23.throttleSize;
        boolean boolean27 = mongoDBRiverDefinition23.getskipInitialImport();
        java.lang.String str28 = mongoDBRiverDefinition23.getScriptType();
        java.lang.String str29 = mongoDBRiverDefinition23.getSIZE_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition23.statisticsIndexName;
        java.lang.String str31 = mongoDBRiverDefinition23.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.mongoSecondaryReadPreference(true);
        builder34.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder34.mongoDb("concurrent_bulk_requests");
        java.lang.String str45 = builder44.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject46 = builder44.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        java.lang.String str49 = mongoDBRiverDefinition48.mongoDb;
        java.lang.String str50 = mongoDBRiverDefinition48.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int51 = mongoDBRiverDefinition48.throttleSize;
        boolean boolean52 = mongoDBRiverDefinition48.getskipInitialImport();
        java.lang.String str53 = mongoDBRiverDefinition48.getScriptType();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition48.mongoCollectionFilter;
        builder44.mongoCollectionFilter = basicDBObject54;
        org.elasticsearch.script.ExecutableScript executableScript56 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder20.mongoOplogFilter(basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        builder59.mongoAdminPassword = "";
        builder59.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder59.importAllCollections(true);
        java.lang.String str68 = builder67.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.mongoLocalPassword("");
        java.lang.String str71 = builder67.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder67.connectTimeout((int) (byte) 100);
        int int74 = builder73.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder73.scriptType("mydatabase");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        builder77.mongoAdminPassword = "";
        builder77.riverName = "localhost";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter86 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings87 = serializedObjectSupporter86.deserializeObjectRiverSettings3();
        java.lang.String str88 = serializedObjectSupporter86.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings89 = serializedObjectSupporter86.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService90 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition91 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings89, scriptService90);
        int int92 = mongoDBRiverDefinition91.getDEFAULT_BULK_ACTIONS();
        java.lang.String str93 = mongoDBRiverDefinition91.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject94 = mongoDBRiverDefinition91.mongoCollectionFilter;
        builder77.setmongoCollectionFilter(basicDBObject94);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder76.mongoOplogFilter(basicDBObject94);
        org.elasticsearch.river.RiverSettings riverSettings97 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject94);
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "concurrent_bulk_requests" + "'", str25, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "size" + "'", str29, "size");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(basicDBObject46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_bulk_requests" + "'", str50, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(executableScript56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(riverSettings87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "_river" + "'", str88, "_river");
        org.junit.Assert.assertNotNull(riverSettings89);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1000 + "'", int92 == 1000);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "bulk_size" + "'", str93, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218424" + "'", str9, "mongodb-1638820218424");
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder0.statisticsTypeName = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.connectTimeout((int) 'a');
        java.util.Set<java.lang.String> strSet13 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        java.lang.String str17 = builder15.getmongoAdminUser();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.indexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoLocalPassword("import_all_collections");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.getmongoClientOptions();
        builder11.mongoSecondaryReadPreference = false;
        int int17 = builder11.socketTimeout;
        builder11.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.importAllCollections(true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.mongoSecondaryReadPreference(true);
        builder27.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder27.mongoDb("concurrent_bulk_requests");
        java.lang.String str38 = builder37.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject39 = builder37.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.lang.String str42 = mongoDBRiverDefinition41.mongoDb;
        java.lang.String str43 = mongoDBRiverDefinition41.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int44 = mongoDBRiverDefinition41.throttleSize;
        boolean boolean45 = mongoDBRiverDefinition41.getskipInitialImport();
        java.lang.String str46 = mongoDBRiverDefinition41.getScriptType();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition41.mongoCollectionFilter;
        builder37.mongoCollectionFilter = basicDBObject47;
        builder26.mongoCollectionFilter = basicDBObject47;
        com.mongodb.MongoClientOptions mongoClientOptions50 = null;
        builder26.mongoClientOptions = mongoClientOptions50;
        java.lang.String str52 = builder26.includeCollection;
        builder26.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        builder55.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder55.mongoSecondaryReadPreference(true);
        builder55.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder55.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.includeCollection("mongodb-1638820218299");
        builder65.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder65.mongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject72 = builder65.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder26.mongoOplogFilter(basicDBObject72);
        builder8.mongoCollectionFilter = basicDBObject72;
        builder8.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(basicDBObject39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_bulk_requests" + "'", str43, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder0.getinitialTimestamp();
        builder0.storeStatistics = true;
        java.util.Set<java.lang.String> strSet17 = builder0.getparentTypes();
        java.lang.String str18 = builder0.getmongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoClientOptions(mongoClientOptions19);
        java.lang.String str21 = builder0.script;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        boolean boolean4 = builder0.getskipInitialImport();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        java.lang.String str23 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.indexName = "gridfs";
        java.lang.String str29 = builder25.script;
        boolean boolean30 = builder25.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        java.lang.String str33 = mongoDBRiverDefinition32.mongoDb;
        java.lang.String str34 = mongoDBRiverDefinition32.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str35 = mongoDBRiverDefinition32.getMongoLocalUser();
        java.lang.String str36 = mongoDBRiverDefinition32.mongoAdminPassword;
        java.lang.String str37 = mongoDBRiverDefinition32.getSOCKET_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition32.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder25.mongoOplogFilter(basicDBObject38);
        builder39.typeName = "throttle_size";
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "filter" + "'", str29, "filter");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "concurrent_bulk_requests" + "'", str34, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "socket_timeout" + "'", str37, "socket_timeout");
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean13 = mongoDBRiverDefinition12.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition12.getMongoOplogNamespace();
        java.lang.String str15 = mongoDBRiverDefinition12.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_bulk_requests.null" + "'", str14, "concurrent_bulk_requests.null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        builder0.setstatisticsTypeName("collection");
        builder0.disableIndexRefresh = true;
        java.lang.String str7 = builder0.getstatisticsIndexName();
        java.lang.String str8 = builder0.getscriptType();
        builder0.dropCollection = false;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str6 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "socket_timeout" + "'", str6, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_requests" + "'", str7, "concurrent_requests");
        org.junit.Assert.assertNull(mongoClientOptions8);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.riverIndexName("");
        java.lang.String str15 = builder14.script;
        builder14.disableIndexRefresh = true;
        builder14.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        boolean boolean21 = builder20.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str25 = mongoDBRiverDefinition24.mongoDb;
        java.lang.String str26 = mongoDBRiverDefinition24.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int27 = mongoDBRiverDefinition24.throttleSize;
        boolean boolean28 = mongoDBRiverDefinition24.getskipInitialImport();
        java.lang.String str29 = mongoDBRiverDefinition24.getScriptType();
        java.lang.String str30 = mongoDBRiverDefinition24.getSIZE_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition24.statisticsIndexName;
        java.lang.String str32 = mongoDBRiverDefinition24.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition24.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder20.mongoCollectionFilter = basicDBObject33;
        builder20.mongoCollection = "advanced_transformation";
        boolean boolean38 = builder20.getmongoGridFS();
        builder20.setriverName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder20.socketTimeout(8);
        boolean boolean43 = builder20.getskipInitialImport();
        java.lang.String str44 = builder20.getmongoCollection();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "concurrent_bulk_requests" + "'", str26, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "size" + "'", str30, "size");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "advanced_transformation" + "'", str44, "advanced_transformation");
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoAdminPassword("host");
        boolean boolean15 = builder14.storeStatistics;
        org.bson.types.BSONTimestamp bSONTimestamp16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.initialTimestamp(bSONTimestamp16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.dropCollection(false);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setconnectTimeout(2000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        builder10.setindexName("hi!");
        builder10.statisticsTypeName = "bulk_timeout";
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript18 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj20 = docScoreSearchScript18.unwrap((java.lang.Object) "local");
        docScoreSearchScript18.setNextScore(1.0f);
        docScoreSearchScript18.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        builder26.mongoAdminPassword = "";
        builder26.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder26.importAllCollections(true);
        builder34.setincludeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.throttleSize((int) ' ');
        int int39 = builder38.throttleSize;
        docScoreSearchScript18.setNextVar("concurrent_bulk_requests.null", (java.lang.Object) builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        builder42.mongoAdminPassword = "";
        builder42.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.importAllCollections(true);
        java.lang.String str51 = builder50.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.scriptType("mongodb-1638820218408");
        docScoreSearchScript18.setNextVar("mydatabase", (java.lang.Object) "mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        builder56.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder56.mongoSecondaryReadPreference(true);
        builder56.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder56.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp67 = builder66.initialTimestamp;
        docScoreSearchScript18.setNextVar(".scripts", (java.lang.Object) builder66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        builder69.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder69.mongoSecondaryReadPreference(true);
        builder69.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray78 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList79 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList79, serverAddressArray78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder69.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder84.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder84.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition89 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder88);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter90 = mongoDBRiverDefinition89.serializedObjectSupporter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList91 = mongoDBRiverDefinition89.getMongoServers();
        java.lang.String str92 = mongoDBRiverDefinition89.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.Set<java.lang.String> strSet93 = mongoDBRiverDefinition89.excludeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList94 = mongoDBRiverDefinition89.mongoServers;
        builder83.mongoServers = serverAddressList94;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder66.mongoServers(serverAddressList94);
        builder10.mongoServers = serverAddressList94;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "local" + "'", obj20, "local");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32 + "'", int39 == 32);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(wildcardTimestamp67);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(serverAddressArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(serializedObjectSupporter90);
        org.junit.Assert.assertNotNull(serverAddressList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "script" + "'", str92, "script");
        org.junit.Assert.assertNull(strSet93);
        org.junit.Assert.assertNotNull(serverAddressList94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.skipInitialImport(false);
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoSecondaryReadPreference(true);
        builder15.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder15.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.mongoAdminPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.lang.String str32 = mongoDBRiverDefinition31.mongoDb;
        java.lang.String str33 = mongoDBRiverDefinition31.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int34 = mongoDBRiverDefinition31.throttleSize;
        boolean boolean35 = mongoDBRiverDefinition31.getskipInitialImport();
        boolean boolean36 = mongoDBRiverDefinition31.disableIndexRefresh;
        java.lang.String str37 = mongoDBRiverDefinition31.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition31.mongoCollectionFilter;
        builder25.mongoCollectionFilter = basicDBObject38;
        builder8.setmongoOplogFilter(basicDBObject38);
        boolean boolean41 = builder8.mongoUseSSL;
        java.util.Set<java.lang.String> strSet42 = builder8.getexcludeFields();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "concurrent_bulk_requests" + "'", str33, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strSet42);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = builder10.build();
        java.util.Set<java.lang.String> strSet29 = mongoDBRiverDefinition28.getParentTypes();
        java.lang.String str30 = mongoDBRiverDefinition28.getRiverName();
        java.lang.String str31 = mongoDBRiverDefinition28.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "secondary_read_preference" + "'", str31, "secondary_read_preference");
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter2.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("mongodb-1638820217755", "script", riverSettings7, scriptService8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = riverSettings7.settings();
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int11 = mongoDBRiverDefinition1.throttleSize;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl" + "'", str10, "ssl");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("socket_timeout", "localhost", riverSettings6, scriptService7);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("script_type", "credentials", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?credentials?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoClientOptions(mongoClientOptions12);
        java.lang.String str14 = builder8.getriverIndexName();
        java.lang.String str15 = builder8.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        boolean boolean21 = builder20.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str25 = mongoDBRiverDefinition24.mongoDb;
        java.lang.String str26 = mongoDBRiverDefinition24.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int27 = mongoDBRiverDefinition24.throttleSize;
        boolean boolean28 = mongoDBRiverDefinition24.getskipInitialImport();
        java.lang.String str29 = mongoDBRiverDefinition24.getScriptType();
        java.lang.String str30 = mongoDBRiverDefinition24.getSIZE_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition24.statisticsIndexName;
        java.lang.String str32 = mongoDBRiverDefinition24.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition24.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder20.mongoCollectionFilter = basicDBObject33;
        builder20.mongoCollection = "advanced_transformation";
        boolean boolean38 = builder20.getmongoGridFS();
        builder20.setriverName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder20.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder20.connectTimeout((int) '#');
        java.lang.String str45 = builder20.getindexName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "concurrent_bulk_requests" + "'", str26, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "size" + "'", str30, "size");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        boolean boolean13 = builder12.getskipInitialImport();
        builder12.mongoDb = "credentials";
        builder12.setincludeCollection("store_statistics");
        boolean boolean18 = builder12.storeStatistics;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter2.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("name", "localhost", riverSettings6, scriptService7);
        java.lang.String str9 = mongoDBRiverDefinition8.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition8.mongoOplogFilter;
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "localhost" + "'", str9, "localhost");
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30000 + "'", int5 == 30000);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "db" + "'", str6, "db");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject12 = builder10.getmongoOplogFilter();
        builder10.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean16 = builder10.getmongoGridFS();
        builder10.setmongoSSLVerifyCertificate(false);
        boolean boolean19 = builder10.disableIndexRefresh;
        java.lang.String str20 = builder10.includeCollection;
        int int21 = builder10.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder10.mongoAdminUser("index");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "socket_timeout" + "'", str20, "socket_timeout");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        int int12 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str13 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str14 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 60000 + "'", int12 == 60000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.typeName("_river");
        boolean boolean19 = builder18.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        builder21.mongoAdminPassword = "";
        builder21.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.importAllCollections(true);
        java.lang.String str30 = builder29.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.mongoLocalPassword("");
        boolean boolean33 = builder32.dropCollection;
        boolean boolean34 = builder32.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.setdisableIndexRefresh(false);
        builder35.setmongoAdminPassword("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter44 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings45 = serializedObjectSupporter44.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings45, scriptService46);
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition47.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions49 = mongoDBRiverDefinition47.getMongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder35.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder32.mongoClientOptions(mongoClientOptions49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder18.mongoClientOptions(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(riverSettings45);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertNull(basicDBObject48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.isStoreStatistics();
        int int8 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean9 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString9();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218424" + "'", str3, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820217755" + "'", str6, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218363" + "'", str8, "mongodb-1638820218363");
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str3 = mongoDBRiverDefinition1.getStatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str5 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "credentials" + "'", str5, "credentials");
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setstatisticsIndexName("concurrent_bulk_requests");
        java.lang.String str7 = builder0.riverIndexName;
        java.lang.String str8 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        builder9.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.mongoSecondaryReadPreference(true);
        builder9.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder9.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.includeCollection("mongodb-1638820218299");
        builder19.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        builder30.mongoAdminPassword = "";
        builder30.socketTimeout = (short) 0;
        boolean boolean37 = builder30.storeStatistics;
        builder30.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray41 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder30.excludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder47.mongoSecondaryReadPreference(true);
        builder47.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder47.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.includeCollection("mongodb-1638820218299");
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = builder57.getmongoServers();
        builder46.mongoServers = serverAddressList60;
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder46.mongoClientOptions(mongoClientOptions62);
        boolean boolean64 = builder63.skipInitialImport;
        builder63.setindexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str68 = mongoDBRiverDefinition67.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition67.excludeFields;
        builder27.setexcludeFields(strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder0.includeFields(strSet69);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "import_all_collections" + "'", str68, "import_all_collections");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        java.lang.String str13 = builder12.getriverIndexName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("exclude_fields");
        java.lang.Boolean boolean14 = builder13.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.storeStatistics(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.mongoClientOptions = mongoClientOptions12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoCollection("");
        boolean boolean16 = builder15.mongoSSLVerifyCertificate;
        boolean boolean17 = builder15.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.advancedTransformation(true);
        builder15.indexName = "import_all_collections";
        com.mongodb.BasicDBObject basicDBObject22 = builder15.mongoOplogFilter;
        java.lang.Boolean boolean23 = builder15.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.mongoAdminPassword = "";
        builder24.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.importAllCollections(true);
        java.lang.String str33 = builder32.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        boolean boolean37 = mongoDBRiverDefinition36.getskipInitialImport();
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition36.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder15.mongoCollectionFilter(basicDBObject38);
        builder39.statisticsIndexName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder39.riverIndexName("exclude_fields");
        com.mongodb.BasicDBObject basicDBObject44 = builder43.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(basicDBObject22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(basicDBObject44);
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setstatisticsIndexName("concurrent_bulk_requests");
        java.lang.String str7 = builder0.riverIndexName;
        builder0.setmongoCollection("db");
        builder0.setmongoCollection("import_all_collections");
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.typeName("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str17 = mongoDBRiverDefinition16.scriptType;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        builder8.mongoLocalPassword = "mongodb-1638820218449";
        builder8.connectTimeout = (byte) 0;
        boolean boolean14 = builder8.importAllCollections;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter15.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter15.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter15.deserializeObjectRiverSettings7();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString8();
        builder8.serializedObjectSupporter = serializedObjectSupporter15;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition21.getMongoServers();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(riverSettings18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
        org.junit.Assert.assertNotNull(serverAddressList22);
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        builder16.mongoCollection = "mongodb-1638820217755";
        builder16.mongoGridFS = false;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition1.scriptType;
        int int11 = mongoDBRiverDefinition1.throttleSize;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(false);
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.mongoClientOptions;
        builder20.riverName = "ssl_verify_certificate";
        java.util.Set<java.lang.String> strSet26 = builder20.getincludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.skipInitialImport(false);
        boolean boolean14 = builder8.storeStatistics;
        builder8.statisticsTypeName = "mongodb-1638820218449";
        builder8.mongoAdminPassword = "ssl_verify_certificate";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.mongoServers;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str11 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.getstoreStatistics();
        int int13 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean14 = mongoDBRiverDefinition1.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "password" + "'", str11, "password");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        boolean boolean4 = builder0.getskipInitialImport();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        java.lang.String str23 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean26 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder0.mongoLocalUser("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.isMongos((java.lang.Boolean) true);
        builder28.setdisableIndexRefresh(false);
        builder28.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder35.mongoSecondaryReadPreference(true);
        builder35.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder35.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = builder45.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        builder45.setmongoClientOptions(mongoClientOptions47);
        builder45.setmongoAdminPassword("bulk_timeout");
        boolean boolean51 = builder45.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        java.lang.String str54 = mongoDBRiverDefinition53.mongoDb;
        java.lang.String str55 = mongoDBRiverDefinition53.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int56 = mongoDBRiverDefinition53.throttleSize;
        boolean boolean57 = mongoDBRiverDefinition53.getskipInitialImport();
        boolean boolean58 = mongoDBRiverDefinition53.disableIndexRefresh;
        java.lang.String str59 = mongoDBRiverDefinition53.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition53.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder45.mongoOplogFilter(basicDBObject60);
        com.mongodb.BasicDBObject basicDBObject62 = builder45.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder28.mongoOplogFilter(basicDBObject62);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "concurrent_bulk_requests" + "'", str55, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings5.globalSettings();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter7.deserializeObjectRiverSettings3();
        java.lang.String str9 = serializedObjectSupporter7.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter7.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter7.deserializeObjectRiverSettings4();
        org.elasticsearch.common.settings.Settings settings12 = riverSettings11.globalSettings();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter15.deserializeObjectRiverSettings3();
        java.lang.String str17 = serializedObjectSupporter15.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter15.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings18, scriptService19);
        int int21 = mongoDBRiverDefinition20.getDEFAULT_BULK_ACTIONS();
        java.lang.String str22 = mongoDBRiverDefinition20.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition20.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoSecondaryReadPreference(true);
        builder25.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder25.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.mongoAdminPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.lang.String str42 = mongoDBRiverDefinition41.mongoDb;
        java.lang.String str43 = mongoDBRiverDefinition41.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int44 = mongoDBRiverDefinition41.throttleSize;
        boolean boolean45 = mongoDBRiverDefinition41.getskipInitialImport();
        boolean boolean46 = mongoDBRiverDefinition41.disableIndexRefresh;
        java.lang.String str47 = mongoDBRiverDefinition41.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition41.mongoCollectionFilter;
        builder35.mongoCollectionFilter = basicDBObject48;
        org.elasticsearch.river.RiverSettings riverSettings50 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.elasticsearch.env.Environment environment52 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray53 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet54 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet54, scriptEngineServiceArray53);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService57 = new org.elasticsearch.script.ScriptService(settings6, environment52, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet54, resourceWatcherService56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218299" + "'", str9, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings10);
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
        org.junit.Assert.assertNotNull(riverSettings18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1000 + "'", int21 == 1000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bulk_size" + "'", str22, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_bulk_requests" + "'", str43, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218449" + "'", str6, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertNotNull(riverSettings10);
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        boolean boolean7 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean12 = builder0.getdropCollection();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        java.lang.Object obj4 = null;
        docScoreSearchScript0.setNextVar("mongodb-1638820218299", obj4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoGridFS(false);
        java.lang.String str12 = builder11.scriptType;
        builder11.scriptType = "ssl_verify_certificate";
        java.lang.Object obj15 = docScoreSearchScript0.unwrap((java.lang.Object) "ssl_verify_certificate");
        org.elasticsearch.common.ParseField parseField17 = org.elasticsearch.script.ScriptService.VALUE_SCRIPT_FILE;
        docScoreSearchScript0.setNextVar("", (java.lang.Object) parseField17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        builder19.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.importAllCollections(true);
        java.lang.String str28 = builder27.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoLocalPassword("import_all_collections");
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.getmongoClientOptions();
        builder30.mongoSecondaryReadPreference = false;
        java.lang.Object obj36 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "ssl_verify_certificate" + "'", obj15, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(parseField17);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(mongoClientOptions33);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + false + "'", obj36, false);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str5 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "is_mongos" + "'", str5, "is_mongos");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = mongoDBRiverDefinition5.serializedObjectSupporter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition5.getMongoServers();
        java.lang.String str8 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition5.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition5.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int11 = mongoDBRiverDefinition5.connectTimeout;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean11 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean12 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str13 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "user" + "'", str13, "user");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "credentials" + "'", str14, "credentials");
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoUseSSL(false);
        java.lang.String str9 = builder0.includeCollection;
        java.lang.String[] strArray44 = new java.lang.String[] { "credentials", "bulk_timeout", "mongodb-1638820218326", "localhost", "host", "bulk", "hi!", "bulk_size", "is_mongos", "script_type", "import_all_collections", "host", "ssl", "exclude_fields", "concurrent_bulk_requests", "advanced_transformation", "mongodb-1638820218326", "null.null", "filter", "host", "gridfs", "mongodb-1638820218326", "include_fields", "mongodb-1638820218387", ".scripts", "null.null", "", "ssl_verify_certificate", "name", "null.null", "bulk_timeout", "advanced_transformation", "throttle_size", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder0.excludeFields = strSet45;
        builder0.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str51 = builder0.riverIndexName;
        java.lang.String str52 = builder0.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("actions", "collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings3, scriptService4);
        org.elasticsearch.common.settings.Settings settings6 = riverSettings3.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.mongoSecondaryReadPreference(true);
        builder7.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.mongoDb("concurrent_bulk_requests");
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        builder19.socketTimeout = (short) 0;
        boolean boolean26 = builder19.storeStatistics;
        builder19.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray30 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet31);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet31);
        java.lang.String str35 = builder17.getstatisticsTypeName();
        builder17.setconnectTimeout((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition38.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings40 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.env.Environment environment41 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray42 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet43 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet43, scriptEngineServiceArray42);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService46 = new org.elasticsearch.script.ScriptService(settings6, environment41, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet43, resourceWatcherService45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.mongoClientOptions = mongoClientOptions12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoCollection("");
        boolean boolean16 = builder15.mongoSSLVerifyCertificate;
        boolean boolean17 = builder15.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.advancedTransformation(true);
        builder19.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder0.setmongoClientOptions(mongoClientOptions11);
        builder0.setscript("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.statisticsTypeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.scriptType("mongodb-1638820218387");
        int int21 = builder20.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.mongoCollection("skip_initial_import");
        int int24 = builder23.getsocketTimeout();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.statisticsTypeName("throttle_size");
        builder12.setscript("user");
        builder12.setthrottleSize(1);
        builder12.setscript("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str24 = mongoDBRiverDefinition23.mongoCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean5 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.isMongos;
        boolean boolean7 = mongoDBRiverDefinition1.skipInitialImport;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        builder10.setmongoAdminPassword("bulk_timeout");
        boolean boolean16 = builder10.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str19 = mongoDBRiverDefinition18.mongoDb;
        java.lang.String str20 = mongoDBRiverDefinition18.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int21 = mongoDBRiverDefinition18.throttleSize;
        boolean boolean22 = mongoDBRiverDefinition18.getskipInitialImport();
        boolean boolean23 = mongoDBRiverDefinition18.disableIndexRefresh;
        java.lang.String str24 = mongoDBRiverDefinition18.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject25 = mongoDBRiverDefinition18.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder10.mongoOplogFilter(basicDBObject25);
        builder26.statisticsTypeName = "initial_timestamp";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "concurrent_bulk_requests" + "'", str20, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218424" + "'", str3, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        boolean boolean12 = builder11.dropCollection;
        builder11.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder11.mongoClientOptions = mongoClientOptions15;
        java.lang.String str17 = builder11.getmongoAdminUser();
        java.lang.Boolean boolean18 = builder11.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        int int20 = mongoDBRiverDefinition19.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        builder8.setconnectTimeout((int) (short) 100);
        builder8.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.typeName("gridfs");
        java.lang.String str16 = builder15.getscript();
        java.lang.String str17 = builder15.mongoLocalUser;
        builder15.setriverName("collection");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.indexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str8 = builder4.scriptType;
        java.lang.String str9 = builder4.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.mongoAdminPassword = "";
        builder10.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.importAllCollections(true);
        java.lang.String str19 = builder18.gettypeName();
        int int20 = builder18.getsocketTimeout();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder18.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder4.mongoServers(serverAddressList21);
        builder4.setmongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter2.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter2.deserializeObjectRiverSettings8();
        org.elasticsearch.script.ScriptService scriptService7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("null.null", "mongodb-1638820218264", riverSettings6, scriptService7);
        java.lang.String str9 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoAdminUser();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "admin" + "'", str11, "admin");
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings3, scriptService4);
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition5.getMongoOplogFilter();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition5.isMongos();
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        builder8.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str15 = mongoDBRiverDefinition14.getHOST_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition14.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str17 = mongoDBRiverDefinition14.getMongoOplogNamespace();
        java.lang.String str18 = mongoDBRiverDefinition14.getDROP_COLLECTION_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition14.getDB_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition14.indexName;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.null" + "'", str17, "null.null");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "db" + "'", str19, "db");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        builder10.setmongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("mongodb-1638820218299");
        int int26 = builder23.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        builder27.socketTimeout = (short) 0;
        boolean boolean34 = builder27.storeStatistics;
        builder27.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray38 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet39);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("filter");
        boolean boolean47 = builder43.getskipInitialImport();
        builder43.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.socketTimeout = (short) 0;
        boolean boolean57 = builder50.storeStatistics;
        builder50.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray61 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder43.setparentTypes((java.util.Set<java.lang.String>) strSet62);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder10.socketTimeout((int) (byte) 0);
        builder10.riverName = "mongodb-1638820217755";
        java.lang.String str72 = builder10.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean9 = mongoDBRiverDefinition1.getskipInitialImport();
        int int10 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        java.lang.Boolean boolean7 = builder0.getisMongos();
        builder0.setstatisticsTypeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter10.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter10.deserializeObjectRiverSettings8();
        builder0.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString13();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218408" + "'", str14, "mongodb-1638820218408");
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.scriptType("script_type");
        int int14 = builder13.socketTimeout;
        java.lang.String str15 = builder13.mongoAdminPassword;
        builder13.statisticsIndexName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        boolean boolean23 = builder21.getdropCollection();
        builder21.isMongos = false;
        com.mongodb.BasicDBObject basicDBObject26 = builder21.getmongoCollectionFilter();
        builder13.mongoOplogFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder13.connectTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean6 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition1.getStatisticsTypeName();
        boolean boolean11 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        builder12.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.script("include_fields");
        builder17.setincludeCollection("mongodb-1638820218264");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter8.deserializeObjectRiverSettings3();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter8.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings11, scriptService12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_BULK_ACTIONS();
        java.lang.String str15 = mongoDBRiverDefinition13.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition13.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = riverSettings17.settings();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk_size" + "'", str15, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.isMongos((java.lang.Boolean) false);
        boolean boolean21 = builder20.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet22 = builder20.getincludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoSecondaryReadPreference(true);
        builder17.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder17.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.includeCollection("mongodb-1638820218299");
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder27.getmongoServers();
        builder16.mongoServers = serverAddressList30;
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder16.mongoClientOptions(mongoClientOptions32);
        boolean boolean34 = builder33.skipInitialImport;
        java.lang.String str35 = builder33.getmongoLocalUser();
        boolean boolean36 = builder33.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218408" + "'", str4, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        boolean boolean18 = builder12.getmongoSecondaryReadPreference();
        builder12.setmongoCollection("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        builder21.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.dropCollection(false);
        boolean boolean27 = builder21.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = builder29.getmongoServers();
        builder12.setmongoServers(serverAddressList31);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(serverAddressList31);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        boolean boolean12 = builder11.dropCollection;
        builder11.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder11.mongoClientOptions = mongoClientOptions15;
        java.lang.String str17 = builder11.getmongoAdminUser();
        java.lang.Boolean boolean18 = builder11.isMongos;
        builder11.setscript("disable_index_refresh");
        builder11.setriverIndexName("script.default_lang");
        builder11.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder11.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        int int30 = builder28.getconnectTimeout();
        boolean boolean31 = builder28.disableIndexRefresh;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(false);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject20 = builder18.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.setincludeCollection("skip_initial_import");
        builder18.setadvancedTransformation(false);
        boolean boolean26 = builder18.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoSecondaryReadPreference(true);
        builder8.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoAdminPassword("host");
        boolean boolean23 = builder22.mongoUseSSL;
        docScoreSearchScript0.setNextVar("socket_timeout", (java.lang.Object) boolean23);
        docScoreSearchScript0.setNextScore((float) (short) 0);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str22 = mongoDBRiverDefinition21.mongoDb;
        java.lang.String str23 = mongoDBRiverDefinition21.getADMIN_DB_FIELD();
        boolean boolean24 = mongoDBRiverDefinition21.skipInitialImport;
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = mongoDBRiverDefinition21.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.mongoServers(serverAddressList25);
        java.lang.String str27 = builder12.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder12.mongoAdminUser("skip_initial_import");
        java.lang.String str30 = builder12.getriverName();
        java.lang.String str31 = builder12.getriverIndexName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "admin" + "'", str23, "admin");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        java.lang.String str16 = mongoDBRiverDefinition13.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition13.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int18 = mongoDBRiverDefinition13.getThrottleSize();
        boolean boolean19 = mongoDBRiverDefinition13.dropCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_bulk_requests" + "'", str16, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition13.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str17 = mongoDBRiverDefinition13.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str5 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str7 = mongoDBRiverDefinition1.getTYPE_FIELD();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition1.typeName;
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "store_statistics" + "'", str5, "store_statistics");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "type" + "'", str7, "type");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("mongodb-1638820218387", "mycollection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?mycollection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        java.lang.String str13 = builder12.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoSecondaryReadPreference(true);
        builder14.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder14.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.includeCollection("mongodb-1638820218299");
        int int27 = builder24.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.statisticsIndexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        builder30.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.mongoSecondaryReadPreference(true);
        builder30.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder30.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.includeCollection("mongodb-1638820218299");
        builder40.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder40.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.isMongos((java.lang.Boolean) false);
        builder46.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        builder51.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder51.mongoSecondaryReadPreference(true);
        builder51.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder51.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.includeCollection("mongodb-1638820218299");
        int int64 = builder61.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder65);
        builder65.mongoAdminPassword = "";
        builder65.socketTimeout = (short) 0;
        boolean boolean72 = builder65.storeStatistics;
        builder65.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray76 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder65.excludeFields((java.util.Set<java.lang.String>) strSet77);
        builder61.setincludeFields((java.util.Set<java.lang.String>) strSet77);
        builder46.includeFields = strSet77;
        builder24.includeFields = strSet77;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.mongoSSLVerifyCertificate(true);
        builder83.setmongoLocalPassword("options");
        java.lang.Boolean boolean88 = builder83.isMongos;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(boolean88);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        java.lang.String str12 = builder8.getstatisticsTypeName();
        builder8.connectTimeout = (short) 1;
        boolean boolean15 = builder8.getskipInitialImport();
        builder8.setdropCollection(true);
        builder8.setindexName("options");
        java.lang.String str20 = builder8.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoUseSSL(false);
        java.lang.String str9 = builder0.includeCollection;
        java.lang.String[] strArray44 = new java.lang.String[] { "credentials", "bulk_timeout", "mongodb-1638820218326", "localhost", "host", "bulk", "hi!", "bulk_size", "is_mongos", "script_type", "import_all_collections", "host", "ssl", "exclude_fields", "concurrent_bulk_requests", "advanced_transformation", "mongodb-1638820218326", "null.null", "filter", "host", "gridfs", "mongodb-1638820218326", "include_fields", "mongodb-1638820218387", ".scripts", "null.null", "", "ssl_verify_certificate", "name", "null.null", "bulk_timeout", "advanced_transformation", "throttle_size", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder0.excludeFields = strSet45;
        builder0.mongoLocalPassword = "filter";
        org.elasticsearch.common.settings.Settings settings50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        builder51.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder51.mongoSecondaryReadPreference(true);
        builder51.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder51.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str65 = mongoDBRiverDefinition64.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.BasicDBObject basicDBObject66 = mongoDBRiverDefinition64.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings50, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        builder0.mongoOplogFilter = basicDBObject66;
        java.lang.String str69 = builder0.getscript();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ssl_verify_certificate" + "'", str65, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.connectTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoUseSSL(true);
        builder0.setmongoAdminUser("credentials");
        builder0.importAllCollections = false;
        java.lang.String str12 = builder0.getmongoLocalPassword();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        boolean boolean7 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "admin" + "'", str3, "admin");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bulk_timeout" + "'", str4, "bulk_timeout");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        boolean boolean12 = builder11.dropCollection;
        builder11.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder11.mongoClientOptions = mongoClientOptions15;
        java.lang.String str17 = builder11.getmongoAdminUser();
        java.lang.Boolean boolean18 = builder11.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.socketTimeout(30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder11.mongoAdminUser("");
        builder11.setsocketTimeout((int) (short) 1);
        builder11.setmongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        boolean boolean5 = builder0.getdisableIndexRefresh();
        builder0.setmongoAdminPassword("null.null");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder0.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.mongoDb;
        int int12 = mongoDBRiverDefinition10.throttleSize;
        int int13 = mongoDBRiverDefinition10.getDEFAULT_BULK_ACTIONS();
        java.lang.String str14 = mongoDBRiverDefinition10.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition10.mongoCollectionFilter;
        java.lang.String str16 = mongoDBRiverDefinition10.getBULK_TIMEOUT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition10.getScriptType();
        java.lang.Boolean boolean18 = mongoDBRiverDefinition10.getisMongos();
        java.lang.String str19 = mongoDBRiverDefinition10.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition10.getMongoServers();
        builder0.mongoServers = serverAddressList20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_timeout" + "'", str16, "bulk_timeout");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        builder12.mongoLocalPassword = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str18 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition17.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        boolean boolean4 = builder0.getskipInitialImport();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        java.lang.String str23 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean26 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder0.mongoLocalUser("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        builder31.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoSecondaryReadPreference(true);
        builder31.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder31.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.includeCollection("mongodb-1638820218299");
        int int44 = builder41.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        builder45.mongoAdminPassword = "";
        builder45.socketTimeout = (short) 0;
        boolean boolean52 = builder45.storeStatistics;
        builder45.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray56 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder45.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder41.setincludeFields((java.util.Set<java.lang.String>) strSet57);
        builder30.setexcludeFields((java.util.Set<java.lang.String>) strSet57);
        builder30.typeName = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        builder30.mongoDb = "";
        boolean boolean67 = builder30.importAllCollections;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        int int13 = builder0.getconnectTimeout();
        java.util.Set<java.lang.String> strSet14 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setstoreStatistics(false);
        builder0.mongoSecondaryReadPreference = false;
        java.lang.String str20 = builder0.includeCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "socket_timeout" + "'", str20, "socket_timeout");
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        boolean boolean17 = builder16.getdropCollection();
        java.util.Set<java.lang.String> strSet18 = builder16.getexcludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.mongoSecondaryReadPreference(true);
        builder7.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.mongoDb("concurrent_bulk_requests");
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        builder19.socketTimeout = (short) 0;
        boolean boolean26 = builder19.storeStatistics;
        builder19.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray30 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet31);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet31);
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        builder0.setmongoClientOptions(mongoClientOptions36);
        java.util.List<com.mongodb.ServerAddress> serverAddressList38 = builder0.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(serverAddressList38);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.common.settings.Settings settings11 = riverSettings10.globalSettings();
        org.elasticsearch.env.Environment environment12 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray13 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet14 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet14, scriptEngineServiceArray13);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService17 = new org.elasticsearch.script.ScriptService(settings11, environment12, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet14, resourceWatcherService16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820217755" + "'", str9, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(riverSettings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoLocalPassword;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean10 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str12 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout(10);
        builder6.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean13 = mongoDBRiverDefinition12.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition12.getSSL_CONNECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.statisticsIndexName;
        java.lang.String str16 = mongoDBRiverDefinition12.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        builder12.setriverName("store_statistics");
        org.bson.types.BSONTimestamp bSONTimestamp17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.initialTimestamp(bSONTimestamp17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str4 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean6 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str9 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "password" + "'", str4, "password");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoSecondaryReadPreference(true);
        builder15.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder15.mongoDb("concurrent_bulk_requests");
        java.lang.String str26 = builder25.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject27 = builder25.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        java.lang.String str30 = mongoDBRiverDefinition29.mongoDb;
        java.lang.String str31 = mongoDBRiverDefinition29.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int32 = mongoDBRiverDefinition29.throttleSize;
        boolean boolean33 = mongoDBRiverDefinition29.getskipInitialImport();
        java.lang.String str34 = mongoDBRiverDefinition29.getScriptType();
        com.mongodb.BasicDBObject basicDBObject35 = mongoDBRiverDefinition29.mongoCollectionFilter;
        builder25.mongoCollectionFilter = basicDBObject35;
        builder14.mongoCollectionFilter = basicDBObject35;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean41 = mongoDBRiverDefinition40.isDisableIndexRefresh();
        int int42 = mongoDBRiverDefinition40.getThrottleSize();
        boolean boolean43 = mongoDBRiverDefinition40.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject44 = mongoDBRiverDefinition40.getMongoCollectionFilter();
        builder14.mongoOplogFilter = basicDBObject44;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(basicDBObject27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "concurrent_bulk_requests" + "'", str31, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(basicDBObject44);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition1.getMongoClientOptions();
        boolean boolean12 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str13 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        boolean boolean4 = builder0.getskipInitialImport();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.mongoCollection("localhost");
        java.lang.String str25 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoSSLVerifyCertificate(true);
        java.lang.String str30 = builder27.getmongoLocalPassword();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setstatisticsIndexName("concurrent_bulk_requests");
        java.lang.String str7 = builder0.riverIndexName;
        builder0.setmongoCollection("db");
        builder0.setmongoCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet12 = builder0.getexcludeFields();
        builder0.setmongoSSLVerifyCertificate(true);
        builder0.setstatisticsTypeName("secret");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString16();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218424" + "'", str8, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder5.dropCollection = false;
        builder5.setstoreStatistics(true);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.riverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoUseSSL(true);
        java.lang.String str16 = builder15.mongoAdminUser;
        boolean boolean17 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.scriptType("mongodb-1638820218387");
        java.lang.String str20 = builder15.mongoAdminPassword;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str5 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218408" + "'", str5, "mongodb-1638820218408");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        java.lang.String str15 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.statisticsIndexName("script");
        boolean boolean19 = builder14.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        boolean boolean12 = builder11.dropCollection;
        builder11.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder11.mongoClientOptions = mongoClientOptions15;
        java.lang.String str17 = builder11.getmongoAdminUser();
        java.lang.Boolean boolean18 = builder11.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.socketTimeout(30000);
        boolean boolean21 = builder11.mongoSSLVerifyCertificate;
        builder11.settypeName("disable_index_refresh");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings5, scriptService6);
        int int8 = mongoDBRiverDefinition7.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition7.getBULK_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition7.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        boolean boolean12 = mongoDBRiverDefinition7.getdisableIndexRefresh();
        int int13 = mongoDBRiverDefinition7.getSocketTimeout();
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_size" + "'", str9, "bulk_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disable_index_refresh" + "'", str10, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 60000 + "'", int13 == 60000);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        java.lang.String str15 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.mongoDb;
        java.lang.String str19 = mongoDBRiverDefinition17.getADMIN_DB_FIELD();
        boolean boolean20 = mongoDBRiverDefinition17.skipInitialImport;
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition17.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers(serverAddressList21);
        java.lang.String str23 = builder22.getriverName();
        builder22.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.storeStatistics(false);
        int int28 = builder27.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.includeCollection("");
        java.util.Set<java.lang.String> strSet31 = builder27.getexcludeFields();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strSet31);
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder0.mongoLocalUser;
        boolean boolean10 = builder0.getadvancedTransformation();
        builder0.socketTimeout = '4';
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings3();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter13.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        org.elasticsearch.common.settings.Settings settings18 = riverSettings17.globalSettings();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter21.deserializeObjectRiverSettings3();
        java.lang.String str23 = serializedObjectSupporter21.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter21.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings24, scriptService25);
        int int27 = mongoDBRiverDefinition26.getDEFAULT_BULK_ACTIONS();
        java.lang.String str28 = mongoDBRiverDefinition26.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition26.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        builder31.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoSecondaryReadPreference(true);
        builder31.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder31.mongoDb("concurrent_bulk_requests");
        java.lang.String str42 = builder41.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject43 = builder41.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.mongoDb;
        java.lang.String str47 = mongoDBRiverDefinition45.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int48 = mongoDBRiverDefinition45.throttleSize;
        boolean boolean49 = mongoDBRiverDefinition45.getskipInitialImport();
        java.lang.String str50 = mongoDBRiverDefinition45.getScriptType();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition45.mongoCollectionFilter;
        builder41.mongoCollectionFilter = basicDBObject51;
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.mongoCollectionFilter(basicDBObject51);
        java.lang.String str55 = builder54.gettypeName();
        builder54.mongoUseSSL = false;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218299" + "'", str15, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_river" + "'", str23, "_river");
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bulk_size" + "'", str28, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(basicDBObject43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString16();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.includeCollection;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218299" + "'", str11, "mongodb-1638820218299");
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getNAME_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getMongoLocalUser();
        boolean boolean16 = mongoDBRiverDefinition12.isMongoUseSSL();
        java.lang.String str17 = mongoDBRiverDefinition12.getMongoLocalUser();
        java.lang.String str18 = mongoDBRiverDefinition12.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition12.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "exclude_fields" + "'", str18, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk_timeout" + "'", str19, "bulk_timeout");
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        builder12.mongoSSLVerifyCertificate = true;
        builder12.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.skipInitialImport(true);
        boolean boolean26 = builder25.getmongoUseSSL();
        builder25.setstatisticsIndexName("is_mongos");
        builder25.mongoLocalPassword = "archive-stats";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str13 = mongoDBRiverDefinition1.getBULK_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoUseSSL(false);
        builder0.skipInitialImport = false;
        builder0.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str14 = mongoDBRiverDefinition13.typeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverIndexName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoCollection("hi!");
        builder16.setstatisticsIndexName("bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        builder8.riverIndexName = "mongodb-1638820218387";
        builder8.setscriptType("db");
        builder8.mongoCollection = "";
        builder8.mongoAdminPassword = "flush_interval";
        builder8.indexName = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.script("filter");
        java.lang.String str26 = builder22.indexName;
        builder22.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        builder31.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoSecondaryReadPreference(true);
        builder31.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray40 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList41 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList41, serverAddressArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder31.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.isMongos((java.lang.Boolean) true);
        boolean boolean46 = builder43.getadvancedTransformation();
        builder43.setmongoSSLVerifyCertificate(true);
        builder43.setmongoUseSSL(false);
        builder43.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        builder53.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder53.mongoSecondaryReadPreference(true);
        builder53.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder53.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.includeCollection("mongodb-1638820218299");
        builder63.setmongoDb("");
        builder63.mongoAdminPassword = "is_mongos";
        com.mongodb.BasicDBObject basicDBObject70 = builder63.mongoCollectionFilter;
        builder43.mongoCollectionFilter = basicDBObject70;
        builder30.mongoCollectionFilter = basicDBObject70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder8.mongoCollectionFilter(basicDBObject70);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(serverAddressArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings5, scriptService6);
        int int8 = mongoDBRiverDefinition7.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition7.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str10 = mongoDBRiverDefinition7.getIS_MONGOS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition7.getMongoClientOptions();
        boolean boolean12 = mongoDBRiverDefinition7.getmongoUseSSL();
        java.lang.String str13 = mongoDBRiverDefinition7.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "is_mongos" + "'", str10, "is_mongos");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_fields" + "'", str13, "include_fields");
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str5 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition1.getDB_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "is_mongos" + "'", str5, "is_mongos");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "db" + "'", str7, "db");
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.statisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        java.lang.String str17 = mongoDBRiverDefinition16.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition16.getHOST_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition16.getTypeName();
        java.lang.String str20 = mongoDBRiverDefinition16.getUSER_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "host" + "'", str18, "host");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "user" + "'", str20, "user");
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str8 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 60000 + "'", int9 == 60000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.Class<?> wildcardClass6 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoLocalPassword("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.includeCollection("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str19 = mongoDBRiverDefinition18.mongoDb;
        int int20 = mongoDBRiverDefinition18.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition18.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoServers(serverAddressList21);
        java.lang.String str23 = builder16.getriverIndexName();
        java.lang.String str24 = builder16.riverName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        builder12.mongoSSLVerifyCertificate = true;
        builder12.isMongos = true;
        builder12.connectTimeout = (short) 1;
        builder12.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        java.lang.String str15 = builder12.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.mongoUseSSL(true);
        builder12.setskipInitialImport(true);
        builder12.setmongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        java.lang.Boolean boolean7 = builder0.getisMongos();
        builder0.setstatisticsTypeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter10.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter10.deserializeObjectRiverSettings8();
        builder0.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter10.deserializeObjectRiverSettings7();
        java.lang.String str16 = serializedObjectSupporter10.deserializeObjectString11();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218387" + "'", str16, "mongodb-1638820218387");
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        builder12.mongoLocalPassword = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str18 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition17.mongoDb;
        java.lang.String str20 = mongoDBRiverDefinition17.getDB_FIELD();
        boolean boolean21 = mongoDBRiverDefinition17.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_bulk_requests" + "'", str19, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "db" + "'", str20, "db");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getNAME_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getMongoLocalUser();
        java.lang.String str16 = mongoDBRiverDefinition12.getGRIDFS_FIELD();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition12.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertNotNull(basicDBObject17);
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str7 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "admin" + "'", str3, "admin");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "db" + "'", str7, "db");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        builder12.mongoLocalPassword = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminUser = "script_type";
        builder12.setthrottleSize((int) (byte) 100);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder12.initialTimestamp;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardTimestamp22);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        boolean boolean7 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.storeStatistics(true);
        boolean boolean10 = builder0.getimportAllCollections();
        java.lang.String str11 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter14.deserializeObjectRiverSettings3();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString5();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString14();
        java.lang.String str18 = serializedObjectSupporter14.deserializeObjectString15();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString5();
        java.lang.String str20 = serializedObjectSupporter14.deserializeObjectString8();
        builder13.serializedObjectSupporter = serializedObjectSupporter14;
        java.lang.String str22 = builder13.mongoDb;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218299" + "'", str16, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218424" + "'", str18, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb-1638820218299" + "'", str19, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_river" + "'", str20, "_river");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("mongodb-1638820218299");
        builder23.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.mongoUseSSL(false);
        java.lang.String str30 = builder23.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder23.mongoAdminUser("localhost");
        builder32.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.mongoAdminPassword = "";
        builder38.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.importAllCollections(true);
        java.lang.String str47 = builder46.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.socketTimeout = (short) 0;
        boolean boolean57 = builder50.storeStatistics;
        builder50.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray61 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder46.setexcludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        java.lang.String str69 = mongoDBRiverDefinition68.mongoDb;
        int int70 = mongoDBRiverDefinition68.throttleSize;
        int int71 = mongoDBRiverDefinition68.getDEFAULT_BULK_ACTIONS();
        java.lang.String str72 = mongoDBRiverDefinition68.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject73 = mongoDBRiverDefinition68.mongoCollectionFilter;
        builder66.setmongoOplogFilter(basicDBObject73);
        builder32.setmongoOplogFilter(basicDBObject73);
        builder12.setmongoCollectionFilter(basicDBObject73);
        builder12.mongoSecondaryReadPreference = true;
        java.lang.String str79 = builder12.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder12.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder12.statisticsIndexName("");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1000 + "'", int71 == 1000);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition12.scriptType;
        int int15 = mongoDBRiverDefinition12.socketTimeout;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        docScoreSearchScript0.setNextScore((float) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoSecondaryReadPreference(true);
        builder6.includeCollection = "socket_timeout";
        builder6.setmongoAdminUser("collection");
        java.lang.String str17 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = builder6.build();
        int int19 = mongoDBRiverDefinition18.getThrottleSize();
        java.lang.String str20 = mongoDBRiverDefinition18.getUSER_FIELD();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str20);
        docScoreSearchScript0.setNextScore((float) 2000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.mongoSecondaryReadPreference(true);
        builder24.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder24.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.includeCollection("mongodb-1638820218299");
        builder34.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.mongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject41 = builder34.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.lang.String str43 = mongoDBRiverDefinition42.getUSER_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition42.getSCRIPT_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition42.getSCRIPT_TYPE_FIELD();
        java.lang.Object obj46 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition42);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter47 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings48 = serializedObjectSupporter47.deserializeObjectRiverSettings3();
        java.lang.String str49 = serializedObjectSupporter47.deserializeObjectString5();
        java.lang.String str50 = serializedObjectSupporter47.deserializeObjectString14();
        java.lang.String str51 = serializedObjectSupporter47.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings52 = serializedObjectSupporter47.deserializeObjectRiverSettings4();
        java.lang.String str53 = serializedObjectSupporter47.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings54 = serializedObjectSupporter47.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings55 = serializedObjectSupporter47.deserializeObjectRiverSettings8();
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) riverSettings55);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext57 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "user" + "'", str20, "user");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "user" + "'", str43, "user");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "script" + "'", str44, "script");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script_type" + "'", str45, "script_type");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(riverSettings48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mongodb-1638820218299" + "'", str49, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "_river" + "'", str50, "_river");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "mongodb-1638820218424" + "'", str51, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "_river" + "'", str53, "_river");
        org.junit.Assert.assertNotNull(riverSettings54);
        org.junit.Assert.assertNotNull(riverSettings55);
        org.junit.Assert.assertNotNull(obj56);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        builder0.setstatisticsTypeName("collection");
        builder0.disableIndexRefresh = true;
        java.lang.String str7 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger9 = mongoDBRiverDefinition8.getlogger();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition8.getisMongos();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(eSLogger9);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter2.deserializeObjectRiverSettings2();
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString6();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString11();
        java.lang.String str7 = serializedObjectSupporter2.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter2.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("sandbox", "mongodb-1638820218408", riverSettings8, scriptService9);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218299" + "'", str7, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.util.Set<java.lang.String> strSet3 = builder0.getincludeFields();
        java.util.Set<java.lang.String> strSet4 = builder0.getparentTypes();
        com.mongodb.BasicDBObject basicDBObject5 = builder0.mongoCollectionFilter;
        builder0.mongoLocalUser = "drop_collection";
        builder0.setdropCollection(true);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder0.mongoLocalUser;
        java.lang.Boolean boolean10 = builder0.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.getSERVERS_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = mongoDBRiverDefinition11.serializedObjectSupporter;
        java.lang.String str14 = mongoDBRiverDefinition11.getUSER_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition11.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "servers" + "'", str12, "servers");
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str16 = mongoDBRiverDefinition15.mongoDb;
        java.lang.String str17 = mongoDBRiverDefinition15.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int18 = mongoDBRiverDefinition15.throttleSize;
        boolean boolean19 = mongoDBRiverDefinition15.getskipInitialImport();
        boolean boolean20 = mongoDBRiverDefinition15.disableIndexRefresh;
        java.lang.String str21 = mongoDBRiverDefinition15.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition15.mongoCollectionFilter;
        builder10.setmongoOplogFilter(basicDBObject22);
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        java.lang.String str28 = mongoDBRiverDefinition27.mongoDb;
        java.lang.String str29 = mongoDBRiverDefinition27.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int30 = mongoDBRiverDefinition27.throttleSize;
        boolean boolean31 = mongoDBRiverDefinition27.getskipInitialImport();
        java.lang.String str32 = mongoDBRiverDefinition27.getScriptType();
        java.lang.String str33 = mongoDBRiverDefinition27.getSIZE_FIELD();
        java.lang.String str34 = mongoDBRiverDefinition27.statisticsIndexName;
        java.lang.String str35 = mongoDBRiverDefinition27.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder38.mongoSecondaryReadPreference(true);
        builder38.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder38.mongoDb("concurrent_bulk_requests");
        java.lang.String str49 = builder48.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject50 = builder48.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.mongoDb;
        java.lang.String str54 = mongoDBRiverDefinition52.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int55 = mongoDBRiverDefinition52.throttleSize;
        boolean boolean56 = mongoDBRiverDefinition52.getskipInitialImport();
        java.lang.String str57 = mongoDBRiverDefinition52.getScriptType();
        com.mongodb.BasicDBObject basicDBObject58 = mongoDBRiverDefinition52.mongoCollectionFilter;
        builder48.mongoCollectionFilter = basicDBObject58;
        org.elasticsearch.script.ExecutableScript executableScript60 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder61.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder65);
        builder65.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str71 = mongoDBRiverDefinition70.mongoDb;
        java.lang.String str72 = mongoDBRiverDefinition70.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int73 = mongoDBRiverDefinition70.throttleSize;
        boolean boolean74 = mongoDBRiverDefinition70.getskipInitialImport();
        boolean boolean75 = mongoDBRiverDefinition70.disableIndexRefresh;
        java.lang.String str76 = mongoDBRiverDefinition70.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition70.mongoCollectionFilter;
        builder65.setmongoOplogFilter(basicDBObject77);
        org.elasticsearch.script.ExecutableScript executableScript79 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.env.Environment environment81 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray82 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet83 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet83, scriptEngineServiceArray82);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService86 = new org.elasticsearch.script.ScriptService(settings5, environment81, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet83, resourceWatcherService85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_bulk_requests" + "'", str17, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "concurrent_bulk_requests" + "'", str29, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "size" + "'", str33, "size");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(basicDBObject50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "concurrent_bulk_requests" + "'", str54, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(executableScript60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "concurrent_bulk_requests" + "'", str72, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(executableScript79);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.riverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.common.settings.Settings settings3 = riverSettings2.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoSecondaryReadPreference(true);
        builder4.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder4.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder4.riverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        builder21.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoSecondaryReadPreference(true);
        builder21.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder21.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.includeCollection("mongodb-1638820218299");
        builder31.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.advancedTransformation(false);
        boolean boolean42 = builder41.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory43 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.mongoDb;
        java.lang.String str47 = mongoDBRiverDefinition45.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int48 = mongoDBRiverDefinition45.throttleSize;
        boolean boolean49 = mongoDBRiverDefinition45.getskipInitialImport();
        java.lang.String str50 = mongoDBRiverDefinition45.getScriptType();
        java.lang.String str51 = mongoDBRiverDefinition45.getSIZE_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition45.statisticsIndexName;
        java.lang.String str53 = mongoDBRiverDefinition45.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition45.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript55 = docScoreNativeScriptFactory43.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        builder41.mongoCollectionFilter = basicDBObject54;
        builder18.mongoOplogFilter = basicDBObject54;
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = null;
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings3, strMap59);
        org.elasticsearch.env.Environment environment61 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray62 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet63 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet63, scriptEngineServiceArray62);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService66 = new org.elasticsearch.script.ScriptService(settings3, environment61, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet63, resourceWatcherService65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(executableScript55);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218299" + "'", str5, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218264" + "'", str6, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        java.util.Set<java.lang.String> strSet11 = builder0.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.importAllCollections(true);
        builder0.isMongos = false;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str7 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        int int8 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "admin" + "'", str3, "admin");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_collection" + "'", str5, "include_collection");
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_timeout" + "'", str9, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoAdminPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.setdisableIndexRefresh(false);
        builder15.setmongoAdminPassword("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings25 = serializedObjectSupporter24.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings25, scriptService26);
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition27.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions29 = mongoDBRiverDefinition27.getMongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder15.mongoClientOptions(mongoClientOptions29);
        builder14.mongoClientOptions = mongoClientOptions29;
        builder14.importAllCollections = true;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(riverSettings25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        java.lang.String str17 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoAdminUser("localhost");
        builder19.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.Set<java.lang.String> strSet24 = builder22.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.mongoAdminPassword = "";
        builder25.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.importAllCollections(true);
        java.lang.String str34 = builder33.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        builder37.mongoAdminPassword = "";
        builder37.socketTimeout = (short) 0;
        boolean boolean44 = builder37.storeStatistics;
        builder37.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray48 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet49);
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        java.lang.String str56 = mongoDBRiverDefinition55.mongoDb;
        int int57 = mongoDBRiverDefinition55.throttleSize;
        int int58 = mongoDBRiverDefinition55.getDEFAULT_BULK_ACTIONS();
        java.lang.String str59 = mongoDBRiverDefinition55.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition55.mongoCollectionFilter;
        builder53.setmongoOplogFilter(basicDBObject60);
        builder19.setmongoOplogFilter(basicDBObject60);
        java.lang.String str63 = builder19.getscript();
        builder19.riverIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder19.storeStatistics(false);
        java.lang.String str68 = builder67.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        java.lang.String str71 = mongoDBRiverDefinition70.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1000 + "'", int58 == 1000);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "concurrent_bulk_requests" + "'", str71, "concurrent_bulk_requests");
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.mongoLocalPassword;
        java.lang.String str14 = mongoDBRiverDefinition12.indexName;
        boolean boolean15 = mongoDBRiverDefinition12.storeStatistics;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoAdminPassword;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean9 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str10 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str12 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_requests" + "'", str12, "concurrent_requests");
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean6 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean8 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean9 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean10 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(false);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject20 = builder18.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoAdminUser("mydatabase");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.scriptType("myindex");
        java.lang.String str26 = builder18.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        builder10.setmongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("mongodb-1638820218299");
        int int26 = builder23.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        builder27.socketTimeout = (short) 0;
        boolean boolean34 = builder27.storeStatistics;
        builder27.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray38 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet39);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("filter");
        boolean boolean47 = builder43.getskipInitialImport();
        builder43.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.socketTimeout = (short) 0;
        boolean boolean57 = builder50.storeStatistics;
        builder50.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray61 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder43.setparentTypes((java.util.Set<java.lang.String>) strSet62);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoAdminPassword("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder67.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        com.mongodb.BasicDBObject basicDBObject73 = mongoDBRiverDefinition72.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(basicDBObject73);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter7.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter7.deserializeObjectRiverSettings5();
        java.lang.String str10 = serializedObjectSupporter7.deserializeObjectString16();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter7;
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter7.deserializeObjectRiverSettings3();
        java.lang.String str13 = serializedObjectSupporter7.deserializeObjectString2();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_river" + "'", str13, "_river");
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        builder0.setsocketTimeout(0);
        builder0.setmongoSSLVerifyCertificate(true);
        int int17 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder0.initialTimestamp;
        java.lang.String str19 = builder0.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.util.Set<java.lang.String> strSet3 = builder0.getincludeFields();
        builder0.indexName = "mydatabase";
        com.mongodb.BasicDBObject basicDBObject6 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.throttleSize((int) (short) -1);
        java.util.Set<java.lang.String> strSet9 = builder0.excludeFields;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.script("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.statisticsIndexName("port");
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        builder15.mongoClientOptions = mongoClientOptions18;
        boolean boolean20 = builder15.mongoGridFS;
        builder15.setmongoDb("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder15.mongoAdminPassword("options");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder5.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoGridFS(false);
        java.lang.String str10 = builder9.getstatisticsIndexName();
        builder9.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.statisticsTypeName("socket_timeout");
        int int16 = builder12.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoUseSSL(true);
        boolean boolean19 = builder12.skipInitialImport;
        java.lang.String str20 = builder12.scriptType;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.Set<java.lang.String> strSet13 = builder8.getexcludeFields();
        builder8.mongoLocalPassword = "is_mongos";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str4 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "local" + "'", str4, "local");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        java.lang.Boolean boolean7 = builder0.getisMongos();
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        boolean boolean9 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.scriptType("concurrent_requests");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoUseSSL(false);
        builder0.skipInitialImport = false;
        builder0.setisMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject13 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.statisticsIndexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int23 = mongoDBRiverDefinition22.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 27017 + "'", int23 == 27017);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition13.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition13.getInitialTimestamp();
        java.lang.String str17 = mongoDBRiverDefinition13.mongoDb;
        java.lang.String str18 = mongoDBRiverDefinition13.getRiverName();
        java.lang.String str19 = mongoDBRiverDefinition13.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_bulk_requests" + "'", str17, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.mongoServers;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str11 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.getstoreStatistics();
        boolean boolean13 = mongoDBRiverDefinition1.getdropCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "password" + "'", str11, "password");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean7 = mongoDBRiverDefinition1.isStoreStatistics();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str9 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = mongoDBRiverDefinition1.serializedObjectSupporter;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(serializedObjectSupporter10);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean7 = mongoDBRiverDefinition1.advancedTransformation;
        int int8 = mongoDBRiverDefinition1.throttleSize;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        java.lang.Boolean boolean7 = builder0.getisMongos();
        builder0.setstatisticsTypeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter10.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter10.deserializeObjectRiverSettings8();
        builder0.serializedObjectSupporter = serializedObjectSupporter10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoGridFS(true);
        java.util.Set<java.lang.String> strSet16 = builder15.getincludeFields();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.setmongoAdminUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.mongoAdminPassword = "";
        builder10.socketTimeout = (short) 0;
        boolean boolean17 = builder10.storeStatistics;
        builder10.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray21 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.mongoSecondaryReadPreference(true);
        builder27.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder27.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.includeCollection("mongodb-1638820218299");
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder37.getmongoServers();
        builder26.mongoServers = serverAddressList40;
        builder0.setmongoServers(serverAddressList40);
        builder0.setmongoCollection("mongodb-1638820217755");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(serverAddressList40);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder0.mongoLocalUser;
        boolean boolean10 = builder0.getadvancedTransformation();
        builder0.socketTimeout = '4';
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings3();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter13.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        org.elasticsearch.common.settings.Settings settings18 = riverSettings17.globalSettings();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter21.deserializeObjectRiverSettings3();
        java.lang.String str23 = serializedObjectSupporter21.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter21.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings24, scriptService25);
        int int27 = mongoDBRiverDefinition26.getDEFAULT_BULK_ACTIONS();
        java.lang.String str28 = mongoDBRiverDefinition26.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition26.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        builder31.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoSecondaryReadPreference(true);
        builder31.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder31.mongoDb("concurrent_bulk_requests");
        java.lang.String str42 = builder41.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject43 = builder41.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.mongoDb;
        java.lang.String str47 = mongoDBRiverDefinition45.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int48 = mongoDBRiverDefinition45.throttleSize;
        boolean boolean49 = mongoDBRiverDefinition45.getskipInitialImport();
        java.lang.String str50 = mongoDBRiverDefinition45.getScriptType();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition45.mongoCollectionFilter;
        builder41.mongoCollectionFilter = basicDBObject51;
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.mongoCollectionFilter(basicDBObject51);
        builder54.mongoLocalPassword = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.statisticsTypeName("admin");
        builder54.advancedTransformation = false;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218299" + "'", str15, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_river" + "'", str23, "_river");
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bulk_size" + "'", str28, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(basicDBObject43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.mongoAdminPassword = "";
        builder25.socketTimeout = (short) 0;
        boolean boolean32 = builder25.storeStatistics;
        builder25.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray36 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder25.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder23.setparentTypes((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder12.includeFields((java.util.Set<java.lang.String>) strSet37);
        builder41.riverName = "script_type";
        boolean boolean44 = builder41.getmongoGridFS();
        java.lang.String str45 = builder41.getmongoLocalPassword();
        boolean boolean46 = builder41.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.gettypeName();
        int int10 = builder8.getsocketTimeout();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder8.getmongoServers();
        java.lang.String str12 = builder8.getscript();
        builder8.setconnectTimeout(10);
        builder8.mongoCollection = "parent_types";
        boolean boolean17 = builder8.getmongoGridFS();
        builder8.setdisableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean10 = mongoDBRiverDefinition1.getdropCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        java.lang.String str5 = mongoDBRiverDefinition4.getGRIDFS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition4.getimportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition4.getIS_MONGOS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition4.getSERVERS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getUSER_FIELD();
        boolean boolean10 = mongoDBRiverDefinition4.getdropCollection();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gridfs" + "'", str5, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "is_mongos" + "'", str7, "is_mongos");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition13.getDEFAULT_FLUSH_INTERVAL();
        int int17 = mongoDBRiverDefinition13.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean18 = mongoDBRiverDefinition13.isMongoGridFS();
        java.lang.String str19 = mongoDBRiverDefinition13.getINCLUDE_FIELDS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition13.scriptType;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_fields" + "'", str19, "include_fields");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.riverIndexName("skip_initial_import");
        java.lang.String str16 = builder0.gettypeName();
        java.lang.String str17 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.script("filter");
        boolean boolean22 = builder18.getskipInitialImport();
        builder18.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.mongoAdminPassword = "";
        builder25.socketTimeout = (short) 0;
        boolean boolean32 = builder25.storeStatistics;
        builder25.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray36 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder25.excludeFields((java.util.Set<java.lang.String>) strSet37);
        builder18.setparentTypes((java.util.Set<java.lang.String>) strSet37);
        java.lang.String str41 = builder18.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder18.mongoSecondaryReadPreference(false);
        boolean boolean44 = builder18.getdropCollection();
        builder18.mongoLocalPassword = "mongodb-1638820218449";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder47.mongoSecondaryReadPreference(true);
        builder47.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray56 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList57 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList57, serverAddressArray56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder47.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder47.riverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        builder63.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder63.mongoSecondaryReadPreference(true);
        builder63.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder63.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.includeCollection("mongodb-1638820218299");
        int int76 = builder73.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        builder77.mongoAdminPassword = "";
        builder77.socketTimeout = (short) 0;
        boolean boolean84 = builder77.storeStatistics;
        builder77.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray88 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder77.excludeFields((java.util.Set<java.lang.String>) strSet89);
        builder73.setincludeFields((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder62.parentTypes((java.util.Set<java.lang.String>) strSet89);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        builder0.includeFields = strSet89;
        builder0.setscript("script");
        java.lang.String str98 = builder0.getmongoLocalUser();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str4 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "password" + "'", str4, "password");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "initial_timestamp" + "'", str5, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "servers" + "'", str6, "servers");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getmongoGridFS();
        java.lang.String str2 = builder0.scriptType;
        builder0.importAllCollections = false;
        builder0.setmongoAdminPassword("is_mongos");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        java.lang.String str16 = mongoDBRiverDefinition13.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition13.getMongoServers();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        builder12.mongoSSLVerifyCertificate = true;
        builder12.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        builder26.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.mongoSecondaryReadPreference(true);
        builder26.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder26.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoCollectionFilter;
        builder12.mongoCollectionFilter = basicDBObject41;
        boolean boolean43 = builder12.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder12.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str46 = mongoDBRiverDefinition45.getIndexName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ssl_verify_certificate" + "'", str40, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218424" + "'", str3, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218363" + "'", str5, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218299" + "'", str7, "mongodb-1638820218299");
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "options" + "'", str10, "options");
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        builder12.mongoLocalPassword = "exclude_fields";
        java.lang.String str17 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.mongoSSLVerifyCertificate(false);
        boolean boolean20 = builder12.getmongoSecondaryReadPreference();
        builder12.setriverName("null.null");
        builder12.setmongoLocalUser("local");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218299" + "'", str17, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean13 = mongoDBRiverDefinition12.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition12.getSSL_CONNECTION_FIELD();
        int int15 = mongoDBRiverDefinition12.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition12.includeFields;
        java.lang.String str17 = mongoDBRiverDefinition12.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition12.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "skip_initial_import" + "'", str17, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ssl_verify_certificate" + "'", str18, "ssl_verify_certificate");
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        builder8.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean15 = mongoDBRiverDefinition14.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition14.getADMIN_DB_FIELD();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        builder12.mongoSSLVerifyCertificate = true;
        builder12.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.skipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject26 = builder12.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.mongoAdminPassword = "";
        builder28.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.importAllCollections(true);
        java.lang.String str37 = builder36.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoLocalPassword("");
        java.lang.String str40 = builder36.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder41.advancedTransformation(true);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory49 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.mongoDb;
        java.lang.String str53 = mongoDBRiverDefinition51.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int54 = mongoDBRiverDefinition51.throttleSize;
        boolean boolean55 = mongoDBRiverDefinition51.getskipInitialImport();
        java.lang.String str56 = mongoDBRiverDefinition51.getScriptType();
        java.lang.String str57 = mongoDBRiverDefinition51.getSIZE_FIELD();
        java.lang.String str58 = mongoDBRiverDefinition51.statisticsIndexName;
        java.lang.String str59 = mongoDBRiverDefinition51.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript61 = docScoreNativeScriptFactory49.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder48.mongoCollectionFilter(basicDBObject60);
        builder36.mongoCollectionFilter = basicDBObject60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder12.mongoCollectionFilter(basicDBObject60);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "concurrent_bulk_requests" + "'", str53, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "size" + "'", str57, "size");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(executableScript61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getScript();
        java.lang.String str9 = mongoDBRiverDefinition7.getBULK_TIMEOUT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition7.getINCLUDE_COLLECTION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition7.mongoSSLVerifyCertificate;
        java.lang.String str12 = mongoDBRiverDefinition7.getScript();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = mongoDBRiverDefinition7.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_timeout" + "'", str9, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
        org.junit.Assert.assertNotNull(byteSizeValue13);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject12 = builder10.getmongoOplogFilter();
        java.lang.String str13 = builder10.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.dropCollection(false);
        builder15.setincludeCollection("include_fields");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        java.lang.String str12 = builder8.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoAdminPassword = "";
        builder15.socketTimeout = (short) 0;
        boolean boolean22 = builder15.storeStatistics;
        builder15.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray26 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.excludeFields((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        builder30.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.mongoSecondaryReadPreference(true);
        builder30.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder30.mongoDb("concurrent_bulk_requests");
        java.lang.String str41 = builder40.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject42 = builder40.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.lang.String str45 = mongoDBRiverDefinition44.mongoDb;
        java.lang.String str46 = mongoDBRiverDefinition44.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int47 = mongoDBRiverDefinition44.throttleSize;
        boolean boolean48 = mongoDBRiverDefinition44.getskipInitialImport();
        java.lang.String str49 = mongoDBRiverDefinition44.getScriptType();
        com.mongodb.BasicDBObject basicDBObject50 = mongoDBRiverDefinition44.mongoCollectionFilter;
        builder40.mongoCollectionFilter = basicDBObject50;
        builder29.mongoCollectionFilter = basicDBObject50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder14.mongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.setthrottleSize(1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "concurrent_bulk_requests" + "'", str46, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.riverIndexName("skip_initial_import");
        builder10.setmongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218326" + "'", str4, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820217755" + "'", str7, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.mongoLocalPassword("bulk_timeout");
        java.util.Set<java.lang.String> strSet20 = builder12.parentTypes;
        boolean boolean21 = builder12.getadvancedTransformation();
        builder12.connectTimeout = 11000;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout(10);
        java.lang.String str7 = builder6.getriverName();
        builder6.setriverName("mydatabase.mycollection");
        java.lang.String str10 = builder6.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        builder3.mongoAdminPassword = "";
        builder3.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.importAllCollections(true);
        java.lang.String str12 = builder11.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoAdminPassword = "";
        builder15.socketTimeout = (short) 0;
        boolean boolean22 = builder15.storeStatistics;
        builder15.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray26 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.excludeFields((java.util.Set<java.lang.String>) strSet27);
        builder11.setexcludeFields((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.mongoDb("skip_initial_import");
        java.lang.String str35 = builder31.statisticsTypeName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        boolean boolean4 = builder0.getskipInitialImport();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        java.lang.String str23 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoLocalPassword("_river");
        builder25.mongoDb = "servers";
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        java.lang.String str15 = builder0.scriptType;
        boolean boolean16 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.typeName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        builder19.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.importAllCollections(true);
        java.lang.String str28 = builder27.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoLocalPassword("");
        boolean boolean31 = builder30.dropCollection;
        builder30.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        builder30.mongoClientOptions = mongoClientOptions34;
        java.lang.String str36 = builder30.getmongoAdminUser();
        java.lang.Boolean boolean37 = builder30.isMongos;
        builder30.setscript("disable_index_refresh");
        builder30.setriverIndexName("script.default_lang");
        builder30.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        builder44.mongoAdminPassword = "";
        builder44.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder44.importAllCollections(true);
        java.lang.String str53 = builder52.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.mongoLocalPassword("");
        boolean boolean56 = builder55.dropCollection;
        builder55.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        builder55.mongoClientOptions = mongoClientOptions59;
        java.lang.String str61 = builder55.getmongoAdminUser();
        java.lang.Boolean boolean62 = builder55.isMongos;
        builder55.setscript("disable_index_refresh");
        builder55.setriverIndexName("script.default_lang");
        builder55.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder55.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        java.lang.String str73 = mongoDBRiverDefinition72.mongoDb;
        java.lang.String str74 = mongoDBRiverDefinition72.mongoAdminPassword;
        java.lang.String str75 = mongoDBRiverDefinition72.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = mongoDBRiverDefinition72.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder70.mongoServers(serverAddressList76);
        builder30.mongoServers = serverAddressList76;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder0.mongoServers(serverAddressList76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder0.scriptType("null.null");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218299" + "'", str15, "mongodb-1638820218299");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(boolean62);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(serverAddressList76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition13.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition13.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "drop_collection" + "'", str16, "drop_collection");
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218264" + "'", str7, "mongodb-1638820218264");
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str20 = mongoDBRiverDefinition19.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.getScriptType();
        boolean boolean22 = mongoDBRiverDefinition19.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "import_all_collections" + "'", str20, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218299" + "'", str21, "mongodb-1638820218299");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean15 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.connectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoUseSSL(true);
        builder19.mongoCollection = "bulk_size";
        int int22 = builder19.getconnectTimeout();
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(basicDBObject23);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoAdminPassword("host");
        java.lang.String str15 = builder14.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.script("throttle_size");
        java.lang.String str18 = builder17.getstatisticsIndexName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        java.lang.String str5 = mongoDBRiverDefinition4.getGRIDFS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition4.getimportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition4.getIS_MONGOS_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition4.excludeFields;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gridfs" + "'", str5, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "is_mongos" + "'", str7, "is_mongos");
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter2 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter2.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings3, scriptService4);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter6.deserializeObjectRiverSettings3();
        java.lang.String str8 = serializedObjectSupporter6.deserializeObjectString5();
        java.lang.String str9 = serializedObjectSupporter6.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter6.deserializeObjectRiverSettings8();
        mongoDBRiverDefinition5.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str12 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int13 = mongoDBRiverDefinition5.getThrottleSize();
        boolean boolean14 = mongoDBRiverDefinition5.mongoSSLVerifyCertificate;
        java.lang.String str15 = mongoDBRiverDefinition5.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218299" + "'", str9, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "exclude_fields" + "'", str15, "exclude_fields");
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean8 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean9 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.statisticsTypeName("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.dropCollection(true);
        java.lang.String str19 = builder18.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "throttle_size" + "'", str19, "throttle_size");
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.getskipInitialImport();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition12.includeFields;
        java.lang.String str15 = mongoDBRiverDefinition12.getIncludeCollection();
        java.lang.String str16 = mongoDBRiverDefinition12.getSERVERS_FIELD();
        boolean boolean17 = mongoDBRiverDefinition12.getdisableIndexRefresh();
        java.lang.String str18 = mongoDBRiverDefinition12.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition12.getSTORE_STATISTICS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition12.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "servers" + "'", str16, "servers");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "advanced_transformation" + "'", str18, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "store_statistics" + "'", str19, "store_statistics");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoUseSSL(false);
        builder0.skipInitialImport = false;
        builder0.setisMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject13 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.typeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoLocalUser("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.statisticsIndexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.lang.String str25 = mongoDBRiverDefinition24.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "exclude_fields" + "'", str25, "exclude_fields");
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.Boolean boolean4 = mongoDBRiverDefinition2.isMongos;
        java.lang.String str5 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.riverName;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_bulk_requests" + "'", str5, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.Set<java.lang.String> strSet13 = builder8.getexcludeFields();
        java.lang.String str14 = builder8.getincludeCollection();
        int int15 = builder8.socketTimeout;
        org.bson.types.Binary binary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.initialTimestamp(binary16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter4.deserializeObjectRiverSettings3();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString5();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString14();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString15();
        java.lang.String str9 = serializedObjectSupporter4.deserializeObjectString4();
        java.lang.String str10 = serializedObjectSupporter4.deserializeObjectString1();
        java.lang.String str11 = serializedObjectSupporter4.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter4.deserializeObjectRiverSettings3();
        mongoDBRiverDefinition2.serializedObjectSupporter = serializedObjectSupporter4;
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter4.deserializeObjectRiverSettings4();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218299" + "'", str6, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218424" + "'", str8, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820217755" + "'", str10, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNotNull(riverSettings14);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218363" + "'", str6, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        java.lang.String str11 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder0.build();
        java.lang.String str13 = mongoDBRiverDefinition12.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getSSL_CONNECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getINCLUDE_FIELDS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition12.getIndexName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_bulk_requests" + "'", str13, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_fields" + "'", str15, "include_fields");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.setconnectTimeout(32);
        java.lang.String str7 = builder0.mongoLocalPassword;
        builder0.riverName = "bulk";
        java.lang.String str10 = builder0.getriverName();
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean15 = builder10.disableIndexRefresh;
        builder10.statisticsIndexName = "include_fields";
        boolean boolean18 = builder10.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.mongoAdminPassword = "";
        builder8.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.importAllCollections(true);
        builder16.setincludeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize((int) ' ');
        int int21 = builder20.throttleSize;
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests.null", (java.lang.Object) builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        builder23.mongoAdminPassword = "";
        builder23.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.importAllCollections(true);
        java.lang.String str32 = builder31.getmongoAdminPassword();
        java.lang.String str33 = builder31.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.lang.String str36 = mongoDBRiverDefinition35.mongoDb;
        java.lang.String str37 = mongoDBRiverDefinition35.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int38 = mongoDBRiverDefinition35.throttleSize;
        boolean boolean39 = mongoDBRiverDefinition35.getskipInitialImport();
        boolean boolean40 = mongoDBRiverDefinition35.disableIndexRefresh;
        java.lang.String str41 = mongoDBRiverDefinition35.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition35.mongoCollectionFilter;
        builder31.mongoCollectionFilter = basicDBObject42;
        java.lang.Object obj44 = docScoreSearchScript0.unwrap((java.lang.Object) builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        builder46.mongoAdminPassword = "";
        builder46.socketTimeout = (short) 0;
        boolean boolean53 = builder46.storeStatistics;
        builder46.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray57 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder46.excludeFields((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder60.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.lang.String str66 = mongoDBRiverDefinition65.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str67 = mongoDBRiverDefinition65.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition65.statisticsIndexName;
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) str68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "concurrent_bulk_requests" + "'", str37, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "import_all_collections" + "'", str66, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "script_type" + "'", str67, "script_type");
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        builder3.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.mongoSecondaryReadPreference(true);
        builder3.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.isMongos((java.lang.Boolean) true);
        boolean boolean18 = builder15.getadvancedTransformation();
        builder15.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.mongoLocalPassword("bulk_timeout");
        builder22.disableIndexRefresh = true;
        java.lang.Object obj25 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore(10.0f);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + true + "'", obj25, true);
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        builder8.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str15 = mongoDBRiverDefinition14.getDEFAULT_DB_HOST();
        java.lang.String str16 = mongoDBRiverDefinition14.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition14.scriptType;
        java.lang.String str18 = mongoDBRiverDefinition14.getMongoOplogNamespace();
        int int19 = mongoDBRiverDefinition14.getDEFAULT_DB_PORT();
        java.lang.String str20 = mongoDBRiverDefinition14.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition14.getTypeName();
        java.lang.String str22 = mongoDBRiverDefinition14.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "localhost" + "'", str15, "localhost");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "null.null" + "'", str18, "null.null");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 27017 + "'", int19 == 27017);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disable_index_refresh" + "'", str20, "disable_index_refresh");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "gridfs" + "'", str22, "gridfs");
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder8.statisticsTypeName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.script("options");
        java.lang.String str32 = builder29.mongoDb;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        builder10.setmongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("mongodb-1638820218299");
        int int26 = builder23.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        builder27.socketTimeout = (short) 0;
        boolean boolean34 = builder27.storeStatistics;
        builder27.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray38 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet39);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("filter");
        boolean boolean47 = builder43.getskipInitialImport();
        builder43.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.socketTimeout = (short) 0;
        boolean boolean57 = builder50.storeStatistics;
        builder50.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray61 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder43.setparentTypes((java.util.Set<java.lang.String>) strSet62);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder10.socketTimeout((int) (byte) 0);
        builder10.riverName = "mongodb-1638820217755";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder10.skipInitialImport(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder8.importAllCollections(true);
        builder8.mongoAdminUser = "concurrent_requests";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoSecondaryReadPreference(true);
        builder5.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder15.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        builder15.setmongoClientOptions(mongoClientOptions17);
        java.lang.String[] strArray29 = new java.lang.String[] { "filter", "socket_timeout", "local", "admin", "include_collection", "hi!", "password", "socket_timeout", "hi!", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder15.excludeFields = strSet30;
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.statisticsTypeName("disable_index_refresh");
        java.lang.String str36 = builder35.includeCollection;
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder35.getmongoServers();
        boolean boolean38 = builder35.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        int int8 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean9 = mongoDBRiverDefinition1.getstoreStatistics();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        int int6 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        boolean boolean10 = mongoDBRiverDefinition1.isMongoGridFS();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "admin" + "'", str3, "admin");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 60000 + "'", int11 == 60000);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoLocalUser;
        int int6 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.mongoServers;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNull(basicDBObject8);
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean7 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean8 = mongoDBRiverDefinition1.getdropCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        boolean boolean13 = builder12.getskipInitialImport();
        java.lang.String str14 = builder12.getmongoLocalPassword();
        int int15 = builder12.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("filter");
        boolean boolean21 = builder17.getskipInitialImport();
        builder17.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.mongoAdminPassword = "";
        builder24.socketTimeout = (short) 0;
        boolean boolean31 = builder24.storeStatistics;
        builder24.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray35 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder24.excludeFields((java.util.Set<java.lang.String>) strSet36);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder17.mongoCollection("localhost");
        java.lang.String str42 = builder41.getscriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList43 = builder41.mongoServers;
        builder12.mongoServers = serverAddressList43;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(serverAddressList43);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        boolean boolean7 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.storeStatistics(true);
        boolean boolean10 = builder0.getimportAllCollections();
        java.lang.String str11 = builder0.gettypeName();
        java.lang.String str12 = builder0.getmongoAdminPassword();
        java.lang.String str13 = builder0.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet14 = builder0.parentTypes;
        builder0.setmongoLocalUser("bulk_size");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.includeCollection;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "admin" + "'", str8, "admin");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getdropCollection();
        boolean boolean10 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_bulk_requests" + "'", str8, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.scriptType("options");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218326" + "'", str4, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.getskipInitialImport();
        java.lang.String str14 = mongoDBRiverDefinition12.getADMIN_DB_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.mongoLocalUser;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition12.excludeFields;
        java.lang.String str17 = mongoDBRiverDefinition12.getBULK_FIELD();
        boolean boolean18 = mongoDBRiverDefinition12.mongoGridFS;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk" + "'", str17, "bulk");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.riverIndexName("");
        int int15 = builder0.getsocketTimeout();
        int int16 = builder0.getsocketTimeout();
        java.util.Set<java.lang.String> strSet17 = builder0.getincludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        java.lang.Boolean boolean7 = builder0.getisMongos();
        builder0.setmongoDb("mongodb-1638820218449");
        int int10 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        java.util.Set<java.lang.String> strSet14 = builder11.getincludeFields();
        java.util.Set<java.lang.String> strSet15 = builder11.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.statisticsIndexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoSecondaryReadPreference(true);
        builder25.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder25.mongoDb("concurrent_bulk_requests");
        java.lang.String str36 = builder35.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        builder37.mongoAdminPassword = "";
        builder37.socketTimeout = (short) 0;
        boolean boolean44 = builder37.storeStatistics;
        builder37.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray48 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet49);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet49);
        builder11.setexcludeFields((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet49);
        java.lang.String str56 = builder55.getmongoLocalUser();
        builder55.setscriptType("servers");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.riverName = "localhost";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.mongoDb;
        java.lang.String str11 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int12 = mongoDBRiverDefinition9.throttleSize;
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        java.lang.String str14 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.statisticsIndexName;
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoSecondaryReadPreference(true);
        builder20.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.mongoDb("concurrent_bulk_requests");
        java.lang.String str31 = builder30.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject32 = builder30.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        java.lang.String str35 = mongoDBRiverDefinition34.mongoDb;
        java.lang.String str36 = mongoDBRiverDefinition34.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int37 = mongoDBRiverDefinition34.throttleSize;
        boolean boolean38 = mongoDBRiverDefinition34.getskipInitialImport();
        java.lang.String str39 = mongoDBRiverDefinition34.getScriptType();
        com.mongodb.BasicDBObject basicDBObject40 = mongoDBRiverDefinition34.mongoCollectionFilter;
        builder30.mongoCollectionFilter = basicDBObject40;
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.mongoCollectionFilter(basicDBObject40);
        builder43.mongoLocalUser = "";
        java.lang.String[] strArray92 = new java.lang.String[] { "collection", "store_statistics", "mydatabase.mycollection", "script_type", "parent_types", "hi!", "gridfs", "flush_interval", "db", "port", "include_fields", "local", "concurrent_bulk_requests.null", "size", "host", "concurrent_bulk_requests", "socket_timeout", "parent_types", "port", "_river", "mydatabase.mycollection", "options", "collection", "script.default_lang", "exclude_fields", "name", "socket_timeout", "", "concurrent_bulk_requests.null", "port", "is_mongos", "exclude_fields", "flush_interval", "script", "null.null", "mydatabase", "mongodb-1638820218408", "credentials", "store_statistics", "admin", "bulk", "mongodb-1638820218408", "user", "mongodb-1638820217755", "store_statistics", "include_collection" };
        java.util.LinkedHashSet<java.lang.String> strSet93 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet93, strArray92);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder43.parentTypes((java.util.Set<java.lang.String>) strSet93);
        boolean boolean96 = builder43.getdropCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList97 = builder43.getmongoServers();
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_bulk_requests" + "'", str11, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(basicDBObject32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "concurrent_bulk_requests" + "'", str36, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(serverAddressList97);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder0.getinitialTimestamp();
        builder0.storeStatistics = true;
        builder0.setscriptType("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoSecondaryReadPreference(true);
        builder19.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder19.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.includeCollection("mongodb-1638820218299");
        builder29.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.mongoSecondaryReadPreference(true);
        builder34.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder34.mongoDb("concurrent_bulk_requests");
        java.lang.String str45 = builder44.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject46 = builder44.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        java.lang.String str49 = mongoDBRiverDefinition48.mongoDb;
        java.lang.String str50 = mongoDBRiverDefinition48.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int51 = mongoDBRiverDefinition48.throttleSize;
        boolean boolean52 = mongoDBRiverDefinition48.getskipInitialImport();
        java.lang.String str53 = mongoDBRiverDefinition48.getScriptType();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition48.mongoCollectionFilter;
        builder44.mongoCollectionFilter = basicDBObject54;
        builder29.mongoCollectionFilter = basicDBObject54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder0.mongoCollectionFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(basicDBObject46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_bulk_requests" + "'", str50, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.env.Environment environment6 = null;
        org.elasticsearch.script.ScriptEngineService[] scriptEngineServiceArray7 = new org.elasticsearch.script.ScriptEngineService[] {};
        java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService> scriptEngineServiceSet8 = new java.util.LinkedHashSet<org.elasticsearch.script.ScriptEngineService>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet8, scriptEngineServiceArray7);
        org.elasticsearch.watcher.ResourceWatcherService resourceWatcherService10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.script.ScriptService scriptService11 = new org.elasticsearch.script.ScriptService(settings5, environment6, (java.util.Set<org.elasticsearch.script.ScriptEngineService>) scriptEngineServiceSet8, resourceWatcherService10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(scriptEngineServiceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218299" + "'", str3, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218326" + "'", str4, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertNotNull(riverSettings10);
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        java.lang.String str6 = builder5.scriptType;
        builder5.setscript("filter");
        boolean boolean9 = builder5.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        java.lang.String str28 = builder10.includeCollection;
        builder10.indexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder10.statisticsTypeName("script.default_lang");
        builder10.setstatisticsTypeName("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter35 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter35.deserializeObjectRiverSettings3();
        java.lang.String str37 = serializedObjectSupporter35.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings38 = serializedObjectSupporter35.deserializeObjectRiverSettings2();
        java.lang.String str39 = serializedObjectSupporter35.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings40 = serializedObjectSupporter35.deserializeObjectRiverSettings7();
        java.lang.String str41 = serializedObjectSupporter35.deserializeObjectString2();
        java.lang.String str42 = serializedObjectSupporter35.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings43 = serializedObjectSupporter35.deserializeObjectRiverSettings2();
        builder10.serializedObjectSupporter = serializedObjectSupporter35;
        org.elasticsearch.river.RiverSettings riverSettings45 = serializedObjectSupporter35.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "socket_timeout" + "'", str28, "socket_timeout");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(riverSettings36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb-1638820218299" + "'", str37, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "_river" + "'", str39, "_river");
        org.junit.Assert.assertNotNull(riverSettings40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_river" + "'", str41, "_river");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb-1638820218299" + "'", str42, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings43);
        org.junit.Assert.assertNotNull(riverSettings45);
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String str10 = builder0.riverName;
        builder0.setscriptType("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "script_type";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder0.initialTimestamp;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardTimestamp16);
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.mongoClientOptions = mongoClientOptions12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.mongoAdminPassword = "";
        builder17.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder17.importAllCollections(true);
        java.lang.String str26 = builder25.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        builder29.mongoAdminPassword = "";
        builder29.socketTimeout = (short) 0;
        boolean boolean36 = builder29.storeStatistics;
        builder29.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray40 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder29.excludeFields((java.util.Set<java.lang.String>) strSet41);
        builder25.setexcludeFields((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet41);
        builder10.setincludeFields((java.util.Set<java.lang.String>) strSet41);
        boolean boolean47 = builder10.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder10.socketTimeout((int) (short) 1);
        java.lang.String str50 = builder49.getmongoCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = builder49.getmongoServers();
        builder49.socketTimeout = 32;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(serverAddressList51);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218326" + "'", str5, "mongodb-1638820218326");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean5 = mongoDBRiverDefinition1.isDropCollection();
        int int6 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str8 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str9 = mongoDBRiverDefinition1.getScriptType();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        java.lang.String[] strArray24 = new java.lang.String[] { "filter", "socket_timeout", "local", "admin", "include_collection", "hi!", "password", "socket_timeout", "hi!", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder10.excludeFields = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.dropCollection(false);
        java.lang.String str30 = builder10.riverIndexName;
        builder10.mongoAdminPassword = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder10.script("port");
        builder10.setimportAllCollections(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.common.settings.Settings settings3 = riverSettings2.globalSettings();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(settings3);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoSSLVerifyCertificate(true);
        com.mongodb.BasicDBObject basicDBObject14 = builder13.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoLocalUser("");
        java.util.Set<java.lang.String> strSet17 = builder0.includeFields;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        builder8.mongoAdminPassword = "name";
        boolean boolean14 = builder8.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.socketTimeout((int) '#');
        builder8.typeName = "skip_initial_import";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder0.mongoLocalUser;
        boolean boolean10 = builder0.getadvancedTransformation();
        builder0.socketTimeout = '4';
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings3();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter13.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        org.elasticsearch.common.settings.Settings settings18 = riverSettings17.globalSettings();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter21.deserializeObjectRiverSettings3();
        java.lang.String str23 = serializedObjectSupporter21.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings24 = serializedObjectSupporter21.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings24, scriptService25);
        int int27 = mongoDBRiverDefinition26.getDEFAULT_BULK_ACTIONS();
        java.lang.String str28 = mongoDBRiverDefinition26.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition26.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        builder31.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder31.mongoSecondaryReadPreference(true);
        builder31.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder31.mongoDb("concurrent_bulk_requests");
        java.lang.String str42 = builder41.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject43 = builder41.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.mongoDb;
        java.lang.String str47 = mongoDBRiverDefinition45.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int48 = mongoDBRiverDefinition45.throttleSize;
        boolean boolean49 = mongoDBRiverDefinition45.getskipInitialImport();
        java.lang.String str50 = mongoDBRiverDefinition45.getScriptType();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition45.mongoCollectionFilter;
        builder41.mongoCollectionFilter = basicDBObject51;
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.mongoCollectionFilter(basicDBObject51);
        builder54.mongoLocalPassword = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.statisticsTypeName("admin");
        java.lang.String str59 = builder54.getstatisticsIndexName();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218299" + "'", str15, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_river" + "'", str23, "_river");
        org.junit.Assert.assertNotNull(riverSettings24);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bulk_size" + "'", str28, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(basicDBObject43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test4843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4843");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.mongoAdminPassword = "";
        builder8.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.importAllCollections(true);
        builder16.setincludeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize((int) ' ');
        int int21 = builder20.throttleSize;
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests.null", (java.lang.Object) builder20);
        docScoreSearchScript0.setNextScore((float) 60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder26.build();
        java.lang.String str31 = mongoDBRiverDefinition30.getDEFAULT_DB_HOST();
        java.lang.String str32 = mongoDBRiverDefinition30.getACTIONS_FIELD();
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) str32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder35.mongoSecondaryReadPreference(true);
        builder35.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder35.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.mongoAdminPassword("host");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory50 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.mongoDb;
        java.lang.String str54 = mongoDBRiverDefinition52.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int55 = mongoDBRiverDefinition52.throttleSize;
        boolean boolean56 = mongoDBRiverDefinition52.getskipInitialImport();
        java.lang.String str57 = mongoDBRiverDefinition52.getScriptType();
        java.lang.String str58 = mongoDBRiverDefinition52.getSIZE_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition52.statisticsIndexName;
        java.lang.String str60 = mongoDBRiverDefinition52.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject61 = mongoDBRiverDefinition52.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory50.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        builder63.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder63.mongoSecondaryReadPreference(true);
        builder63.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder63.mongoDb("concurrent_bulk_requests");
        java.lang.String str74 = builder73.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject75 = builder73.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        java.lang.String str78 = mongoDBRiverDefinition77.mongoDb;
        java.lang.String str79 = mongoDBRiverDefinition77.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int80 = mongoDBRiverDefinition77.throttleSize;
        boolean boolean81 = mongoDBRiverDefinition77.getskipInitialImport();
        java.lang.String str82 = mongoDBRiverDefinition77.getScriptType();
        com.mongodb.BasicDBObject basicDBObject83 = mongoDBRiverDefinition77.mongoCollectionFilter;
        builder73.mongoCollectionFilter = basicDBObject83;
        org.elasticsearch.script.ExecutableScript executableScript85 = docScoreNativeScriptFactory50.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder49.mongoOplogFilter(basicDBObject83);
        docScoreSearchScript0.setNextVar("mongodb-1638820218408", (java.lang.Object) builder86);
        java.lang.String str88 = builder86.script;
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "localhost" + "'", str31, "localhost");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "actions" + "'", str32, "actions");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "concurrent_bulk_requests" + "'", str54, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "size" + "'", str58, "size");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(basicDBObject75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "concurrent_bulk_requests" + "'", str79, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertNotNull(executableScript85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test4844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean6 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.mongoServers;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk" + "'", str7, "bulk");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl_verify_certificate" + "'", str8, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertNotNull(serverAddressList10);
    }

    @Test
    public void test4845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4845");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.riverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.importAllCollections(true);
        java.util.Set<java.lang.String> strSet19 = builder16.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoSecondaryReadPreference(true);
        builder20.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder30.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.mongoAdminPassword = "";
        builder34.socketTimeout = (short) 0;
        boolean boolean41 = builder34.storeStatistics;
        builder34.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray45 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder34.excludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoDb("localhost");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter55 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings56 = serializedObjectSupporter55.deserializeObjectRiverSettings3();
        java.lang.String str57 = serializedObjectSupporter55.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings58 = serializedObjectSupporter55.deserializeObjectRiverSettings6();
        org.elasticsearch.script.ScriptService scriptService59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "credentials", riverSettings58, scriptService59);
        int int61 = mongoDBRiverDefinition60.getDEFAULT_BULK_ACTIONS();
        java.lang.String str62 = mongoDBRiverDefinition60.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject63 = mongoDBRiverDefinition60.mongoCollectionFilter;
        builder52.mongoOplogFilter = basicDBObject63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder30.mongoOplogFilter(basicDBObject63);
        builder16.setmongoOplogFilter(basicDBObject63);
        builder16.setdropCollection(true);
        java.lang.String str69 = builder16.riverName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(riverSettings56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "_river" + "'", str57, "_river");
        org.junit.Assert.assertNotNull(riverSettings58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1000 + "'", int61 == 1000);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "bulk_size" + "'", str62, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test4846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4846");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218408" + "'", str3, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820217755" + "'", str6, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test4847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        builder10.setmongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("mongodb-1638820218299");
        int int26 = builder23.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        builder27.socketTimeout = (short) 0;
        boolean boolean34 = builder27.storeStatistics;
        builder27.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray38 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet39);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.script("filter");
        boolean boolean47 = builder43.getskipInitialImport();
        builder43.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.socketTimeout = (short) 0;
        boolean boolean57 = builder50.storeStatistics;
        builder50.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray61 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder43.setparentTypes((java.util.Set<java.lang.String>) strSet62);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder10.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder10.isMongos = true;
        builder10.setimportAllCollections(true);
        builder10.mongoLocalUser = "is_mongos";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test4848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4848");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        java.lang.String[] strArray24 = new java.lang.String[] { "filter", "socket_timeout", "local", "admin", "include_collection", "hi!", "password", "socket_timeout", "hi!", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder10.excludeFields = strSet25;
        builder10.statisticsIndexName = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder10.statisticsTypeName("mongodb-1638820218408");
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder10.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        builder33.scriptType = "admin";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4849");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218299" + "'", str2, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test4850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4850");
        java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("secondary_read_preference", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test4851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.typeName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder19.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        builder21.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder21.mongoSecondaryReadPreference(true);
        builder21.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder21.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.script("");
        builder33.setscriptType("mongodb-1638820218264");
        builder33.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.mongoSecondaryReadPreference(true);
        builder41.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder41.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = builder51.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.riverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        builder57.setdisableIndexRefresh(false);
        builder57.setmongoAdminPassword("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter66 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings67 = serializedObjectSupporter66.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings67, scriptService68);
        com.mongodb.BasicDBObject basicDBObject70 = mongoDBRiverDefinition69.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions71 = mongoDBRiverDefinition69.getMongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder57.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder54.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder33.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter77 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings78 = serializedObjectSupporter77.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService79 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings78, scriptService79);
        com.mongodb.BasicDBObject basicDBObject81 = mongoDBRiverDefinition80.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions82 = mongoDBRiverDefinition80.getMongoClientOptions();
        builder33.mongoClientOptions = mongoClientOptions82;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder19.mongoClientOptions(mongoClientOptions82);
        boolean boolean85 = builder84.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition87 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder86);
        java.lang.String str88 = mongoDBRiverDefinition87.mongoDb;
        java.lang.String str89 = mongoDBRiverDefinition87.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str90 = mongoDBRiverDefinition87.getMongoLocalUser();
        java.lang.String str91 = mongoDBRiverDefinition87.mongoAdminPassword;
        boolean boolean92 = mongoDBRiverDefinition87.disableIndexRefresh;
        java.lang.String str93 = mongoDBRiverDefinition87.getPORT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList94 = mongoDBRiverDefinition87.getMongoServers();
        builder84.setmongoServers(serverAddressList94);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(riverSettings67);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition69);
        org.junit.Assert.assertNull(basicDBObject70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(riverSettings78);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition80);
        org.junit.Assert.assertNull(basicDBObject81);
        org.junit.Assert.assertNotNull(mongoClientOptions82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "concurrent_bulk_requests" + "'", str89, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "port" + "'", str93, "port");
        org.junit.Assert.assertNotNull(serverAddressList94);
    }

    @Test
    public void test4852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4852");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition1.mongoServers;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertNotNull(serverAddressList8);
    }

    @Test
    public void test4853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4853");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("script", "advanced_transformation");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?advanced_transformation?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4854");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.mongoClientOptions = mongoClientOptions12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoCollection("");
        boolean boolean16 = builder15.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.riverName("mydatabase.mycollection");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter19 = builder15.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
    }

    @Test
    public void test4855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4855");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        builder0.mongoDb = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition5.getMongoServers();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition5.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition5.getTHROTTLE_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
    }

    @Test
    public void test4856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4856");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getSCRIPT_TYPE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.statisticsIndexName;
        java.lang.String str15 = mongoDBRiverDefinition12.getTHROTTLE_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition12.getSIZE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition12.mongoLocalPassword;
        java.lang.String str18 = mongoDBRiverDefinition12.getBULK_FIELD();
        boolean boolean19 = mongoDBRiverDefinition12.advancedTransformation;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk" + "'", str18, "bulk");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4857");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("concurrent_bulk_requests", "user", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?user?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4858");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        boolean boolean18 = builder12.getmongoSecondaryReadPreference();
        builder12.mongoAdminPassword = "mongodb-1638820218363";
        java.lang.String str21 = builder12.getriverName();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder12.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.storeStatistics(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter27 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str28 = serializedObjectSupporter27.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter27.deserializeObjectRiverSettings3();
        org.elasticsearch.common.settings.Settings settings30 = riverSettings29.globalSettings();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = builder31.build();
        java.lang.String str36 = mongoDBRiverDefinition35.getDEFAULT_DB_HOST();
        java.lang.String str37 = mongoDBRiverDefinition35.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str38 = mongoDBRiverDefinition35.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition35.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings40 = new org.elasticsearch.river.RiverSettings(settings30, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder26.mongoOplogFilter(basicDBObject39);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertNotNull(riverSettings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "localhost" + "'", str36, "localhost");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "include_collection" + "'", str37, "include_collection");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "script_type" + "'", str38, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4859");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getNAME_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getMongoLocalUser();
        java.lang.String str16 = mongoDBRiverDefinition12.getBULK_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition12.mongoServers;
        java.lang.String str18 = mongoDBRiverDefinition12.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean19 = mongoDBRiverDefinition12.dropCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_size" + "'", str16, "bulk_size");
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "skip_initial_import" + "'", str18, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4860");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.mongoAdminPassword = "";
        builder8.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.importAllCollections(true);
        builder16.setincludeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize((int) ' ');
        int int21 = builder20.throttleSize;
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests.null", (java.lang.Object) builder20);
        java.lang.Object obj24 = docScoreSearchScript0.unwrap((java.lang.Object) "advanced_transformation");
        docScoreSearchScript0.setNextScore((float) (short) 100);
        java.lang.Object obj28 = null;
        docScoreSearchScript0.setNextVar("bulk", obj28);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter30 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings31 = serializedObjectSupporter30.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings32 = serializedObjectSupporter30.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter30.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter30.deserializeObjectRiverSettings3();
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = riverSettings34.settings();
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource(strMap35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "advanced_transformation" + "'", obj24, "advanced_transformation");
        org.junit.Assert.assertNotNull(riverSettings31);
        org.junit.Assert.assertNotNull(riverSettings32);
        org.junit.Assert.assertNotNull(riverSettings33);
        org.junit.Assert.assertNotNull(riverSettings34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test4861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4861");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getScript();
        java.lang.String str9 = mongoDBRiverDefinition7.getBULK_TIMEOUT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoCollection();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_timeout" + "'", str9, "bulk_timeout");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder0.setmongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.riverName("admin");
        java.lang.String str17 = builder0.statisticsTypeName;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4863");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        java.lang.String str12 = builder8.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.connectTimeout((int) (byte) 100);
        builder8.setmongoLocalUser("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoSecondaryReadPreference(true);
        builder17.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder17.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.includeCollection("mongodb-1638820218299");
        builder27.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.mongoUseSSL(false);
        java.lang.String str34 = builder27.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder27.mongoAdminUser("localhost");
        builder36.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.util.Set<java.lang.String> strSet41 = builder39.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        builder42.mongoAdminPassword = "";
        builder42.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.importAllCollections(true);
        java.lang.String str51 = builder50.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        builder54.mongoAdminPassword = "";
        builder54.socketTimeout = (short) 0;
        boolean boolean61 = builder54.storeStatistics;
        builder54.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray65 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder54.excludeFields((java.util.Set<java.lang.String>) strSet66);
        builder50.setexcludeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder39.parentTypes((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        java.lang.String str73 = mongoDBRiverDefinition72.mongoDb;
        int int74 = mongoDBRiverDefinition72.throttleSize;
        int int75 = mongoDBRiverDefinition72.getDEFAULT_BULK_ACTIONS();
        java.lang.String str76 = mongoDBRiverDefinition72.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition72.mongoCollectionFilter;
        builder70.setmongoOplogFilter(basicDBObject77);
        builder36.setmongoOplogFilter(basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder36.mongoGridFS(false);
        java.lang.String str82 = builder36.getscript();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter85 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings86 = serializedObjectSupporter85.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService87 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition88 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings86, scriptService87);
        com.mongodb.BasicDBObject basicDBObject89 = mongoDBRiverDefinition88.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions90 = mongoDBRiverDefinition88.getMongoClientOptions();
        builder36.mongoClientOptions = mongoClientOptions90;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder8.mongoClientOptions(mongoClientOptions90);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1000 + "'", int75 == 1000);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(riverSettings86);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition88);
        org.junit.Assert.assertNull(basicDBObject89);
        org.junit.Assert.assertNotNull(mongoClientOptions90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test4864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        boolean boolean12 = builder11.dropCollection;
        builder11.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder11.mongoClientOptions = mongoClientOptions15;
        java.lang.String str17 = builder11.getmongoAdminUser();
        java.lang.Boolean boolean18 = builder11.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.socketTimeout(30000);
        java.lang.String str21 = builder11.riverIndexName;
        builder11.setmongoSSLVerifyCertificate(true);
        builder11.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        builder8.riverIndexName = "mongodb-1638820218387";
        builder8.setscriptType("db");
        builder8.mongoLocalUser = "password";
        java.lang.String str18 = builder8.includeCollection;
        builder8.typeName = "null.null";
        java.lang.String str21 = builder8.includeCollection;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218299" + "'", str18, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218299" + "'", str21, "mongodb-1638820218299");
    }

    @Test
    public void test4866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4866");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoSSLVerifyCertificate();
        java.lang.String str16 = mongoDBRiverDefinition13.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition13.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition13.mongoCollectionFilter;
        java.lang.String str19 = mongoDBRiverDefinition13.getCONCURRENT_REQUESTS_FIELD();
        int int20 = mongoDBRiverDefinition13.socketTimeout;
        boolean boolean21 = mongoDBRiverDefinition13.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_bulk_requests" + "'", str16, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_requests" + "'", str19, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str8 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str11 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 60000 + "'", int9 == 60000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gridfs" + "'", str11, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4868");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str11 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str12 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218264" + "'", str9, "mongodb-1638820218264");
        org.junit.Assert.assertNotNull(riverSettings10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820217755" + "'", str12, "mongodb-1638820217755");
    }

    @Test
    public void test4869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4869");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        boolean boolean3 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str4 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bulk_size" + "'", str4, "bulk_size");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "type" + "'", str6, "type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
    }

    @Test
    public void test4870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4870");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition4.getDEFAULT_BULK_SIZE();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition4.getMongoOplogFilter();
        boolean boolean7 = mongoDBRiverDefinition4.isDisableIndexRefresh();
        java.lang.String str8 = mongoDBRiverDefinition4.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getMongoAdminPassword();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter10.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter10.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter10.deserializeObjectRiverSettings4();
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter10.deserializeObjectRiverSettings8();
        java.lang.String str16 = serializedObjectSupporter10.deserializeObjectString8();
        java.lang.String str17 = serializedObjectSupporter10.deserializeObjectString6();
        mongoDBRiverDefinition4.serializedObjectSupporter = serializedObjectSupporter10;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_requests" + "'", str8, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertNotNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
        org.junit.Assert.assertNotNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
    }

    @Test
    public void test4871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4871");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str8 = builder5.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4872");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNotNull(riverSettings6);
    }

    @Test
    public void test4873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.script;
        java.lang.String str15 = mongoDBRiverDefinition13.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test4874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4874");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        boolean boolean21 = builder20.mongoUseSSL;
        builder20.setscript("null.null");
        java.util.Set<java.lang.String> strSet24 = builder20.parentTypes;
        java.lang.String str25 = builder20.getriverIndexName();
        java.lang.String str26 = builder20.riverName;
        org.bson.types.Binary binary27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.initialTimestamp(binary27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test4875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4875");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        boolean boolean5 = builder3.getdropCollection();
        builder3.isMongos = false;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder3.mongoServers;
        java.lang.String str9 = builder3.getscriptType();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder3.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        builder3.setmongoLocalUser("concurrent_requests");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(mongoClientOptions10);
    }

    @Test
    public void test4876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.getskipInitialImport();
        java.lang.String str14 = mongoDBRiverDefinition12.getADMIN_DB_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getSIZE_FIELD();
        boolean boolean16 = mongoDBRiverDefinition12.getdropCollection();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4877");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getThrottleSize();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean9 = mongoDBRiverDefinition1.advancedTransformation;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30000 + "'", int5 == 30000);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "db" + "'", str6, "db");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4878");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.Set<java.lang.String> strSet13 = builder8.getexcludeFields();
        java.lang.String str14 = builder8.getincludeCollection();
        int int15 = builder8.getthrottleSize();
        boolean boolean16 = builder8.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4879");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.riverIndexName("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test4880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4880");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.util.Set<java.lang.String> strSet3 = builder0.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        boolean boolean5 = mongoDBRiverDefinition4.importAllCollections;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test4881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        builder8.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str15 = mongoDBRiverDefinition14.getHOST_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition14.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition14.riverName;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disable_index_refresh" + "'", str16, "disable_index_refresh");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder0.mongoLocalUser;
        boolean boolean10 = builder0.getadvancedTransformation();
        builder0.socketTimeout = '4';
        builder0.setmongoAdminPassword("connect_timeout");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4883");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        java.lang.String str11 = builder0.statisticsIndexName;
        builder0.mongoSSLVerifyCertificate = false;
        java.lang.String str14 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "collection" + "'", str14, "collection");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        int int13 = builder10.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.mongoAdminPassword = "";
        builder14.socketTimeout = (short) 0;
        boolean boolean21 = builder14.storeStatistics;
        builder14.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray25 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet26);
        builder10.setincludeFields((java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder10.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        java.lang.String str33 = builder31.riverIndexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test4885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4886");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int3 = mongoDBRiverDefinition2.connectTimeout;
        java.lang.String str4 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.Boolean boolean5 = mongoDBRiverDefinition2.getisMongos();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "include_fields" + "'", str4, "include_fields");
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test4887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4887");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        java.lang.String str4 = builder0.indexName;
        builder0.mongoAdminUser = "servers";
        java.lang.Boolean boolean7 = builder0.getisMongos();
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        builder0.riverIndexName = "gridfs";
        java.util.Set<java.lang.String> strSet11 = builder0.parentTypes;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test4888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str8 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        int int9 = mongoDBRiverDefinition1.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.getMongoServers();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str12 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "localhost" + "'", str8, "localhost");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk_size" + "'", str12, "bulk_size");
    }

    @Test
    public void test4889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str8 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        int int9 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        int int11 = mongoDBRiverDefinition1.getConnectTimeout();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "localhost" + "'", str8, "localhost");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4890");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.advancedTransformation;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str10 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoUseSSL(false);
        int int9 = builder0.getsocketTimeout();
        builder0.advancedTransformation = true;
        java.lang.Boolean boolean12 = builder0.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.dropCollection(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4892");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean7 = mongoDBRiverDefinition1.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardTimestamp8);
    }

    @Test
    public void test4893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4893");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("concurrent_bulk_requests");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?concurrent_bulk_requests?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4894");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str15 = mongoDBRiverDefinition14.getDISABLE_INDEX_REFRESH_FIELD();
        int int16 = mongoDBRiverDefinition14.getDEFAULT_CONCURRENT_REQUESTS();
        int int17 = mongoDBRiverDefinition14.connectTimeout;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4895");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.mongoAdminPassword = "mongodb-1638820218299";
        builder12.mongoLocalPassword = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.riverName = "concurrent_bulk_requests";
        builder12.script = "credentials";
        builder12.socketTimeout = (short) 1;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4896");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        boolean boolean21 = builder20.mongoUseSSL;
        builder20.setscript("null.null");
        java.util.Set<java.lang.String> strSet24 = builder20.parentTypes;
        java.lang.String str25 = builder20.getriverIndexName();
        java.util.Set<java.lang.String> strSet26 = builder20.getincludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strSet26);
    }

    @Test
    public void test4897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject12 = builder10.getmongoOplogFilter();
        builder10.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean16 = builder10.getmongoGridFS();
        builder10.setmongoSSLVerifyCertificate(false);
        builder10.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        builder23.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.mongoSecondaryReadPreference(true);
        builder23.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder23.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.script("");
        builder35.setscriptType("mongodb-1638820218264");
        builder35.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        builder43.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder43.mongoSecondaryReadPreference(true);
        builder43.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder43.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp54 = builder53.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.riverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        builder59.setdisableIndexRefresh(false);
        builder59.setmongoAdminPassword("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter68 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings69 = serializedObjectSupporter68.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings69, scriptService70);
        com.mongodb.BasicDBObject basicDBObject72 = mongoDBRiverDefinition71.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions73 = mongoDBRiverDefinition71.getMongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder59.mongoClientOptions(mongoClientOptions73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder56.mongoClientOptions(mongoClientOptions73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder35.mongoClientOptions(mongoClientOptions73);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter79 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings80 = serializedObjectSupporter79.deserializeObjectRiverSettings4();
        org.elasticsearch.script.ScriptService scriptService81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "advanced_transformation", riverSettings80, scriptService81);
        com.mongodb.BasicDBObject basicDBObject83 = mongoDBRiverDefinition82.getMongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions84 = mongoDBRiverDefinition82.getMongoClientOptions();
        builder35.mongoClientOptions = mongoClientOptions84;
        builder10.mongoClientOptions = mongoClientOptions84;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(wildcardTimestamp54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(riverSettings69);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition71);
        org.junit.Assert.assertNull(basicDBObject72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(riverSettings80);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition82);
        org.junit.Assert.assertNull(basicDBObject83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
    }

    @Test
    public void test4898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4898");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str10 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.mongoGridFS;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4899");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.getExcludeFields();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
    }

    @Test
    public void test4900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.riverName;
        java.lang.String str6 = mongoDBRiverDefinition2.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
    }

    @Test
    public void test4901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.riverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoUseSSL(true);
        java.lang.String str16 = builder15.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoLocalPassword("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder15.build();
        boolean boolean20 = mongoDBRiverDefinition19.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test4902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4902");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("port", "mycollection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?mycollection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str4 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean6 = mongoDBRiverDefinition1.getdropCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "size" + "'", str4, "size");
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4904");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.advancedTransformation(false);
        boolean boolean21 = builder20.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str25 = mongoDBRiverDefinition24.mongoDb;
        java.lang.String str26 = mongoDBRiverDefinition24.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int27 = mongoDBRiverDefinition24.throttleSize;
        boolean boolean28 = mongoDBRiverDefinition24.getskipInitialImport();
        java.lang.String str29 = mongoDBRiverDefinition24.getScriptType();
        java.lang.String str30 = mongoDBRiverDefinition24.getSIZE_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition24.statisticsIndexName;
        java.lang.String str32 = mongoDBRiverDefinition24.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition24.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder20.mongoCollectionFilter = basicDBObject33;
        builder20.mongoCollection = "advanced_transformation";
        boolean boolean38 = builder20.getmongoGridFS();
        builder20.setriverName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder20.socketTimeout(8);
        java.lang.String str43 = builder20.indexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "concurrent_bulk_requests" + "'", str26, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "size" + "'", str30, "size");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test4905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoDb;
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.getIncludeFields();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test4906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4906");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test4907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        boolean boolean11 = builder10.getmongoSSLVerifyCertificate();
        builder10.settypeName("localhost");
        builder10.setmongoAdminUser("password");
        builder10.setscript("");
        builder10.throttleSize = (short) 10;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4908");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getNAME_FIELD();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition12.getMongoOplogFilter();
        java.lang.String str15 = mongoDBRiverDefinition12.getPARENT_TYPES_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition12.mongoLocalUser;
        boolean boolean17 = mongoDBRiverDefinition12.isDisableIndexRefresh();
        java.lang.String str18 = mongoDBRiverDefinition12.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "is_mongos" + "'", str18, "is_mongos");
    }

    @Test
    public void test4909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        builder12.storeStatistics = false;
        builder12.isMongos = false;
        boolean boolean17 = builder12.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4910");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.connectTimeout(10);
        boolean boolean7 = builder6.dropCollection;
        builder6.throttleSize = 1000;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder6.getinitialTimestamp();
        builder6.script = "user";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str15 = mongoDBRiverDefinition14.mongoDb;
        java.lang.String str16 = mongoDBRiverDefinition14.getSERVERS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition14.statisticsIndexName;
        boolean boolean18 = mongoDBRiverDefinition14.isDropCollection();
        int int19 = mongoDBRiverDefinition14.socketTimeout;
        boolean boolean20 = mongoDBRiverDefinition14.getmongoUseSSL();
        java.lang.String str21 = mongoDBRiverDefinition14.typeName;
        java.lang.String str22 = mongoDBRiverDefinition14.getADVANCED_TRANSFORMATION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = mongoDBRiverDefinition14.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder6.mongoServers(serverAddressList23);
        builder24.setmongoLocalPassword("myindex");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "servers" + "'", str16, "servers");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "advanced_transformation" + "'", str22, "advanced_transformation");
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4911");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getSCRIPT_TYPE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "actions" + "'", str14, "actions");
    }

    @Test
    public void test4912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4912");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test4913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        builder0.mongoDb = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.isMongos = true;
        boolean boolean8 = builder0.getmongoUseSSL();
        builder0.setriverName("_river");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test4914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4914");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.setmongoAdminUser("import_all_collections");
        boolean boolean10 = builder0.getdisableIndexRefresh();
        builder0.mongoDb = "include_collection";
        boolean boolean13 = builder0.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4915");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.mongoClientOptions;
        builder12.mongoLocalUser = "bulk_timeout";
        builder12.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.connectTimeout(10);
        builder22.setconnectTimeout(0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        java.lang.String[] strArray24 = new java.lang.String[] { "filter", "socket_timeout", "local", "admin", "include_collection", "hi!", "password", "socket_timeout", "hi!", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder10.excludeFields = strSet25;
        builder10.statisticsIndexName = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder10.statisticsTypeName("mongodb-1638820218408");
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder10.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder35.mongoSecondaryReadPreference(true);
        builder35.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray44 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList45 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList45, serverAddressArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder35.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.isMongos((java.lang.Boolean) true);
        boolean boolean50 = builder47.getadvancedTransformation();
        builder47.setmongoSSLVerifyCertificate(true);
        builder47.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        java.lang.String str57 = mongoDBRiverDefinition56.mongoDb;
        java.lang.String str58 = mongoDBRiverDefinition56.getADMIN_DB_FIELD();
        boolean boolean59 = mongoDBRiverDefinition56.skipInitialImport;
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = mongoDBRiverDefinition56.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder47.mongoServers(serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder33.mongoServers(serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder33.mongoDb("initial_timestamp");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(serverAddressArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "admin" + "'", str58, "admin");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test4917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.gettypeName();
        builder8.mongoAdminUser = "type";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4918");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition4.getCOLLECTION_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter7.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter7.deserializeObjectRiverSettings2();
        java.lang.String str10 = serializedObjectSupporter7.deserializeObjectString6();
        java.lang.String str11 = serializedObjectSupporter7.deserializeObjectString11();
        java.lang.String str12 = serializedObjectSupporter7.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter7.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter7.deserializeObjectRiverSettings6();
        java.lang.String str15 = serializedObjectSupporter7.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter7.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter7.deserializeObjectRiverSettings9();
        java.lang.String str18 = serializedObjectSupporter7.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter7.deserializeObjectRiverSettings5();
        mongoDBRiverDefinition4.serializedObjectSupporter = serializedObjectSupporter7;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218387" + "'", str11, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218299" + "'", str12, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings13);
        org.junit.Assert.assertNotNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218424" + "'", str15, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings16);
        org.junit.Assert.assertNotNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218424" + "'", str18, "mongodb-1638820218424");
        org.junit.Assert.assertNotNull(riverSettings19);
    }

    @Test
    public void test4919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4919");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoUseSSL(false);
        java.lang.String str9 = builder0.includeCollection;
        java.lang.String[] strArray44 = new java.lang.String[] { "credentials", "bulk_timeout", "mongodb-1638820218326", "localhost", "host", "bulk", "hi!", "bulk_size", "is_mongos", "script_type", "import_all_collections", "host", "ssl", "exclude_fields", "concurrent_bulk_requests", "advanced_transformation", "mongodb-1638820218326", "null.null", "filter", "host", "gridfs", "mongodb-1638820218326", "include_fields", "mongodb-1638820218387", ".scripts", "null.null", "", "ssl_verify_certificate", "name", "null.null", "bulk_timeout", "advanced_transformation", "throttle_size", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder0.excludeFields = strSet45;
        builder0.setmongoUseSSL(true);
        java.lang.String str50 = builder0.mongoAdminPassword;
        boolean boolean51 = builder0.mongoGridFS;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test4920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4920");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject17 = builder10.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder10.disableIndexRefresh(false);
        java.lang.String str21 = builder10.script;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4921");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        builder11.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoSecondaryReadPreference(true);
        builder11.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder21.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        builder21.setmongoClientOptions(mongoClientOptions23);
        java.lang.String[] strArray35 = new java.lang.String[] { "filter", "socket_timeout", "local", "admin", "include_collection", "hi!", "password", "socket_timeout", "hi!", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder21.excludeFields = strSet36;
        builder10.excludeFields = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder10.dropCollection(true);
        builder10.mongoDb = "mongodb-1638820218264";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        java.lang.String str17 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoAdminUser("localhost");
        builder19.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        boolean boolean23 = mongoDBRiverDefinition22.getmongoGridFS();
        java.lang.String str24 = mongoDBRiverDefinition22.getNAME_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter25 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str26 = serializedObjectSupporter25.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings27 = serializedObjectSupporter25.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings28 = serializedObjectSupporter25.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter25.deserializeObjectRiverSettings8();
        java.lang.String str30 = serializedObjectSupporter25.deserializeObjectString5();
        java.lang.String str31 = serializedObjectSupporter25.deserializeObjectString3();
        mongoDBRiverDefinition22.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str33 = mongoDBRiverDefinition22.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "name" + "'", str24, "name");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_river" + "'", str26, "_river");
        org.junit.Assert.assertNotNull(riverSettings27);
        org.junit.Assert.assertNotNull(riverSettings28);
        org.junit.Assert.assertNotNull(riverSettings29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218299" + "'", str30, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb-1638820218264" + "'", str31, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "disable_index_refresh" + "'", str33, "disable_index_refresh");
    }

    @Test
    public void test4923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4923");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.dropCollection(false);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder8.getmongoServers();
        java.lang.String str11 = builder8.riverIndexName;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4924");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        boolean boolean18 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str20 = mongoDBRiverDefinition19.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "concurrent_bulk_requests" + "'", str20, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "connect_timeout" + "'", str21, "connect_timeout");
    }

    @Test
    public void test4925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4925");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString14();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218363" + "'", str6, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
    }

    @Test
    public void test4926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4926");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str5 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4927");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder8.statisticsTypeName("include_fields");
        java.lang.String str30 = builder8.getriverName();
        builder8.mongoLocalPassword = "servers";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test4928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4928");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String str10 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4929");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(riverSettings5);
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNotNull(riverSettings8);
    }

    @Test
    public void test4930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4930");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder0.mongoClientOptions = mongoClientOptions15;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str18 = mongoDBRiverDefinition17.getCONNECT_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "connect_timeout" + "'", str18, "connect_timeout");
    }

    @Test
    public void test4931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4931");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.riverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("type");
        java.util.Set<java.lang.String> strSet17 = builder14.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoLocalUser("actions");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4932");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsIndexName();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.common.unit.TimeValue timeValue10 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoUseSSL();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder0.mongoClientOptions;
        java.lang.String str14 = builder0.getstatisticsIndexName();
        java.lang.String str15 = builder0.getmongoCollection();
        java.lang.String str16 = builder0.riverIndexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        boolean boolean16 = mongoDBRiverDefinition15.getmongoUseSSL();
        java.lang.String str17 = mongoDBRiverDefinition15.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "include_collection" + "'", str17, "include_collection");
    }

    @Test
    public void test4935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4935");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        boolean boolean4 = builder0.getskipInitialImport();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.mongoCollection("localhost");
        java.lang.String str25 = builder0.getstatisticsTypeName();
        boolean boolean26 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder27.mongoSecondaryReadPreference(true);
        builder27.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder27.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.includeCollection("mongodb-1638820218299");
        builder37.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoCollection("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.riverName = "localhost";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory57 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.mongoDb;
        java.lang.String str61 = mongoDBRiverDefinition59.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int62 = mongoDBRiverDefinition59.throttleSize;
        boolean boolean63 = mongoDBRiverDefinition59.getskipInitialImport();
        java.lang.String str64 = mongoDBRiverDefinition59.getScriptType();
        java.lang.String str65 = mongoDBRiverDefinition59.getSIZE_FIELD();
        java.lang.String str66 = mongoDBRiverDefinition59.statisticsIndexName;
        java.lang.String str67 = mongoDBRiverDefinition59.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject68 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript69 = docScoreNativeScriptFactory57.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder70);
        builder70.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder70.mongoSecondaryReadPreference(true);
        builder70.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder70.mongoDb("concurrent_bulk_requests");
        java.lang.String str81 = builder80.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject82 = builder80.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition84 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder83);
        java.lang.String str85 = mongoDBRiverDefinition84.mongoDb;
        java.lang.String str86 = mongoDBRiverDefinition84.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int87 = mongoDBRiverDefinition84.throttleSize;
        boolean boolean88 = mongoDBRiverDefinition84.getskipInitialImport();
        java.lang.String str89 = mongoDBRiverDefinition84.getScriptType();
        com.mongodb.BasicDBObject basicDBObject90 = mongoDBRiverDefinition84.mongoCollectionFilter;
        builder80.mongoCollectionFilter = basicDBObject90;
        org.elasticsearch.script.ExecutableScript executableScript92 = docScoreNativeScriptFactory57.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder50.mongoCollectionFilter(basicDBObject90);
        builder47.setmongoCollectionFilter(basicDBObject90);
        builder0.mongoCollectionFilter = basicDBObject90;
        boolean boolean96 = builder0.storeStatistics;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "concurrent_bulk_requests" + "'", str61, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "size" + "'", str65, "size");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(executableScript69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(basicDBObject82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "concurrent_bulk_requests" + "'", str86, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(basicDBObject90);
        org.junit.Assert.assertNotNull(executableScript92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test4936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "servers" + "'", str6, "servers");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "import_all_collections" + "'", str7, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test4937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4937");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218264" + "'", str5, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNotNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
    }

    @Test
    public void test4938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4938");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverIndexName();
        boolean boolean10 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str11 = mongoDBRiverDefinition1.getTYPE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "initial_timestamp" + "'", str7, "initial_timestamp");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "type" + "'", str11, "type");
    }

    @Test
    public void test4939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4939");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertNotNull(riverSettings3);
        org.junit.Assert.assertNotNull(riverSettings4);
        org.junit.Assert.assertNotNull(riverSettings5);
    }

    @Test
    public void test4940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        boolean boolean9 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoLocalUser("host");
        boolean boolean12 = builder11.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.socketTimeout((int) (short) 10);
        builder14.setdisableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4941");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder0.statisticsTypeName = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.connectTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoUseSSL(true);
        builder0.mongoAdminUser = "mycollection";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.typeName;
        java.lang.String str13 = mongoDBRiverDefinition11.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition11.typeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4943");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        boolean boolean9 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoLocalUser("host");
        java.lang.String str12 = builder11.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str15 = mongoDBRiverDefinition14.mongoDb;
        java.lang.String str16 = mongoDBRiverDefinition14.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition14.getMongoLocalUser();
        java.lang.String str18 = mongoDBRiverDefinition14.mongoAdminPassword;
        java.lang.String str19 = mongoDBRiverDefinition14.getSOCKET_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.mongoOplogFilter(basicDBObject20);
        java.util.Set<java.lang.String> strSet22 = builder11.getparentTypes();
        builder11.mongoLocalUser = "flush_interval";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_bulk_requests" + "'", str16, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "socket_timeout" + "'", str19, "socket_timeout");
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
    }

    @Test
    public void test4944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4944");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        java.lang.String str11 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoLocalUser("initial_timestamp");
        java.lang.String str14 = builder13.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoLocalPassword("mydatabase.mycollection");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4945");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getNAME_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getMongoLocalUser();
        java.lang.String str16 = mongoDBRiverDefinition12.getBULK_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition12.mongoServers;
        java.lang.String str18 = mongoDBRiverDefinition12.getSOCKET_TIMEOUT();
        int int19 = mongoDBRiverDefinition12.throttleSize;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_size" + "'", str16, "bulk_size");
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "socket_timeout" + "'", str18, "socket_timeout");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4946");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoClientOptions(mongoClientOptions12);
        com.mongodb.BasicDBObject basicDBObject14 = builder8.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test4947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str5 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getScriptType();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter8.deserializeObjectRiverSettings3();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        boolean boolean14 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean15 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str16 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disable_index_refresh" + "'", str5, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218299" + "'", str10, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "port" + "'", str16, "port");
    }

    @Test
    public void test4948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.skipInitialImport(false);
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoSecondaryReadPreference(true);
        builder15.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder15.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.mongoAdminPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.lang.String str32 = mongoDBRiverDefinition31.mongoDb;
        java.lang.String str33 = mongoDBRiverDefinition31.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int34 = mongoDBRiverDefinition31.throttleSize;
        boolean boolean35 = mongoDBRiverDefinition31.getskipInitialImport();
        boolean boolean36 = mongoDBRiverDefinition31.disableIndexRefresh;
        java.lang.String str37 = mongoDBRiverDefinition31.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition31.mongoCollectionFilter;
        builder25.mongoCollectionFilter = basicDBObject38;
        builder8.setmongoOplogFilter(basicDBObject38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder41.mongoSecondaryReadPreference(true);
        builder41.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray50 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList51 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList51, serverAddressArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder41.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList51);
        boolean boolean54 = builder53.getskipInitialImport();
        builder53.mongoDb = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        builder57.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.mongoSecondaryReadPreference(true);
        builder57.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder57.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder69.statisticsTypeName("socket_timeout");
        builder69.setmongoLocalUser("host");
        com.mongodb.BasicDBObject basicDBObject75 = builder69.mongoCollectionFilter;
        builder53.setmongoOplogFilter(basicDBObject75);
        builder8.mongoOplogFilter = basicDBObject75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder8.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.mongoDb("script");
        builder79.setmongoGridFS(true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "concurrent_bulk_requests" + "'", str33, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(serverAddressArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test4949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4949");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getdropCollection();
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str10 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "servers" + "'", str6, "servers");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4950");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.getskipInitialImport();
        java.lang.String str14 = mongoDBRiverDefinition12.getADMIN_DB_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.mongoLocalUser;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition12.getExcludeFields();
        java.lang.String str17 = mongoDBRiverDefinition12.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test4951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4951");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        boolean boolean8 = mongoDBRiverDefinition1.getdropCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "credentials" + "'", str6, "credentials");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test4952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4952");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getUSER_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "user" + "'", str13, "user");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
    }

    @Test
    public void test4953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4953");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.mongoClientOptions = mongoClientOptions12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoCollection("");
        boolean boolean16 = builder15.mongoSSLVerifyCertificate;
        boolean boolean17 = builder15.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.advancedTransformation(true);
        builder19.mongoUseSSL = false;
        boolean boolean22 = builder19.getadvancedTransformation();
        java.lang.String str23 = builder19.includeCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "socket_timeout" + "'", str23, "socket_timeout");
    }

    @Test
    public void test4954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4954");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str12 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 60000 + "'", int8 == 60000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "collection" + "'", str9, "collection");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_requests" + "'", str12, "concurrent_requests");
    }

    @Test
    public void test4955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        boolean boolean11 = builder10.getmongoSSLVerifyCertificate();
        builder10.settypeName("localhost");
        builder10.setmongoAdminUser("password");
        boolean boolean16 = builder10.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.dropCollection(true);
        java.lang.String str19 = builder10.mongoLocalUser;
        builder10.mongoAdminPassword = "archive-stats";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test4956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoSecondaryReadPreference(true);
        builder6.setmongoUseSSL(false);
        java.lang.String str15 = builder6.includeCollection;
        java.lang.String[] strArray50 = new java.lang.String[] { "credentials", "bulk_timeout", "mongodb-1638820218326", "localhost", "host", "bulk", "hi!", "bulk_size", "is_mongos", "script_type", "import_all_collections", "host", "ssl", "exclude_fields", "concurrent_bulk_requests", "advanced_transformation", "mongodb-1638820218326", "null.null", "filter", "host", "gridfs", "mongodb-1638820218326", "include_fields", "mongodb-1638820218387", ".scripts", "null.null", "", "ssl_verify_certificate", "name", "null.null", "bulk_timeout", "advanced_transformation", "throttle_size", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder6.excludeFields = strSet51;
        builder6.mongoLocalPassword = "filter";
        org.elasticsearch.common.settings.Settings settings56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        builder57.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.mongoSecondaryReadPreference(true);
        builder57.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder57.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str71 = mongoDBRiverDefinition70.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.BasicDBObject basicDBObject72 = mongoDBRiverDefinition70.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings73 = new org.elasticsearch.river.RiverSettings(settings56, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject72);
        builder6.mongoOplogFilter = basicDBObject72;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder0.mongoCollectionFilter(basicDBObject72);
        org.bson.types.BSONTimestamp bSONTimestamp76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.initialTimestamp(bSONTimestamp76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ssl_verify_certificate" + "'", str71, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test4957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4957");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.mongoAdminPassword = "";
        builder8.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.importAllCollections(true);
        builder16.setincludeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize((int) ' ');
        int int21 = builder20.throttleSize;
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests.null", (java.lang.Object) builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.mongoAdminPassword = "";
        builder24.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.importAllCollections(true);
        java.lang.String str33 = builder32.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.scriptType("mongodb-1638820218408");
        docScoreSearchScript0.setNextVar("mydatabase", (java.lang.Object) "mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder38.mongoSecondaryReadPreference(true);
        builder38.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder38.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder48.initialTimestamp;
        docScoreSearchScript0.setNextVar(".scripts", (java.lang.Object) builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.mongoAdminPassword("bulk");
        boolean boolean53 = builder48.mongoSSLVerifyCertificate;
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test4958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder0.setmongoClientOptions(mongoClientOptions11);
        builder0.setscript("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.statisticsTypeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.scriptType("mongodb-1638820218387");
        builder20.dropCollection = true;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4959");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "local");
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.mongoAdminPassword = "";
        builder8.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.importAllCollections(true);
        builder16.setincludeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize((int) ' ');
        int int21 = builder20.throttleSize;
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests.null", (java.lang.Object) builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.mongoAdminPassword = "";
        builder24.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.importAllCollections(true);
        java.lang.String str33 = builder32.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.scriptType("mongodb-1638820218408");
        docScoreSearchScript0.setNextVar("mydatabase", (java.lang.Object) "mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder38.mongoSecondaryReadPreference(true);
        builder38.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder38.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = builder48.initialTimestamp;
        docScoreSearchScript0.setNextVar(".scripts", (java.lang.Object) builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.mongoAdminPassword("bulk");
        boolean boolean53 = builder48.getimportAllCollections();
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder48.mongoServers;
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "local" + "'", obj2, "local");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serverAddressList54);
    }

    @Test
    public void test4960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        builder12.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.script("include_fields");
        builder12.setindexName("mongodb-1638820218299");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4961");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        builder0.setstatisticsTypeName("collection");
        builder0.disableIndexRefresh = true;
        java.lang.String str7 = builder0.getstatisticsIndexName();
        java.lang.String str8 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoCollection("initial_timestamp");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4962");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str4 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "password" + "'", str4, "password");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteSizeValue7);
    }

    @Test
    public void test4963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4963");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("actions", "mydatabase.mycollection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?mydatabase.mycollection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4964");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getIncludeCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test4965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4965");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.dropCollection(false);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.mongoAdminPassword = "";
        builder7.socketTimeout = (short) 0;
        boolean boolean14 = builder7.storeStatistics;
        builder7.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray18 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet19);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet19);
        java.util.Set<java.lang.String> strSet23 = builder0.excludeFields;
        builder0.dropCollection = false;
        builder0.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp28 = builder0.getinitialTimestamp();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(wildcardTimestamp28);
    }

    @Test
    public void test4966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoGridFS(true);
        builder8.mongoAdminUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.statisticsIndexName("mydatabase.mycollection");
        java.util.Set<java.lang.String> strSet17 = builder8.getparentTypes();
        java.lang.String str18 = builder8.riverIndexName;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test4967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4967");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str5 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getScriptType();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter8.deserializeObjectRiverSettings3();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter8.deserializeObjectRiverSettings1();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter8;
        int int14 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean15 = mongoDBRiverDefinition1.isAdvancedTransformation();
        boolean boolean16 = mongoDBRiverDefinition1.disableIndexRefresh;
        boolean boolean17 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disable_index_refresh" + "'", str5, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218299" + "'", str10, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings11);
        org.junit.Assert.assertNotNull(riverSettings12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 30000 + "'", int14 == 30000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean9 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "initial_timestamp" + "'", str10, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_bulk_requests" + "'", str11, "concurrent_bulk_requests");
    }

    @Test
    public void test4969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean6 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean8 = mongoDBRiverDefinition1.getimportAllCollections();
        boolean boolean9 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean10 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test4970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4970");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoSSLVerifyCertificate(false);
        builder5.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoCollection("options");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4971");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        builder8.setincludeCollection("mongodb-1638820218299");
        java.lang.String str11 = builder8.riverName;
        builder8.riverIndexName = "mongodb-1638820218387";
        builder8.setscriptType("db");
        builder8.mongoCollection = "";
        builder8.mongoAdminPassword = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.importAllCollections(false);
        builder8.mongoAdminPassword = "import_all_collections";
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4972");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str4 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoUseSSL();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "size" + "'", str4, "size");
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4973");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        int int4 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        boolean boolean5 = mongoDBRiverDefinition1.mongoUseSSL;
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str9 = mongoDBRiverDefinition1.getScriptType();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4974");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(true);
        builder0.mongoDb = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoCollection("");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4975");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strSet3);
    }

    @Test
    public void test4976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.mongoAdminPassword = "";
        builder12.socketTimeout = (short) 0;
        boolean boolean19 = builder12.storeStatistics;
        builder12.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet24);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = builder10.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.mongoLocalUser = "servers";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
    }

    @Test
    public void test4977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        java.lang.String str12 = builder8.getstatisticsTypeName();
        builder8.connectTimeout = (short) 1;
        boolean boolean15 = builder8.getskipInitialImport();
        builder8.setdropCollection(true);
        builder8.setindexName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4978");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNotNull(riverSettings1);
        org.junit.Assert.assertNotNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218299" + "'", str5, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218408" + "'", str7, "mongodb-1638820218408");
        org.junit.Assert.assertNotNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertNotNull(riverSettings10);
    }

    @Test
    public void test4979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4979");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoSecondaryReadPreference(true);
        builder15.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder15.mongoDb("concurrent_bulk_requests");
        java.lang.String str26 = builder25.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject27 = builder25.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        java.lang.String str30 = mongoDBRiverDefinition29.mongoDb;
        java.lang.String str31 = mongoDBRiverDefinition29.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int32 = mongoDBRiverDefinition29.throttleSize;
        boolean boolean33 = mongoDBRiverDefinition29.getskipInitialImport();
        java.lang.String str34 = mongoDBRiverDefinition29.getScriptType();
        com.mongodb.BasicDBObject basicDBObject35 = mongoDBRiverDefinition29.mongoCollectionFilter;
        builder25.mongoCollectionFilter = basicDBObject35;
        builder14.mongoCollectionFilter = basicDBObject35;
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        builder14.mongoClientOptions = mongoClientOptions38;
        builder14.setsocketTimeout(8);
        boolean boolean42 = builder14.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder14.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str46 = mongoDBRiverDefinition45.getMongoAdminUser();
        java.lang.String str47 = mongoDBRiverDefinition45.getMongoCollection();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(basicDBObject27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "concurrent_bulk_requests" + "'", str31, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test4980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean5 = mongoDBRiverDefinition1.isDropCollection();
        int int6 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str8 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str9 = mongoDBRiverDefinition1.getScriptType();
        boolean boolean10 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        java.lang.String str10 = builder8.statisticsTypeName;
        boolean boolean11 = builder8.getdisableIndexRefresh();
        builder8.mongoAdminPassword = "name";
        boolean boolean14 = builder8.mongoGridFS;
        builder8.settypeName("");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4982");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        java.lang.String str17 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoAdminUser("localhost");
        builder19.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        boolean boolean23 = mongoDBRiverDefinition22.getmongoGridFS();
        java.lang.String str24 = mongoDBRiverDefinition22.getNAME_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition22.mongoCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "name" + "'", str24, "name");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test4983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4983");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoCollectionFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoSecondaryReadPreference(true);
        builder13.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.includeCollection("mongodb-1638820218299");
        builder23.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.mongoUseSSL(false);
        java.lang.String str30 = builder23.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder23.mongoAdminUser("localhost");
        builder32.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.mongoAdminPassword = "";
        builder38.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.importAllCollections(true);
        java.lang.String str47 = builder46.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.mongoAdminPassword = "";
        builder50.socketTimeout = (short) 0;
        boolean boolean57 = builder50.storeStatistics;
        builder50.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray61 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder46.setexcludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        java.lang.String str69 = mongoDBRiverDefinition68.mongoDb;
        int int70 = mongoDBRiverDefinition68.throttleSize;
        int int71 = mongoDBRiverDefinition68.getDEFAULT_BULK_ACTIONS();
        java.lang.String str72 = mongoDBRiverDefinition68.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject73 = mongoDBRiverDefinition68.mongoCollectionFilter;
        builder66.setmongoOplogFilter(basicDBObject73);
        builder32.setmongoOplogFilter(basicDBObject73);
        builder12.setmongoCollectionFilter(basicDBObject73);
        builder12.mongoSecondaryReadPreference = true;
        java.lang.String str79 = builder12.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder12.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str83 = mongoDBRiverDefinition82.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1000 + "'", int71 == 1000);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "parent_types" + "'", str83, "parent_types");
    }

    @Test
    public void test4984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4984");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        int int3 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str4 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean6 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "password" + "'", str4, "password");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
    }

    @Test
    public void test4985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4985");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str3 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int4 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean5 = mongoDBRiverDefinition1.isDropCollection();
        boolean boolean6 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str7 = mongoDBRiverDefinition1.indexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str9 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "concurrent_bulk_requests" + "'", str3, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test4986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        builder10.setmongoAdminPassword("bulk_timeout");
        java.lang.String str16 = builder10.getincludeCollection();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "socket_timeout" + "'", str16, "socket_timeout");
    }

    @Test
    public void test4987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        builder10.setmongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.isMongos((java.lang.Boolean) false);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder18.setmongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.setstatisticsIndexName("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = mongoDBRiverDefinition24.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(wildcardTimestamp25);
    }

    @Test
    public void test4988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.includeCollection("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.statisticsTypeName("socket_timeout");
        int int16 = builder12.socketTimeout;
        java.lang.String str17 = builder12.mongoAdminPassword;
        builder12.setdisableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test4989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        builder8.setincludeCollection("is_mongos");
        builder8.isMongos = true;
        java.lang.String str16 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter17 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter17.deserializeObjectRiverSettings3();
        java.lang.String str19 = serializedObjectSupporter17.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings20 = serializedObjectSupporter17.deserializeObjectRiverSettings2();
        java.lang.String str21 = serializedObjectSupporter17.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter17.deserializeObjectRiverSettings7();
        java.lang.String str23 = serializedObjectSupporter17.deserializeObjectString2();
        java.lang.String str24 = serializedObjectSupporter17.deserializeObjectString5();
        builder8.serializedObjectSupporter = serializedObjectSupporter17;
        java.lang.String str26 = serializedObjectSupporter17.deserializeObjectString7();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(riverSettings18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb-1638820218299" + "'", str19, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(riverSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertNotNull(riverSettings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_river" + "'", str23, "_river");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb-1638820218299" + "'", str24, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb-1638820218326" + "'", str26, "mongodb-1638820218326");
    }

    @Test
    public void test4990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4990");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        builder0.setmongoAdminUser("collection");
        java.util.Set<java.lang.String> strSet11 = builder0.getincludeFields();
        boolean boolean12 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoCollection("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.script("mongodb-1638820218363");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str22 = mongoDBRiverDefinition21.mongoDb;
        java.lang.String str23 = mongoDBRiverDefinition21.getADMIN_DB_FIELD();
        boolean boolean24 = mongoDBRiverDefinition21.skipInitialImport;
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = mongoDBRiverDefinition21.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.mongoServers(serverAddressList25);
        builder26.setimportAllCollections(false);
        builder26.setincludeCollection("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.mongoSecondaryReadPreference(false);
        builder32.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.includeCollection("mongodb-1638820218264");
        boolean boolean37 = builder36.mongoSSLVerifyCertificate;
        java.lang.String str38 = builder36.getmongoAdminUser();
        builder36.setmongoLocalUser("password");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "admin" + "'", str23, "admin");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test4992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4992");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder8.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str13 = mongoDBRiverDefinition12.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition12.excludeFields;
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition12.getParentTypes();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test4993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.script("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoSecondaryReadPreference(true);
        builder5.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder15.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        builder15.setmongoClientOptions(mongoClientOptions17);
        java.lang.String[] strArray29 = new java.lang.String[] { "filter", "socket_timeout", "local", "admin", "include_collection", "hi!", "password", "socket_timeout", "hi!", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder15.excludeFields = strSet30;
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet30);
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = builder0.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str36 = mongoDBRiverDefinition35.getTypeName();
        java.lang.String str37 = mongoDBRiverDefinition35.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test4994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4994");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        boolean boolean7 = builder0.storeStatistics;
        builder0.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray11 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoSecondaryReadPreference(true);
        builder17.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder17.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.includeCollection("mongodb-1638820218299");
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder27.getmongoServers();
        builder16.mongoServers = serverAddressList30;
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder16.mongoClientOptions(mongoClientOptions32);
        boolean boolean34 = builder33.skipInitialImport;
        builder33.setindexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        java.lang.String str38 = mongoDBRiverDefinition37.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean39 = mongoDBRiverDefinition37.isAdvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "import_all_collections" + "'", str38, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test4995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.mongoDb;
        boolean boolean3 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str4 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str6 = mongoDBRiverDefinition1.script;
        boolean boolean7 = mongoDBRiverDefinition1.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bulk_size" + "'", str4, "bulk_size");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(mongoClientOptions8);
    }

    @Test
    public void test4996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4996");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        builder3.mongoAdminPassword = "";
        builder3.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.importAllCollections(true);
        java.lang.String str12 = builder11.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoAdminPassword = "";
        builder15.socketTimeout = (short) 0;
        boolean boolean22 = builder15.storeStatistics;
        builder15.scriptType = "mongodb-1638820218299";
        java.lang.String[] strArray26 = new java.lang.String[] { "mongodb-1638820218299" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder15.excludeFields((java.util.Set<java.lang.String>) strSet27);
        builder11.setexcludeFields((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.mongoDb;
        int int35 = mongoDBRiverDefinition33.throttleSize;
        int int36 = mongoDBRiverDefinition33.getDEFAULT_BULK_ACTIONS();
        java.lang.String str37 = mongoDBRiverDefinition33.getMongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition33.mongoCollectionFilter;
        builder31.setmongoOplogFilter(basicDBObject38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder31.storeStatistics(true);
        com.mongodb.BasicDBObject basicDBObject42 = builder31.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1000 + "'", int36 == 1000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
    }

    @Test
    public void test4997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4997");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        com.mongodb.ServerAddress[] serverAddressArray9 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList10 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList10, serverAddressArray9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.isMongos((java.lang.Boolean) true);
        boolean boolean15 = builder12.getadvancedTransformation();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.setmongoUseSSL(false);
        builder12.mongoSSLVerifyCertificate = true;
        builder12.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.setmongoDb("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder0.setskipInitialImport(true);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        builder0.includeCollection = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder10.setmongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean15 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.connectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoUseSSL(true);
        builder19.setstatisticsTypeName("_river");
        builder19.mongoSSLVerifyCertificate = false;
        boolean boolean24 = builder19.getmongoSSLVerifyCertificate();
        java.lang.String str25 = builder19.riverIndexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test5000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test5000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminPassword = "";
        builder0.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(true);
        java.lang.String str9 = builder0.mongoLocalUser;
        java.lang.Boolean boolean10 = builder0.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.getSCRIPT_FIELD();
        boolean boolean13 = mongoDBRiverDefinition11.isAdvancedTransformation();
        java.lang.String str14 = mongoDBRiverDefinition11.mongoAdminPassword;
        java.lang.String str15 = mongoDBRiverDefinition11.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_bulk_requests" + "'", str15, "concurrent_bulk_requests");
    }
}

