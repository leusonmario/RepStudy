import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder4.parentTypes = strSet18;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder4.script("port");
        builder22.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings25 = null;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.setskipInitialImport(true);
        builder27.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject35 = builder27.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings25, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        builder22.setmongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        builder0.mongoCollectionFilter = basicDBObject35;
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.mongoClientOptions(mongoClientOptions41);
        java.lang.String str43 = builder42.riverName;
        builder42.throttleSize = (byte) 0;
        java.lang.String str46 = builder42.mongoLocalPassword;
        builder42.setthrottleSize(10);
        boolean boolean49 = builder42.getmongoSSLVerifyCertificate();
        boolean boolean50 = builder42.getskipInitialImport();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        java.lang.Object obj9 = null;
        docScoreSearchScript0.setNextVar("drop_collection", obj9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getimportAllCollections();
        java.lang.String str13 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        boolean boolean18 = builder11.getadvancedTransformation();
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder11);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition4.mongoOplogFilter;
        java.lang.String str7 = mongoDBRiverDefinition4.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition4.getParentTypes();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "import_all_collections" + "'", str7, "import_all_collections");
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.String str7 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "type" + "'", str7, "type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_requests" + "'", str8, "concurrent_requests");
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.dropCollection(true);
        builder21.setisMongos((java.lang.Boolean) true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        java.lang.String str25 = builder21.includeCollection;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("initial_timestamp", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("", "secondary_read_preference", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?secondary_read_preference?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        java.util.Set<java.lang.String> strSet33 = builder0.parentTypes;
        java.lang.String str34 = builder0.getstatisticsTypeName();
        java.lang.String str35 = builder0.indexName;
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        builder0.setmongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions39 = mongoDBRiverDefinition38.getMongoClientOptions();
        boolean boolean40 = mongoDBRiverDefinition38.getdropCollection();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        java.lang.String str5 = builder4.getmongoLocalPassword();
        builder4.setconnectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.dropCollection(true);
        builder4.setisMongos((java.lang.Boolean) false);
        builder4.setconnectTimeout(10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        builder5.parentTypes = strSet19;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder5.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        com.mongodb.MongoClientOptions mongoClientOptions27 = mongoDBRiverDefinition26.mongoClientOptions;
        java.lang.String str28 = mongoDBRiverDefinition26.getMongoLocalUser();
        java.lang.String str29 = mongoDBRiverDefinition26.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean30 = mongoDBRiverDefinition26.isImportAllCollections();
        boolean boolean31 = mongoDBRiverDefinition26.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition26.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.RiverSettings riverSettings34 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.RiverSettings riverSettings35 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.script.ScriptService scriptService36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("name", "bulk_timeout", riverSettings35, scriptService36);
        boolean boolean38 = mongoDBRiverDefinition37.isAdvancedTransformation();
        java.lang.String str39 = mongoDBRiverDefinition37.statisticsIndexName;
        int int40 = mongoDBRiverDefinition37.getSocketTimeout();
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "advanced_transformation" + "'", str29, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.disableIndexRefresh(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder7.getmongoServers();
        builder7.setmongoCollection(".scripts");
        builder7.throttleSize = (short) 10;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressList10);
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        boolean boolean7 = builder0.getmongoSecondaryReadPreference();
        boolean boolean8 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.script("host");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        builder0.setstatisticsTypeName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoSSLVerifyCertificate = true;
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoClientOptions(mongoClientOptions8);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        java.lang.String str11 = builder10.getmongoLocalPassword();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        boolean boolean26 = mongoDBRiverDefinition25.isMongoSecondaryReadPreference();
        boolean boolean27 = mongoDBRiverDefinition25.getdisableIndexRefresh();
        int int28 = mongoDBRiverDefinition25.getSocketTimeout();
        java.util.Set<java.lang.String> strSet29 = mongoDBRiverDefinition25.excludeFields;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(strSet29);
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.dropCollection(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder20.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.script("admin");
        java.lang.String str27 = builder20.getmongoLocalPassword();
        boolean boolean28 = builder20.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.mongoAdminPassword("collection");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        java.lang.String[] strArray14 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        builder6.setincludeFields((java.util.Set<java.lang.String>) strSet15);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet15);
        java.lang.String str19 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str21 = builder0.mongoLocalPassword;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        builder0.statisticsIndexName = "parent_types";
        com.mongodb.BasicDBObject basicDBObject8 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoUseSSL(false);
        boolean boolean11 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverName();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.isMongos;
        boolean boolean7 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str8 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str10 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str11 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "options" + "'", str8, "options");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "parent_types" + "'", str11, "parent_types");
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.getmongoLocalUser();
        java.lang.String str4 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.statisticsIndexName("filter");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        builder7.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.importAllCollections(true);
        boolean boolean30 = builder29.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        builder5.parentTypes = strSet45;
        boolean boolean51 = builder5.disableIndexRefresh;
        builder5.setmongoCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder5.importAllCollections(false);
        java.lang.String str56 = builder5.getmongoAdminPassword();
        boolean boolean57 = builder5.getdisableIndexRefresh();
        boolean boolean58 = builder5.getstoreStatistics();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.storeStatistics(true);
        boolean boolean5 = builder0.disableIndexRefresh;
        boolean boolean6 = builder0.getmongoUseSSL();
        builder0.setstoreStatistics(true);
        int int9 = builder0.getconnectTimeout();
        java.lang.String str10 = builder0.statisticsIndexName;
        builder0.mongoLocalUser = "";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        builder5.parentTypes = strSet19;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder5.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str25 = builder5.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder5.mongoDb("filter");
        builder27.riverIndexName = "credentials";
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder27.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        builder31.setskipInitialImport(true);
        builder31.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder31.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject39 = builder31.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder31.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoSecondaryReadPreference(false);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript46 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript48 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript48.setNextScore((float) 1000);
        docScoreSearchScript48.setNextScore((float) 1000);
        docScoreSearchScript46.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder55.parentTypes = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder55.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.typeName("disable_index_refresh");
        docScoreSearchScript46.setNextVar("parent_types", (java.lang.Object) builder75);
        org.elasticsearch.common.settings.Settings settings77 = null;
        org.elasticsearch.common.settings.Settings settings78 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        builder79.setskipInitialImport(true);
        builder79.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder79.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject87 = builder79.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings88 = new org.elasticsearch.river.RiverSettings(settings78, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings89 = new org.elasticsearch.river.RiverSettings(settings77, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        builder75.mongoCollectionFilter = basicDBObject87;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder45.mongoCollectionFilter(basicDBObject87);
        builder27.mongoCollectionFilter = basicDBObject87;
        builder0.mongoCollectionFilter = basicDBObject87;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition94 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setadvancedTransformation(false);
        int int7 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalPassword = "import_all_collections";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getimportAllCollections();
        java.lang.String str13 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoGridFS(false);
        builder11.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getimportAllCollections();
        java.lang.String str21 = builder19.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = builder19.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = builder19.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.connectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.typeName("hi!.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        java.lang.String str30 = builder28.getindexName();
        boolean boolean31 = builder28.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        java.lang.String[] strArray42 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder34.setincludeFields((java.util.Set<java.lang.String>) strSet43);
        builder28.setincludeFields((java.util.Set<java.lang.String>) strSet43);
        builder27.excludeFields = strSet43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder11.includeFields((java.util.Set<java.lang.String>) strSet43);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet43);
        java.lang.String str50 = builder0.getscriptType();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setmongoGridFS(true);
        java.lang.String str11 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("gridfs");
        builder0.setmongoLocalPassword("script_type");
        builder0.throttleSize = ' ';
        boolean boolean18 = builder0.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject21 = builder0.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(basicDBObject21);
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        builder1.setskipInitialImport(true);
        builder1.scriptType = "admin";
        builder1.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        boolean boolean10 = builder1.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder1.scriptType("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject14 = builder1.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        builder0.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(true);
        boolean boolean10 = builder9.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript3 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript5 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript5.setNextScore((float) 1000);
        docScoreSearchScript5.setNextScore((float) 1000);
        docScoreSearchScript3.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder12.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.typeName("disable_index_refresh");
        docScoreSearchScript3.setNextVar("parent_types", (java.lang.Object) builder32);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = builder32.getinitialTimestamp();
        org.elasticsearch.common.settings.Settings settings35 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory36 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder37.parentTypes = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder37.script("port");
        builder55.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings58 = null;
        org.elasticsearch.common.settings.Settings settings59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        builder60.setskipInitialImport(true);
        builder60.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder60.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject68 = builder60.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings69 = new org.elasticsearch.river.RiverSettings(settings59, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings70 = new org.elasticsearch.river.RiverSettings(settings58, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        builder55.setmongoCollectionFilter(basicDBObject68);
        org.elasticsearch.script.ExecutableScript executableScript72 = docScoreNativeScriptFactory36.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings73 = new org.elasticsearch.river.RiverSettings(settings35, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        builder32.mongoOplogFilter = basicDBObject68;
        org.elasticsearch.river.RiverSettings riverSettings75 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings77 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(executableScript72);
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet24 = builder20.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.importAllCollections(true);
        java.lang.String str27 = builder20.getmongoAdminUser();
        java.lang.String str28 = builder20.statisticsIndexName;
        boolean boolean29 = builder20.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str10 = mongoDBRiverDefinition9.getFILTER_FIELD();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str12 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoAdminUser();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition2.mongoClientOptions;
        boolean boolean9 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = mongoDBRiverDefinition3.getINCLUDE_COLLECTION_FIELD();
        int int5 = mongoDBRiverDefinition3.getSocketTimeout();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition3.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition3.getScriptType();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition3.mongoClientOptions;
        int int9 = mongoDBRiverDefinition3.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "include_collection" + "'", str4, "include_collection");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.mongoLocalUser("parent_types");
        builder29.setadvancedTransformation(false);
        builder29.setmongoDb("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder29.mongoDb("gridfs");
        builder29.setscriptType("sandbox");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder19.parentTypes = strSet33;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder18.mongoAdminPassword("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder18.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder18.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str44 = mongoDBRiverDefinition43.getStatisticsTypeName();
        boolean boolean45 = mongoDBRiverDefinition43.getstoreStatistics();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        boolean boolean7 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder0.mongoClientOptions;
        builder0.setstatisticsIndexName("script.disable_dynamic");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(mongoClientOptions9);
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = mongoDBRiverDefinition19.mongoLocalPassword;
        java.lang.String str21 = mongoDBRiverDefinition19.script;
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition19.getMongoServers();
        java.lang.String str23 = mongoDBRiverDefinition19.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "gridfs" + "'", str23, "gridfs");
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.mongoLocalUser("parent_types");
        builder29.setadvancedTransformation(false);
        builder29.setmongoDb("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder29.mongoAdminUser("script.default_lang");
        java.lang.Boolean boolean36 = builder35.getisMongos();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(boolean36);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition5.mongoCollection;
        java.lang.String str9 = mongoDBRiverDefinition5.getSCRIPT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition5.getstoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition5.getBULK_FIELD();
        int int12 = mongoDBRiverDefinition5.getConnectTimeout();
        java.lang.String str13 = mongoDBRiverDefinition5.getGRIDFS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk" + "'", str11, "bulk");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gridfs" + "'", str13, "gridfs");
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.setadvancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder5.isMongos((java.lang.Boolean) true);
        builder50.advancedTransformation = true;
        builder50.script = "script_type";
        java.lang.String str55 = builder50.getriverName();
        java.lang.String str56 = builder50.getmongoDb();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder10.mongoLocalUser = "port";
        java.lang.Boolean boolean13 = builder10.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.mongoGridFS(true);
        boolean boolean20 = builder19.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.mongoSecondaryReadPreference(false);
        java.lang.String str23 = builder19.getriverIndexName();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder4.parentTypes = strSet18;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder4.throttleSize((int) (byte) 0);
        int int23 = builder4.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.setskipInitialImport(true);
        builder24.scriptType = "admin";
        java.lang.String[] strArray32 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder24.setincludeFields((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet33);
        builder36.statisticsTypeName = "throttle_size";
        org.elasticsearch.common.settings.Settings settings39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.lang.String str42 = mongoDBRiverDefinition41.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition41.getGRIDFS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition41.getACTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition41.getSCRIPT_TYPE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition41.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger47 = mongoDBRiverDefinition41.getlogger();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition41.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings49 = new org.elasticsearch.river.RiverSettings(settings39, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        builder36.mongoCollectionFilter = basicDBObject48;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.elasticsearch.script.ScriptService scriptService53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("hi!.null", "", riverSettings52, scriptService53);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "gridfs" + "'", str43, "gridfs");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "actions" + "'", str44, "actions");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script_type" + "'", str45, "script_type");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertNotNull(eSLogger47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition54);
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        java.lang.String str6 = mongoDBRiverDefinition4.getIncludeCollection();
        boolean boolean7 = mongoDBRiverDefinition4.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition4.getPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.mongoCollection;
        java.lang.String str10 = mongoDBRiverDefinition4.getIncludeCollection();
        java.lang.String str11 = mongoDBRiverDefinition4.getNAME_FIELD();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "name" + "'", str11, "name");
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = builder5.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition10.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition10.parentTypes;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        builder8.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder8.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoServers(serverAddressList14);
        com.mongodb.BasicDBObject basicDBObject16 = builder0.mongoOplogFilter;
        java.lang.String str17 = builder0.getmongoLocalUser();
        builder0.socketTimeout = (short) 100;
        builder0.setmongoLocalPassword("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.isMongos((java.lang.Boolean) true);
        builder24.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject28 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        builder18.setmongoOplogFilter(basicDBObject28);
        builder18.mongoDb = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.riverName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.mongoLocalPassword("index");
        java.lang.String str37 = builder18.gettypeName();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        boolean boolean7 = mongoDBRiverDefinition2.isDropCollection();
        int int8 = mongoDBRiverDefinition2.getConnectTimeout();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(basicDBObject9);
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder0.advancedTransformation(false);
        builder0.importAllCollections = true;
        java.lang.String str37 = builder0.getriverIndexName();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setscriptType("collection");
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("");
        builder13.setriverIndexName("");
        builder13.mongoLocalPassword = "bulk_timeout";
        java.lang.String str18 = builder13.getriverIndexName();
        com.mongodb.BasicDBObject basicDBObject19 = builder13.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(basicDBObject19);
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        boolean boolean23 = mongoDBRiverDefinition22.skipInitialImport;
        java.lang.String str24 = mongoDBRiverDefinition22.getCONCURRENT_REQUESTS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue25 = mongoDBRiverDefinition22.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "concurrent_requests" + "'", str24, "concurrent_requests");
        org.junit.Assert.assertNotNull(timeValue25);
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str4 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        int int7 = mongoDBRiverDefinition1.getSocketTimeout();
        int int8 = mongoDBRiverDefinition1.connectTimeout;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "local" + "'", str4, "local");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        boolean boolean8 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean10 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        java.lang.Boolean boolean11 = mongoDBRiverDefinition2.isMongos;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition21.getMongoServers();
        java.lang.String str23 = mongoDBRiverDefinition21.getDROP_COLLECTION_FIELD();
        int int24 = mongoDBRiverDefinition21.socketTimeout;
        java.lang.String str25 = mongoDBRiverDefinition21.getMongoLocalUser();
        java.lang.String str26 = mongoDBRiverDefinition21.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition21.getHOST_FIELD();
        int int28 = mongoDBRiverDefinition21.socketTimeout;
        boolean boolean29 = mongoDBRiverDefinition21.isMongoUseSSL();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "drop_collection" + "'", str23, "drop_collection");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disable_index_refresh" + "'", str26, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "host" + "'", str27, "host");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.settypeName("script.disable_dynamic");
        java.lang.String str25 = builder20.statisticsTypeName;
        java.lang.String str26 = builder20.riverName;
        boolean boolean27 = builder20.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.storeStatistics(true);
        java.util.Set<java.lang.String> strSet16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.parentTypes(strSet16);
        java.util.Set<java.lang.String> strSet18 = builder10.getexcludeFields();
        boolean boolean19 = builder10.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition4.includeFields;
        boolean boolean6 = mongoDBRiverDefinition4.mongoGridFS;
        java.lang.String str7 = mongoDBRiverDefinition4.getSSL_VERIFY_CERT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition4.getmongoUseSSL();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl_verify_certificate" + "'", str7, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        int int21 = builder19.getsocketTimeout();
        java.lang.String str22 = builder19.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder23.parentTypes = strSet37;
        builder19.excludeFields = strSet37;
        builder0.parentTypes = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = builder0.getmongoGridFS();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getPORT_FIELD();
        int int5 = mongoDBRiverDefinition2.socketTimeout;
        boolean boolean6 = mongoDBRiverDefinition2.isAdvancedTransformation();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "port" + "'", str4, "port");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        builder6.setstoreStatistics(true);
        boolean boolean14 = builder6.importAllCollections;
        int int15 = builder6.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getimportAllCollections();
        java.lang.String str18 = builder16.getmongoAdminUser();
        java.lang.String str19 = builder16.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder16.mongoServers;
        builder6.setmongoServers(serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers(serverAddressList20);
        builder0.setriverIndexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder25.parentTypes = strSet39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder25.script("port");
        builder43.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.mongoLocalPassword("");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder0.mongoOplogFilter(basicDBObject48);
        boolean boolean50 = builder49.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder49.build();
        java.lang.String str52 = mongoDBRiverDefinition51.riverName;
        java.lang.String str53 = mongoDBRiverDefinition51.indexName;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.mongoClientOptions;
        builder8.setmongoAdminPassword("bulk");
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.getmongoClientOptions();
        builder8.setindexName("drop_collection");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNull(mongoClientOptions12);
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str9 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "socket_timeout" + "'", str7, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = mongoDBRiverDefinition3.getNAME_FIELD();
        boolean boolean5 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition3.isMongos;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition3.mongoCollectionFilter;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(basicDBObject7);
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        builder8.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder8.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoServers(serverAddressList14);
        builder0.statisticsTypeName = "db";
        builder0.setstatisticsIndexName("bulk_timeout");
        builder0.indexName = "hi!.null";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition2.mongoLocalUser;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.includeFields;
        java.lang.String str10 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getStatisticsIndexName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "local" + "'", str5, "local");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.Boolean boolean4 = mongoDBRiverDefinition2.isMongos();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition2.typeName;
        boolean boolean8 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        int int9 = mongoDBRiverDefinition2.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder32.statisticsTypeName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder32.mongoSSLVerifyCertificate(true);
        builder36.statisticsTypeName = "ssl_verify_certificate";
        builder36.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.mongoLocalPassword("flush_interval");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.disableIndexRefresh;
        int int10 = mongoDBRiverDefinition2.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition2.getCONNECT_TIMEOUT();
        boolean boolean12 = mongoDBRiverDefinition2.mongoGridFS;
        boolean boolean13 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition2.getTypeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = builder8.getindexName();
        boolean boolean11 = builder8.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder14.parentTypes = strSet28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet47);
        builder13.includeFields = strSet47;
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet47);
        builder5.typeName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder5.throttleSize((int) (short) 100);
        java.lang.String str58 = builder57.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.lang.String str62 = builder60.includeCollection;
        builder60.typeName = "skip_initial_import";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        java.lang.String str6 = mongoDBRiverDefinition4.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "throttle_size" + "'", str6, "throttle_size");
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder10.initialTimestamp;
        builder10.mongoDb = "user";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean16 = mongoDBRiverDefinition15.disableIndexRefresh;
        java.lang.String str17 = mongoDBRiverDefinition15.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition15.getMongoCollection();
        java.lang.String str19 = mongoDBRiverDefinition15.getBULK_TIMEOUT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition15.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk_timeout" + "'", str19, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "import_all_collections" + "'", str20, "import_all_collections");
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet24 = builder20.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.importAllCollections(true);
        builder26.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.mongoAdminPassword("script.default_lang");
        java.util.Set<java.lang.String> strSet31 = builder26.includeFields;
        java.lang.String str32 = builder26.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder26.mongoCollection("secondary_read_preference");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoLocalUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        builder6.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder6.isMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject16 = builder6.getmongoCollectionFilter();
        builder5.setmongoCollectionFilter(basicDBObject16);
        builder5.mongoSecondaryReadPreference = false;
        builder5.throttleSize = (short) 0;
        java.lang.String str22 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder5.mongoSSLVerifyCertificate(true);
        builder24.typeName = "drop_collection";
        builder24.dropCollection = false;
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setriverIndexName("admin");
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder34.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder34.script("port");
        builder52.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings55 = null;
        org.elasticsearch.common.settings.Settings settings56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        builder57.setskipInitialImport(true);
        builder57.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder57.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject65 = builder57.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings66 = new org.elasticsearch.river.RiverSettings(settings56, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings55, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        builder52.setmongoCollectionFilter(basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings69 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        builder30.mongoCollectionFilter = basicDBObject65;
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder30.mongoClientOptions(mongoClientOptions71);
        com.mongodb.MongoClientOptions mongoClientOptions73 = null;
        builder72.mongoClientOptions = mongoClientOptions73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        boolean boolean76 = mongoDBRiverDefinition75.isDropCollection();
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition75.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings78 = new org.elasticsearch.river.RiverSettings(settings29, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder24.mongoCollectionFilter(basicDBObject77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.mongoCollection("options");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions4 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.Boolean boolean5 = mongoDBRiverDefinition1.isMongos;
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_size" + "'", str3, "bulk_size");
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(basicDBObject8);
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.script;
        java.lang.String str9 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean11 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "import_all_collections" + "'", str9, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        builder5.disableIndexRefresh = true;
        builder5.connectTimeout = (short) -1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder5.build();
        java.lang.String str15 = mongoDBRiverDefinition14.getIncludeCollection();
        java.lang.String str16 = mongoDBRiverDefinition14.typeName;
        java.lang.String str17 = mongoDBRiverDefinition14.getMongoDb();
        java.lang.String str18 = mongoDBRiverDefinition14.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition14.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "concurrent_bulk_requests" + "'", str18, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "import_all_collections" + "'", str19, "import_all_collections");
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getmongoAdminUser();
        java.lang.String str8 = builder0.mongoCollection;
        java.lang.String str9 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) true);
        boolean boolean10 = builder9.advancedTransformation;
        builder9.connectTimeout = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoAdminPassword("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder4.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers(serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder10.parentTypes = strSet24;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder10.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        int int31 = builder29.getsocketTimeout();
        java.lang.String str32 = builder29.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        builder29.excludeFields = strSet47;
        builder10.parentTypes = strSet47;
        builder9.parentTypes = strSet47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder9.scriptType("actions");
        builder9.disableIndexRefresh = false;
        java.lang.String str57 = builder9.getmongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder9.mongoClientOptions(mongoClientOptions58);
        boolean boolean60 = builder9.getimportAllCollections();
        builder9.setriverIndexName("");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject28 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        builder18.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder18.importAllCollections(false);
        int int33 = builder32.throttleSize;
        boolean boolean34 = builder32.getmongoGridFS();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        boolean boolean23 = mongoDBRiverDefinition22.skipInitialImport;
        java.lang.String str24 = mongoDBRiverDefinition22.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition22.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition22.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "concurrent_requests" + "'", str24, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "include_collection" + "'", str25, "include_collection");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "concurrent_requests" + "'", str26, "concurrent_requests");
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.mongoLocalUser("parent_types");
        builder29.setadvancedTransformation(false);
        builder29.setmongoDb("parent_types");
        java.lang.Boolean boolean34 = builder29.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.lang.String str36 = mongoDBRiverDefinition35.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(boolean34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ssl" + "'", str36, "ssl");
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.getmongoUseSSL();
        builder0.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalUser("collection");
        int int8 = builder7.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.throttleSize((int) (short) 100);
        java.lang.String str11 = builder10.getstatisticsTypeName();
        builder10.importAllCollections = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        int int8 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str9 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl" + "'", str10, "ssl");
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str4 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "local" + "'", str4, "local");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_fields" + "'", str10, "include_fields");
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("script", "import_all_collections");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?import_all_collections?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setindexName("flush_interval");
        builder18.mongoLocalUser = "socket_timeout";
        java.lang.Boolean boolean23 = builder18.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.setthrottleSize(27017);
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder28.parentTypes = strSet42;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder28.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition49.mongoClientOptions;
        java.lang.String str51 = mongoDBRiverDefinition49.getMongoLocalUser();
        java.lang.String str52 = mongoDBRiverDefinition49.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean53 = mongoDBRiverDefinition49.isImportAllCollections();
        boolean boolean54 = mongoDBRiverDefinition49.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject55 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder18.mongoOplogFilter(basicDBObject55);
        java.util.Set<java.lang.String> strSet58 = builder18.parentTypes;
        builder18.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder18.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder18.typeName("");
        builder18.setriverIndexName("user");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "advanced_transformation" + "'", str52, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        builder0.setstatisticsIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str5 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition1.getisMongos();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "options" + "'", str10, "options");
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        builder0.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverName("");
        builder0.setskipInitialImport(true);
        builder0.throttleSize = (short) 100;
        builder0.setmongoCollection("index");
        builder0.disableIndexRefresh = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject28 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        builder18.setmongoOplogFilter(basicDBObject28);
        builder18.mongoDb = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.riverName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean36 = builder35.getimportAllCollections();
        java.lang.String str37 = builder35.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.storeStatistics(true);
        boolean boolean40 = builder35.disableIndexRefresh;
        builder35.setmongoGridFS(true);
        java.lang.String str43 = builder35.getstatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList44 = builder35.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder18.mongoServers(serverAddressList44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder18.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(serverAddressList44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        java.lang.String str9 = builder8.script;
        java.lang.String str10 = builder8.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.indexName("import_all_collections");
        java.lang.String str13 = builder8.getindexName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "import_all_collections" + "'", str13, "import_all_collections");
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str5 = mongoDBRiverDefinition1.getSIZE_FIELD();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "size" + "'", str5, "size");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        builder8.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder8.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoServers(serverAddressList14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder16.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder16.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.typeName("disable_index_refresh");
        java.lang.String str37 = builder34.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.mongoLocalPassword("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        builder40.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder40.mongoDb("hi!");
        builder45.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = builder48.getindexName();
        boolean boolean51 = builder48.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder48.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        builder54.parentTypes = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder54.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        builder73.parentTypes = strSet87;
        builder72.setexcludeFields((java.util.Set<java.lang.String>) strSet87);
        builder53.includeFields = strSet87;
        builder45.setparentTypes((java.util.Set<java.lang.String>) strSet87);
        builder34.includeFields = strSet87;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder0.includeFields((java.util.Set<java.lang.String>) strSet87);
        java.lang.String str95 = builder94.getmongoAdminPassword();
        java.lang.String str96 = builder94.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition97 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder94);
        boolean boolean98 = mongoDBRiverDefinition97.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoLocalUser("");
        builder18.mongoLocalUser = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder27.mongoDb("hi!");
        builder32.isMongos = true;
        java.lang.String str35 = builder32.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoSSLVerifyCertificate(false);
        java.lang.String str38 = builder37.gettypeName();
        java.lang.String str39 = builder37.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        builder42.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder42.mongoDb("hi!");
        builder47.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = builder50.getindexName();
        boolean boolean53 = builder50.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder56.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder56.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder75.parentTypes = strSet89;
        builder74.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        builder55.includeFields = strSet89;
        builder47.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet89);
        builder18.parentTypes = strSet89;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "null.null" + "'", str11, "null.null");
        org.junit.Assert.assertNotNull(timeValue12);
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.getimportAllCollections();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.includeFields;
        java.lang.String str10 = mongoDBRiverDefinition2.mongoAdminPassword;
        int int11 = mongoDBRiverDefinition2.connectTimeout;
        java.lang.String str12 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index" + "'", str8, "index");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str9 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getDB_FIELD();
        boolean boolean12 = mongoDBRiverDefinition2.mongoGridFS;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disable_index_refresh" + "'", str9, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.Boolean boolean7 = mongoDBRiverDefinition6.isMongos;
        java.lang.String str8 = mongoDBRiverDefinition6.getSIZE_FIELD();
        int int9 = mongoDBRiverDefinition6.getSocketTimeout();
        int int10 = mongoDBRiverDefinition6.connectTimeout;
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        builder0.setstoreStatistics(false);
        builder0.script = "import_all_collections";
        builder0.setmongoDb("secondary_read_preference");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoLocalUser("");
        builder18.importAllCollections = true;
        builder18.mongoDb = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder18.mongoDb("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.connectTimeout((int) (byte) 0);
        int int35 = builder32.getconnectTimeout();
        int int36 = builder32.getconnectTimeout();
        boolean boolean37 = builder32.getmongoGridFS();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        int int23 = builder20.getconnectTimeout();
        builder20.setriverIndexName("import_all_collections");
        builder20.mongoDb = "is_mongos";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.typeName;
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        builder0.setstatisticsIndexName("local");
        int int7 = builder0.socketTimeout;
        boolean boolean8 = builder0.dropCollection;
        int int9 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.typeName("is_mongos");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions3 = mongoDBRiverDefinition2.mongoClientOptions;
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition2.mongoOplogFilter;
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoCollection();
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(basicDBObject4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.disableIndexRefresh = false;
        boolean boolean13 = builder7.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.skipInitialImport(true);
        java.lang.String str16 = builder15.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder17.parentTypes = strSet31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder17.throttleSize((int) (byte) 0);
        int int36 = builder17.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        builder37.setskipInitialImport(true);
        builder37.scriptType = "admin";
        java.lang.String[] strArray45 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder37.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder17.excludeFields((java.util.Set<java.lang.String>) strSet46);
        java.util.Set<java.lang.String> strSet50 = builder17.parentTypes;
        builder15.parentTypes = strSet50;
        builder15.skipInitialImport = false;
        int int54 = builder15.connectTimeout;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.getmongoUseSSL();
        builder0.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition8.getScript();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.settypeName("socket_timeout");
        java.lang.String str8 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("localhost");
        builder0.setscript("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.scriptType("concurrent_bulk_requests");
        java.lang.String str15 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        builder0.mongoClientOptions = mongoClientOptions16;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.throttleSize(1000);
        builder0.setmongoLocalPassword("type");
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder0.setmongoClientOptions(mongoClientOptions8);
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoOplogFilter();
        builder0.storeStatistics = false;
        java.lang.String str13 = builder0.mongoCollection;
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        builder7.setmongoAdminUser("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.indexName("parent_types");
        builder18.setstatisticsIndexName("socket_timeout");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder19.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        int int23 = builder21.getsocketTimeout();
        boolean boolean24 = builder21.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getimportAllCollections();
        java.lang.String str27 = builder25.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = builder25.getmongoServers();
        builder21.mongoServers = serverAddressList28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        builder30.setskipInitialImport(true);
        builder30.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder30.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder38.parentTypes = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet52);
        builder55.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        builder58.setskipInitialImport(true);
        builder58.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder58.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder66.parentTypes = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder65.parentTypes((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder55.excludeFields((java.util.Set<java.lang.String>) strSet80);
        builder21.includeFields = strSet80;
        builder19.excludeFields = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition87 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        com.mongodb.MongoClientOptions mongoClientOptions88 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder19.mongoClientOptions(mongoClientOptions88);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.Boolean boolean5 = mongoDBRiverDefinition1.isMongos();
        java.lang.String str6 = mongoDBRiverDefinition1.script;
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "is_mongos" + "'", str9, "is_mongos");
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        int int5 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        boolean boolean11 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str12 = mongoDBRiverDefinition1.typeName;
        int int13 = mongoDBRiverDefinition1.socketTimeout;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "collection" + "'", str8, "collection");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = mongoDBRiverDefinition3.getINCLUDE_COLLECTION_FIELD();
        boolean boolean5 = mongoDBRiverDefinition3.isStoreStatistics();
        int int6 = mongoDBRiverDefinition3.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str7 = mongoDBRiverDefinition3.getCONNECT_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition3.mongoSSLVerifyCertificate;
        boolean boolean9 = mongoDBRiverDefinition3.getmongoGridFS();
        java.lang.String str10 = mongoDBRiverDefinition3.getACTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition3.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition3.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition3.getTypeName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "include_collection" + "'", str4, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str22 = mongoDBRiverDefinition21.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "filter" + "'", str22, "filter");
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        java.lang.String str9 = builder0.script;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.setskipInitialImport(true);
        builder12.scriptType = "admin";
        builder12.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder12.isMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject22 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        builder0.setmongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.disableIndexRefresh(true);
        java.lang.String str28 = builder27.indexName;
        java.lang.String str29 = builder27.getriverIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoDb("");
        boolean boolean15 = builder12.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder16.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder16.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.dropCollection(false);
        java.lang.String str42 = builder41.getstatisticsTypeName();
        builder41.connectTimeout = 1000;
        com.mongodb.BasicDBObject basicDBObject45 = builder41.mongoCollectionFilter;
        builder12.setmongoOplogFilter(basicDBObject45);
        int int47 = builder12.getsocketTimeout();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminPassword("exclude_fields");
        builder10.setstatisticsIndexName("password");
        boolean boolean13 = builder10.skipInitialImport;
        boolean boolean14 = builder10.storeStatistics;
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory16 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.setskipInitialImport(true);
        builder17.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder17.skipInitialImport(false);
        builder17.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.mongoDb("hi!");
        builder33.isMongos = true;
        java.lang.String str36 = builder33.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder33.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder39.parentTypes = strSet53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder39.script("port");
        builder57.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings60 = null;
        org.elasticsearch.common.settings.Settings settings61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        builder62.setskipInitialImport(true);
        builder62.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder62.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject70 = builder62.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings61, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings60, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        builder57.setmongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder33.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.RiverSettings riverSettings75 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        builder17.mongoOplogFilter = basicDBObject70;
        org.elasticsearch.script.ExecutableScript executableScript77 = docScoreNativeScriptFactory16.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        org.elasticsearch.common.settings.Settings settings78 = null;
        org.elasticsearch.common.settings.Settings settings79 = null;
        org.elasticsearch.common.settings.Settings settings80 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder81);
        java.lang.String str83 = mongoDBRiverDefinition82.getSERVERS_FIELD();
        java.lang.String str84 = mongoDBRiverDefinition82.getGRIDFS_FIELD();
        java.lang.String str85 = mongoDBRiverDefinition82.getACTIONS_FIELD();
        java.lang.String str86 = mongoDBRiverDefinition82.getSCRIPT_TYPE_FIELD();
        java.lang.String str87 = mongoDBRiverDefinition82.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger88 = mongoDBRiverDefinition82.getlogger();
        com.mongodb.BasicDBObject basicDBObject89 = mongoDBRiverDefinition82.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings90 = new org.elasticsearch.river.RiverSettings(settings80, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings79, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        org.elasticsearch.river.RiverSettings riverSettings92 = new org.elasticsearch.river.RiverSettings(settings78, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        org.elasticsearch.script.ExecutableScript executableScript93 = docScoreNativeScriptFactory16.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        org.elasticsearch.river.RiverSettings riverSettings94 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder10.mongoCollectionFilter(basicDBObject89);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executableScript77);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "servers" + "'", str83, "servers");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "gridfs" + "'", str84, "gridfs");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "actions" + "'", str85, "actions");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "script_type" + "'", str86, "script_type");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "import_all_collections" + "'", str87, "import_all_collections");
        org.junit.Assert.assertNotNull(eSLogger88);
        org.junit.Assert.assertNotNull(basicDBObject89);
        org.junit.Assert.assertNotNull(executableScript93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        java.util.Set<java.lang.String> strSet6 = builder0.includeFields;
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getimportAllCollections();
        java.lang.String str11 = builder9.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.riverName("bulk_size");
        java.lang.String str20 = builder19.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        builder21.setskipInitialImport(true);
        builder21.scriptType = "admin";
        builder21.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.parentTypes(strSet31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        builder33.setskipInitialImport(true);
        builder33.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(false);
        java.lang.String str41 = builder40.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.importAllCollections(true);
        boolean boolean44 = builder43.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder45.parentTypes = strSet59;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder43.parentTypes((java.util.Set<java.lang.String>) strSet59);
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet59);
        builder19.parentTypes = strSet59;
        builder13.setparentTypes((java.util.Set<java.lang.String>) strSet59);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet59);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoLocalUser("");
        builder18.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.mongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.setstatisticsIndexName("ssl");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.setconnectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("script.default_lang");
        builder13.mongoAdminPassword = "connect_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.throttleSize((int) (short) 10);
        builder13.mongoAdminPassword = "import_all_collections";
        builder13.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        java.lang.String str13 = builder7.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.mongoDb("concurrent_bulk_requests");
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder15.getmongoServers();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(serverAddressList16);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index" + "'", str8, "index");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl" + "'", str12, "ssl");
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int9 = mongoDBRiverDefinition8.getSocketTimeout();
        boolean boolean10 = mongoDBRiverDefinition8.getdropCollection();
        java.lang.String str11 = mongoDBRiverDefinition8.getNAME_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.statisticsTypeName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "name" + "'", str11, "name");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str7 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getstoreStatistics();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "admin" + "'", str5, "admin");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_bulk_requests" + "'", str8, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        com.mongodb.BasicDBObject basicDBObject28 = builder25.mongoCollectionFilter;
        builder24.mongoCollectionFilter = basicDBObject28;
        boolean boolean30 = builder24.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        java.lang.String str35 = builder31.getindexName();
        builder31.setstatisticsIndexName("local");
        int int38 = builder31.socketTimeout;
        boolean boolean39 = builder31.dropCollection;
        int int40 = builder31.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        builder42.setskipInitialImport(true);
        builder42.scriptType = "admin";
        builder42.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder42.isMongos((java.lang.Boolean) false);
        builder42.setriverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        builder54.parentTypes = strSet68;
        builder42.excludeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder31.excludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet68);
        java.lang.Boolean boolean74 = builder24.isMongos;
        builder24.setmongoLocalPassword("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(boolean74);
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str3 = builder1.getindexName();
        boolean boolean4 = builder1.getmongoSSLVerifyCertificate();
        java.lang.String str5 = builder1.typeName;
        builder1.setadvancedTransformation(false);
        int int8 = builder1.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        builder9.setskipInitialImport(true);
        builder9.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.skipInitialImport(false);
        java.lang.String str17 = builder16.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.importAllCollections(true);
        boolean boolean20 = builder19.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder21.parentTypes = strSet35;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet35);
        builder1.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        boolean boolean40 = builder1.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(basicDBObject41);
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoLocalUser("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.advancedTransformation(true);
        boolean boolean18 = builder17.disableIndexRefresh;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.riverName = "";
        builder0.setsocketTimeout(1000);
        builder0.setisMongos((java.lang.Boolean) true);
        java.lang.String str11 = builder0.scriptType;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        builder0.mongoSSLVerifyCertificate = true;
        java.lang.String str7 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.throttleSize((int) (byte) 100);
        boolean boolean10 = builder0.mongoUseSSL;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        boolean boolean12 = builder5.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.statisticsTypeName("user.null");
        java.lang.String str15 = builder5.getmongoLocalPassword();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str6 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int7 = mongoDBRiverDefinition2.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "localhost" + "'", str6, "localhost");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000);
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoLocalUser("");
        builder18.importAllCollections = true;
        builder18.mongoDb = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder18.mongoDb("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.typeName("");
        builder30.mongoGridFS = false;
        java.lang.Boolean boolean35 = builder30.isMongos;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(boolean35);
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        int int5 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.scriptType;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "admin" + "'", str4, "admin");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "filter" + "'", str11, "filter");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(false);
        builder0.setriverIndexName("skip_initial_import");
        boolean boolean10 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.skipInitialImport(false);
        builder0.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        builder0.setstatisticsIndexName("local");
        int int7 = builder0.socketTimeout;
        boolean boolean8 = builder0.dropCollection;
        int int9 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        builder11.setskipInitialImport(true);
        builder11.scriptType = "admin";
        builder11.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.isMongos((java.lang.Boolean) false);
        builder11.setriverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder23.parentTypes = strSet37;
        builder11.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.riverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        boolean boolean8 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        boolean boolean5 = builder0.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.includeCollection("script.default_lang");
        builder0.settypeName("script");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        builder6.setstoreStatistics(true);
        boolean boolean14 = builder6.importAllCollections;
        int int15 = builder6.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getimportAllCollections();
        java.lang.String str18 = builder16.getmongoAdminUser();
        java.lang.String str19 = builder16.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder16.mongoServers;
        builder6.setmongoServers(serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers(serverAddressList20);
        builder0.setmongoCollection("flush_interval");
        builder0.setconnectTimeout((-1));
        boolean boolean27 = builder0.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setmongoLocalPassword("ssl_verify_certificate");
        builder0.mongoDb = "sandbox";
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.typeName("credentials");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.storeStatistics(false);
        boolean boolean15 = builder14.mongoGridFS;
        boolean boolean16 = builder14.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getDB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "db" + "'", str4, "db");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoLocalPassword = "index";
        java.lang.String str8 = builder0.getindexName();
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str7 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_timeout" + "'", str6, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        builder0.settypeName("host");
        java.lang.String str9 = builder0.mongoLocalPassword;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.dropCollection;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        boolean boolean10 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str11 = mongoDBRiverDefinition2.getNAME_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "name" + "'", str11, "name");
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str6 = mongoDBRiverDefinition2.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition2.getHOST_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "host" + "'", str9, "host");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(byteSizeValue11);
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        java.lang.String str21 = builder18.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoLocalPassword("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoDb("hi!");
        builder29.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = builder32.getindexName();
        boolean boolean35 = builder32.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder38.parentTypes = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder38.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder57.parentTypes = strSet71;
        builder56.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        builder37.includeFields = strSet71;
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        builder18.includeFields = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder18.scriptType("type");
        builder18.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        builder0.setstoreStatistics(false);
        builder0.setconnectTimeout(30000);
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.Boolean boolean12 = mongoDBRiverDefinition11.isMongos();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((-1.0f));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.riverName("bulk_size");
        java.lang.String str11 = builder5.scriptType;
        java.lang.Object obj12 = docScoreSearchScript0.unwrap((java.lang.Object) str11);
        org.apache.lucene.search.Scorer scorer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder4.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers(serverAddressList8);
        builder9.typeName = "include_collection";
        builder9.mongoAdminUser = "throttle_size";
        int int14 = builder9.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        boolean boolean16 = builder9.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoDb("");
        builder12.typeName = "drop_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.importAllCollections(false);
        builder12.connectTimeout = 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.skipInitialImport(true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean7 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.includeCollection("hi!");
        java.lang.String str10 = builder9.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder12.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.typeName("disable_index_refresh");
        java.lang.String str33 = builder30.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoLocalPassword("admin");
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder30.mongoClientOptions(mongoClientOptions36);
        com.mongodb.BasicDBObject basicDBObject38 = builder37.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder41.parentTypes = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder41.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.String str61 = builder41.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder41.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        builder63.mongoDb = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        builder69.setskipInitialImport(true);
        builder69.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder69.skipInitialImport(false);
        java.lang.String str77 = builder76.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder76.mongoAdminPassword("socket_timeout");
        boolean boolean82 = builder76.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject83 = builder76.mongoCollectionFilter;
        builder63.mongoOplogFilter = basicDBObject83;
        builder40.setmongoCollectionFilter(basicDBObject83);
        builder9.mongoOplogFilter = basicDBObject83;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(basicDBObject83);
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        java.lang.String str7 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition1.isMongos();
        boolean boolean9 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition2.getIndexName();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.getadvancedTransformation();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition2.mongoCollectionFilter;
        java.lang.String str13 = mongoDBRiverDefinition2.getMongoDb();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "local" + "'", str5, "local");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        int int49 = builder5.throttleSize;
        boolean boolean50 = builder5.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str52 = mongoDBRiverDefinition51.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        builder0.setstatisticsTypeName("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoClientOptions(mongoClientOptions20);
        builder21.indexName = "include_collection";
        java.lang.String str24 = builder21.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet25 = builder21.parentTypes;
        builder21.isMongos = false;
        builder21.connectTimeout = (short) 10;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "socket_timeout" + "'", str24, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.throttleSize((int) (byte) 10);
        boolean boolean6 = builder5.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        int int8 = mongoDBRiverDefinition7.throttleSize;
        boolean boolean9 = mongoDBRiverDefinition7.getmongoSSLVerifyCertificate();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = mongoDBRiverDefinition7.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteSizeValue10);
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder4.parentTypes = strSet18;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder4.script("port");
        builder22.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings25 = null;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.setskipInitialImport(true);
        builder27.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject35 = builder27.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings25, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        builder22.setmongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        builder0.mongoCollectionFilter = basicDBObject35;
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.mongoClientOptions(mongoClientOptions41);
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        builder42.mongoClientOptions = mongoClientOptions43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str46 = builder42.getincludeCollection();
        builder42.mongoAdminPassword = "user";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str50 = mongoDBRiverDefinition49.typeName;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str49 = mongoDBRiverDefinition48.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition48.getFLUSH_INTERVAL_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition48.getSSL_CONNECTION_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition48.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "advanced_transformation" + "'", str49, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "flush_interval" + "'", str50, "flush_interval");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ssl" + "'", str51, "ssl");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "disable_index_refresh" + "'", str52, "disable_index_refresh");
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        builder0.throttleSize = (short) 100;
        builder0.setskipInitialImport(true);
        builder0.setindexName("type");
        builder0.setincludeCollection("options");
        java.lang.String str15 = builder0.getscript();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoLocalPassword;
        int int10 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("options");
        java.lang.String str19 = builder18.typeName;
        com.mongodb.BasicDBObject basicDBObject20 = builder18.getmongoCollectionFilter();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoClientOptions(mongoClientOptions21);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder32.statisticsTypeName = "throttle_size";
        java.lang.String str35 = builder32.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = builder32.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder32.statisticsIndexName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.typeName("parent_types");
        builder40.mongoLocalPassword = "servers";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean8 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str9 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "is_mongos" + "'", str9, "is_mongos");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = mongoDBRiverDefinition11.scriptType;
        java.lang.String str13 = mongoDBRiverDefinition11.getSSL_CONNECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition11.getDB_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition11.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition11.mongoServers;
        builder0.setmongoServers(serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.importAllCollections(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder0.getmongoServers();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "db" + "'", str14, "db");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "admin" + "'", str15, "admin");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(serverAddressList20);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder7.getmongoClientOptions();
        builder7.storeStatistics = false;
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.setskipInitialImport(true);
        builder18.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.skipInitialImport(false);
        builder18.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        builder29.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.mongoDb("hi!");
        builder34.isMongos = true;
        java.lang.String str37 = builder34.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder40.parentTypes = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder40.script("port");
        builder58.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings61 = null;
        org.elasticsearch.common.settings.Settings settings62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        builder63.setskipInitialImport(true);
        builder63.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder63.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject71 = builder63.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings62, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        org.elasticsearch.river.RiverSettings riverSettings73 = new org.elasticsearch.river.RiverSettings(settings61, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        builder58.setmongoCollectionFilter(basicDBObject71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder34.mongoCollectionFilter(basicDBObject71);
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings28, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        builder18.mongoOplogFilter = basicDBObject71;
        org.elasticsearch.river.RiverSettings riverSettings78 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder7.mongoCollectionFilter(basicDBObject71);
        boolean boolean80 = builder79.getdropCollection();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str5 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.excludeFields;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "exclude_fields" + "'", str5, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        builder0.setstatisticsIndexName("local");
        int int7 = builder0.socketTimeout;
        boolean boolean8 = builder0.dropCollection;
        int int9 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        builder11.setskipInitialImport(true);
        builder11.scriptType = "admin";
        builder11.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.isMongos((java.lang.Boolean) false);
        builder11.setriverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder23.parentTypes = strSet37;
        builder11.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp42 = builder0.getinitialTimestamp();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(wildcardTimestamp42);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str9 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "local" + "'", str5, "local");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "local" + "'", str7, "local");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "collection" + "'", str9, "collection");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "skip_initial_import" + "'", str10, "skip_initial_import");
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        java.lang.String str13 = builder7.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.mongoDb("concurrent_bulk_requests");
        boolean boolean16 = builder15.dropCollection;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        builder6.setstoreStatistics(true);
        boolean boolean14 = builder6.importAllCollections;
        int int15 = builder6.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getimportAllCollections();
        java.lang.String str18 = builder16.getmongoAdminUser();
        java.lang.String str19 = builder16.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder16.mongoServers;
        builder6.setmongoServers(serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers(serverAddressList20);
        int int23 = builder22.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.includeCollection("servers");
        builder22.socketTimeout = '#';
        java.lang.String str28 = builder22.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet29 = builder22.excludeFields;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strSet29);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(false);
        java.lang.String str15 = builder14.getriverIndexName();
        builder14.setmongoCollection("store_statistics");
        builder14.mongoCollection = "localhost";
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        java.lang.String[] strArray14 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        builder6.setincludeFields((java.util.Set<java.lang.String>) strSet15);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        int int21 = builder19.getsocketTimeout();
        boolean boolean22 = builder19.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        builder19.mongoServers = serverAddressList26;
        java.lang.String str28 = builder19.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.riverName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        builder35.parentTypes = strSet49;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder35.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        int int56 = builder54.getsocketTimeout();
        java.lang.String str57 = builder54.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        builder58.parentTypes = strSet72;
        builder54.excludeFields = strSet72;
        builder35.parentTypes = strSet72;
        builder34.excludeFields = strSet72;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet72);
        builder0.excludeFields = strSet72;
        builder0.setmongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder0.mongoLocalUser("drop_collection");
        boolean boolean84 = builder83.getmongoGridFS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList85 = builder83.getmongoServers();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serverAddressList85);
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str5 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.setadvancedTransformation(true);
        builder5.setmongoAdminPassword("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder5.skipInitialImport(false);
        boolean boolean53 = builder52.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.mongoSecondaryReadPreference(true);
        builder52.socketTimeout = 8;
        builder52.setskipInitialImport(false);
        builder52.setscript("password");
        java.util.Set<java.lang.String> strSet62 = builder52.includeFields;
        builder52.script = "bulk_timeout";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp65 = builder52.initialTimestamp;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertNull(wildcardTimestamp65);
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.getmongoLocalUser();
        builder0.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = builder0.mongoServers;
        java.util.Set<java.lang.String> strSet7 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        java.lang.String str6 = builder0.indexName;
        builder0.dropCollection = false;
        java.lang.String str9 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder11.build();
        boolean boolean13 = builder11.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet14 = builder11.getparentTypes();
        boolean boolean15 = builder11.dropCollection;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        com.mongodb.BasicDBObject basicDBObject28 = builder25.mongoCollectionFilter;
        builder24.mongoCollectionFilter = basicDBObject28;
        boolean boolean30 = builder24.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        java.lang.String str35 = builder31.getindexName();
        builder31.setstatisticsIndexName("local");
        int int38 = builder31.socketTimeout;
        boolean boolean39 = builder31.dropCollection;
        int int40 = builder31.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        builder42.setskipInitialImport(true);
        builder42.scriptType = "admin";
        builder42.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder42.isMongos((java.lang.Boolean) false);
        builder42.setriverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        builder54.parentTypes = strSet68;
        builder42.excludeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder31.excludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet68);
        java.util.Set<java.lang.String> strSet74 = builder73.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder73.mongoCollection("filter");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(strSet74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.setskipInitialImport(true);
        builder13.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder13.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder21.parentTypes = strSet35;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet35);
        builder38.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.setskipInitialImport(true);
        builder41.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder41.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        builder49.parentTypes = strSet63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder48.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder38.excludeFields((java.util.Set<java.lang.String>) strSet63);
        java.util.Set<java.lang.String> strSet68 = builder38.excludeFields;
        builder7.excludeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder70);
        java.lang.String str72 = mongoDBRiverDefinition71.scriptType;
        java.lang.String str73 = mongoDBRiverDefinition71.getSSL_CONNECTION_FIELD();
        java.lang.String str74 = mongoDBRiverDefinition71.getDB_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition71.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = mongoDBRiverDefinition71.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder7.mongoServers(serverAddressList76);
        builder7.setmongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ssl" + "'", str73, "ssl");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "db" + "'", str74, "db");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "admin" + "'", str75, "admin");
        org.junit.Assert.assertNotNull(serverAddressList76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverIndexName();
        boolean boolean8 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "exclude_fields" + "'", str10, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "parent_types" + "'", str11, "parent_types");
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        boolean boolean12 = builder8.getstoreStatistics();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getimportAllCollections();
        java.lang.String str16 = builder14.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder14.getmongoServers();
        boolean boolean18 = builder14.getmongoGridFS();
        builder14.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder14.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.riverIndexName("");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder8.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoOplogFilter(basicDBObject27);
        java.util.Set<java.lang.String> strSet30 = builder29.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.mongoDb("user.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean34 = builder33.getimportAllCollections();
        java.lang.String str35 = builder33.getmongoAdminUser();
        java.lang.String str36 = builder33.typeName;
        boolean boolean37 = builder33.getstoreStatistics();
        builder33.mongoAdminPassword = "script_type";
        boolean boolean40 = builder33.getstoreStatistics();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        builder33.setmongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        builder43.setskipInitialImport(true);
        builder43.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder43.skipInitialImport(false);
        java.lang.String str51 = builder50.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoSSLVerifyCertificate(false);
        builder55.setmongoCollection("gridfs");
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = builder55.mongoServers;
        builder33.setmongoServers(serverAddressList58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        builder60.parentTypes = strSet74;
        boolean boolean77 = builder60.getdropCollection();
        builder60.setstatisticsTypeName("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions80 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder60.mongoClientOptions(mongoClientOptions80);
        builder81.indexName = "include_collection";
        java.lang.String str84 = builder81.getstatisticsTypeName();
        java.util.Set<java.lang.String> strSet85 = builder81.parentTypes;
        builder33.setincludeFields(strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder29.excludeFields(strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder29.disableIndexRefresh(false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(serverAddressList58);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "socket_timeout" + "'", str84, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.setriverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int9 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoDb("type");
        builder0.indexName = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.socketTimeout((int) (short) -1);
        java.lang.String str16 = builder0.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder6.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder6.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        int int27 = builder25.getsocketTimeout();
        java.lang.String str28 = builder25.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder29.parentTypes = strSet43;
        builder25.excludeFields = strSet43;
        builder6.parentTypes = strSet43;
        builder5.excludeFields = strSet43;
        builder5.setmongoCollection("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder5.mongoAdminUser("filter");
        int int53 = builder52.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.typeName("hi!.null");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        int int5 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.mongoUseSSL;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        boolean boolean9 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition2.getMongoClientOptions();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(mongoClientOptions10);
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        int int5 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str9 = mongoDBRiverDefinition2.getRiverName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str10 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoGridFS();
        boolean boolean12 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str13 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "drop_collection" + "'", str13, "drop_collection");
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder7.mongoClientOptions = mongoClientOptions11;
        java.util.Set<java.lang.String> strSet13 = builder7.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.mongoDb("user");
        builder15.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.mongoGridFS(true);
        boolean boolean20 = builder15.getmongoUseSSL();
        boolean boolean21 = builder15.storeStatistics;
        int int22 = builder15.throttleSize;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str3 = builder1.getindexName();
        boolean boolean4 = builder1.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.socketTimeout(10);
        java.lang.String str7 = builder1.indexName;
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoDb("hi!");
        builder15.isMongos = true;
        builder15.indexName = "password";
        builder15.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.dropCollection(true);
        com.mongodb.BasicDBObject basicDBObject24 = builder23.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        builder1.mongoOplogFilter = basicDBObject24;
        org.elasticsearch.river.RiverSettings riverSettings28 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject24);
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        boolean boolean5 = builder0.getdisableIndexRefresh();
        boolean boolean6 = builder0.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str10 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.mongoLocalPassword;
        int int12 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoServers(serverAddressList15);
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "servers" + "'", str10, "servers");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoLocalPassword("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.lang.String str23 = mongoDBRiverDefinition22.getMongoOplogNamespace();
        int int24 = mongoDBRiverDefinition22.getSocketTimeout();
        java.lang.String str25 = mongoDBRiverDefinition22.getRiverName();
        boolean boolean26 = mongoDBRiverDefinition22.storeStatistics;
        boolean boolean27 = mongoDBRiverDefinition22.isMongoUseSSL();
        java.lang.String str28 = mongoDBRiverDefinition22.getBULK_SIZE_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition22.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "null.null" + "'", str23, "null.null");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bulk_size" + "'", str28, "bulk_size");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "store_statistics" + "'", str29, "store_statistics");
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoCollection("skip_initial_import");
        boolean boolean11 = builder8.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = mongoDBRiverDefinition12.getDEFAULT_BULK_SIZE();
        java.lang.String str14 = mongoDBRiverDefinition12.getADMIN_DB_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getADMIN_DB_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "admin" + "'", str15, "admin");
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.storeStatistics(true);
        java.lang.String str16 = builder15.mongoCollection;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        builder0.setstatisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.riverName("bulk_size");
        builder23.statisticsIndexName = "parent_types";
        com.mongodb.BasicDBObject basicDBObject31 = builder23.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder23.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder34.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder34.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.scriptType("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder57.parentTypes = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder57.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        builder76.parentTypes = strSet90;
        builder75.setexcludeFields((java.util.Set<java.lang.String>) strSet90);
        builder52.setexcludeFields((java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet90);
        builder0.parentTypes = strSet90;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder0.disableIndexRefresh(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList99 = builder98.mongoServers;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(serverAddressList99);
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        boolean boolean8 = builder0.importAllCollections;
        int int9 = builder0.throttleSize;
        java.lang.String str10 = builder0.mongoDb;
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoAdminUser("bulk");
        java.lang.Boolean boolean17 = builder16.isMongos;
        java.util.Set<java.lang.String> strSet18 = builder16.excludeFields;
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("disable_index_refresh");
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) builder29);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder29.getinitialTimestamp();
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory33 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder34.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder34.script("port");
        builder52.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings55 = null;
        org.elasticsearch.common.settings.Settings settings56 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        builder57.setskipInitialImport(true);
        builder57.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder57.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject65 = builder57.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings66 = new org.elasticsearch.river.RiverSettings(settings56, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings55, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        builder52.setmongoCollectionFilter(basicDBObject65);
        org.elasticsearch.script.ExecutableScript executableScript69 = docScoreNativeScriptFactory33.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        org.elasticsearch.river.RiverSettings riverSettings70 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        builder29.mongoOplogFilter = basicDBObject65;
        java.lang.String str72 = builder29.typeName;
        java.lang.String str73 = builder29.gettypeName();
        builder29.setdisableIndexRefresh(false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(executableScript69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "disable_index_refresh" + "'", str72, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "disable_index_refresh" + "'", str73, "disable_index_refresh");
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        builder29.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.importAllCollections(true);
        java.lang.String str34 = builder33.indexName;
        builder33.skipInitialImport = false;
        builder33.throttleSize = (short) 100;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.setadvancedTransformation(true);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject8);
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        builder0.setstatisticsIndexName("index");
        java.lang.String str21 = builder0.getincludeCollection();
        java.lang.String str22 = builder0.getriverName();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        builder5.connectTimeout = 1;
        com.mongodb.BasicDBObject basicDBObject10 = builder5.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.dropCollection(true);
        builder5.setmongoAdminUser("script.default_lang");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder0.mongoServers;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder0.getmongoClientOptions();
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject15 = builder7.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoDb("");
        builder19.typeName = "drop_collection";
        builder19.includeCollection = "localhost";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        java.lang.String str29 = mongoDBRiverDefinition28.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet30 = mongoDBRiverDefinition28.getParentTypes();
        java.lang.String str31 = mongoDBRiverDefinition28.getMongoLocalUser();
        int int32 = mongoDBRiverDefinition28.throttleSize;
        java.lang.String str33 = mongoDBRiverDefinition28.statisticsTypeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = mongoDBRiverDefinition28.mongoServers;
        builder19.setmongoServers(serverAddressList34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder0.mongoServers(serverAddressList34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "disable_index_refresh" + "'", str29, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.setskipInitialImport(true);
        builder28.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder36.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder25.excludeFields((java.util.Set<java.lang.String>) strSet50);
        java.util.Set<java.lang.String> strSet55 = builder25.excludeFields;
        boolean boolean56 = builder25.getmongoSSLVerifyCertificate();
        boolean boolean57 = builder25.getdisableIndexRefresh();
        boolean boolean58 = builder25.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.throttleSize(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoSecondaryReadPreference(true);
        boolean boolean9 = builder8.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = builder8.build();
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "exclude_fields" + "'", str10, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl_verify_certificate" + "'", str11, "ssl_verify_certificate");
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoAdminPassword("bulk_timeout");
        java.lang.String str7 = builder6.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.throttleSize(1000);
        java.lang.String str10 = builder6.getincludeCollection();
        builder6.mongoDb = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.dropCollection(false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(false);
        java.lang.String str11 = builder10.script;
        builder10.setdropCollection(false);
        builder10.setincludeCollection("sandbox");
        int int16 = builder10.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.socketTimeout(10);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        boolean boolean8 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str12 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "exclude_fields" + "'", str12, "exclude_fields");
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getmongoLocalUser();
        builder0.mongoSecondaryReadPreference = false;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory8 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        builder9.setskipInitialImport(true);
        builder9.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.skipInitialImport(false);
        builder9.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoDb("hi!");
        builder25.isMongos = true;
        java.lang.String str28 = builder25.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder31.script("port");
        builder49.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings52 = null;
        org.elasticsearch.common.settings.Settings settings53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        builder54.setskipInitialImport(true);
        builder54.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder54.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject62 = builder54.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings63 = new org.elasticsearch.river.RiverSettings(settings53, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        org.elasticsearch.river.RiverSettings riverSettings64 = new org.elasticsearch.river.RiverSettings(settings52, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        builder49.setmongoCollectionFilter(basicDBObject62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder25.mongoCollectionFilter(basicDBObject62);
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        builder9.mongoOplogFilter = basicDBObject62;
        org.elasticsearch.script.ExecutableScript executableScript69 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        org.elasticsearch.river.RiverSettings riverSettings70 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        builder0.setmongoCollectionFilter(basicDBObject62);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(executableScript69);
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.dropCollection(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder20.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.script("admin");
        java.lang.String str27 = builder20.getmongoLocalPassword();
        boolean boolean28 = builder20.getmongoUseSSL();
        builder20.mongoLocalUser = "disable_index_refresh";
        boolean boolean31 = builder20.mongoGridFS;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((-1.0f));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.riverName("bulk_size");
        java.lang.String str11 = builder5.scriptType;
        java.lang.Object obj12 = docScoreSearchScript0.unwrap((java.lang.Object) str11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoDb("hi!");
        builder19.isMongos = true;
        java.lang.String str22 = builder19.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoSSLVerifyCertificate(false);
        java.lang.String str25 = builder24.gettypeName();
        builder24.setmongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.importAllCollections(false);
        builder24.setstatisticsIndexName("type");
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = builder24.mongoServers;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) builder24);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(serverAddressList32);
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = builder22.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder22.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        int int29 = builder25.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        com.mongodb.BasicDBObject basicDBObject31 = builder25.getmongoCollectionFilter();
        builder22.mongoCollectionFilter = basicDBObject31;
        builder22.setscriptType("");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(basicDBObject31);
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        java.lang.String str6 = builder0.indexName;
        builder0.dropCollection = false;
        builder0.setmongoAdminUser("initial_timestamp");
        java.lang.String str11 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverIndexName("options");
        java.util.Set<java.lang.String> strSet14 = builder0.includeFields;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder10.mongoLocalUser = "port";
        java.lang.Boolean boolean13 = builder10.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        boolean boolean21 = mongoDBRiverDefinition20.mongoGridFS;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        boolean boolean12 = builder9.advancedTransformation;
        boolean boolean13 = builder9.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.isDropCollection();
        java.lang.String str5 = mongoDBRiverDefinition3.statisticsTypeName;
        boolean boolean6 = mongoDBRiverDefinition3.isMongoSSLVerifyCertificate();
        boolean boolean7 = mongoDBRiverDefinition3.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject2 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str3 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(basicDBObject2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "socket_timeout" + "'", str3, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.indexName = "";
        java.lang.String str3 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder4.indexName = "";
        boolean boolean7 = builder4.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject8 = builder4.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str29 = builder9.getindexName();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder9.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder32.parentTypes = strSet46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder32.throttleSize((int) (byte) 0);
        int int51 = builder32.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        builder52.setskipInitialImport(true);
        builder52.scriptType = "admin";
        java.lang.String[] strArray60 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        builder52.setincludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet61);
        builder31.setexcludeFields((java.util.Set<java.lang.String>) strSet61);
        builder4.setparentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder0.includeFields((java.util.Set<java.lang.String>) strSet61);
        java.util.Set<java.lang.String> strSet68 = builder67.getexcludeFields();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(strSet68);
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("options");
        builder0.importAllCollections = false;
        builder0.setdropCollection(true);
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str26 = builder0.getincludeCollection();
        java.lang.String str27 = builder0.indexName;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoGridFS();
        boolean boolean9 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str11 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean14 = mongoDBRiverDefinition1.getmongoUseSSL();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 60000 + "'", int6 == 60000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "drop_collection" + "'", str11, "drop_collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "name" + "'", str12, "name");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder3.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.dropCollection(false);
        java.lang.String str29 = builder28.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder33.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.dropCollection(false);
        java.lang.String str59 = builder58.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject60 = builder58.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        builder30.mongoCollectionFilter = basicDBObject60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder28.mongoOplogFilter(basicDBObject60);
        org.elasticsearch.river.RiverSettings riverSettings64 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.river.RiverSettings riverSettings65 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.river.RiverSettings riverSettings66 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        builder10.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) false);
        java.lang.Boolean boolean16 = builder15.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean4 = builder3.getimportAllCollections();
        java.lang.String str5 = builder3.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoSecondaryReadPreference(false);
        builder9.setscript("type");
        java.lang.String str12 = builder9.indexName;
        java.lang.String str13 = builder9.getriverIndexName();
        com.mongodb.BasicDBObject basicDBObject14 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoDb("filter");
        builder22.riverIndexName = "credentials";
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = builder22.getmongoServers();
        builder22.mongoDb = "bulk";
        java.lang.String str28 = builder22.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        int int9 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoDb();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = builder12.getindexName();
        boolean boolean15 = builder12.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        builder18.parentTypes = strSet32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder37.parentTypes = strSet51;
        builder36.setexcludeFields((java.util.Set<java.lang.String>) strSet51);
        builder17.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        com.mongodb.BasicDBObject basicDBObject61 = builder58.getmongoOplogFilter();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(basicDBObject61);
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str6 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsIndexName;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        builder10.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.statisticsIndexName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.scriptType("name");
        builder18.mongoDb = "script.default_lang";
        boolean boolean23 = builder18.getskipInitialImport();
        boolean boolean24 = builder18.skipInitialImport;
        java.lang.String str25 = builder18.getindexName();
        java.lang.String str26 = builder18.riverIndexName;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        builder29.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        boolean boolean35 = mongoDBRiverDefinition34.isMongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions36 = mongoDBRiverDefinition34.getMongoClientOptions();
        java.lang.String str37 = mongoDBRiverDefinition34.getTypeName();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        builder20.typeName = "bulk";
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.mongoSecondaryReadPreference(false);
        boolean boolean29 = builder20.mongoUseSSL;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.mongoClientOptions;
        boolean boolean13 = builder9.getmongoGridFS();
        java.lang.String str14 = builder9.getscript();
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("user.null", "advanced_transformation");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?advanced_transformation?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "local" + "'", str5, "local");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "local" + "'", str7, "local");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoServers(serverAddressList26);
        builder27.setriverIndexName("import_all_collections");
        int int30 = builder27.throttleSize;
        boolean boolean31 = builder27.storeStatistics;
        java.lang.String str32 = builder27.getmongoLocalUser();
        builder27.setstoreStatistics(false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int4 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.util.Set<java.lang.String> strSet7 = builder0.getparentTypes();
        java.lang.String str8 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(true);
        builder0.mongoLocalUser = "bulk_size";
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        builder0.setadvancedTransformation(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        builder1.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = builder1.initialTimestamp;
        builder1.throttleSize = (short) 100;
        java.lang.String str10 = builder1.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setindexName("flush_interval");
        builder29.mongoLocalUser = "socket_timeout";
        java.lang.Boolean boolean34 = builder29.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        builder29.setthrottleSize(27017);
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder39.parentTypes = strSet53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder39.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        com.mongodb.MongoClientOptions mongoClientOptions61 = mongoDBRiverDefinition60.mongoClientOptions;
        java.lang.String str62 = mongoDBRiverDefinition60.getMongoLocalUser();
        java.lang.String str63 = mongoDBRiverDefinition60.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean64 = mongoDBRiverDefinition60.isImportAllCollections();
        boolean boolean65 = mongoDBRiverDefinition60.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject66 = mongoDBRiverDefinition60.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings38, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder29.mongoOplogFilter(basicDBObject66);
        builder1.mongoCollectionFilter = basicDBObject66;
        org.elasticsearch.river.RiverSettings riverSettings70 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(boolean34);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(mongoClientOptions61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "advanced_transformation" + "'", str63, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        boolean boolean4 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoLocalPassword("");
        builder0.isMongos = false;
        java.lang.String str9 = builder0.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        com.mongodb.BasicDBObject basicDBObject28 = builder25.mongoCollectionFilter;
        builder24.mongoCollectionFilter = basicDBObject28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder24.advancedTransformation(false);
        builder31.typeName = "servers";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(false);
        java.lang.String str11 = builder10.script;
        builder10.setdropCollection(false);
        builder10.setincludeCollection("sandbox");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder10.mongoClientOptions;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.setmongoAdminUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str15 = mongoDBRiverDefinition14.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition14.getCONCURRENT_REQUESTS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = mongoDBRiverDefinition14.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_requests" + "'", str16, "concurrent_requests");
        org.junit.Assert.assertNotNull(byteSizeValue17);
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        boolean boolean26 = mongoDBRiverDefinition25.isMongoSecondaryReadPreference();
        boolean boolean27 = mongoDBRiverDefinition25.getdisableIndexRefresh();
        int int28 = mongoDBRiverDefinition25.getSocketTimeout();
        boolean boolean29 = mongoDBRiverDefinition25.dropCollection;
        int int30 = mongoDBRiverDefinition25.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean31 = mongoDBRiverDefinition25.getdropCollection();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 60000 + "'", int30 == 60000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        builder46.statisticsTypeName = "options";
        boolean boolean51 = builder46.getmongoSecondaryReadPreference();
        boolean boolean52 = builder46.getmongoSSLVerifyCertificate();
        java.lang.String str53 = builder46.getmongoDb();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        java.lang.String str5 = builder4.getmongoLocalPassword();
        java.lang.String str6 = builder4.mongoDb;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder4.setmongoClientOptions(mongoClientOptions7);
        boolean boolean9 = builder4.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.throttleSize(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("null.null");
        boolean boolean14 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean16 = mongoDBRiverDefinition15.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        builder0.mongoUseSSL = true;
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoClientOptions(mongoClientOptions10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverIndexName("null.null");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition4.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition4.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getUSER_FIELD();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.throttleSize((int) (byte) 10);
        boolean boolean6 = builder5.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str8 = mongoDBRiverDefinition7.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str10 = mongoDBRiverDefinition7.includeCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet24 = builder20.getincludeFields();
        boolean boolean25 = builder20.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.riverName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder27.mongoLocalUser = "ssl_verify_certificate";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        java.lang.String str5 = builder4.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoDb("hi!");
        builder11.isMongos = true;
        builder11.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        builder16.setskipInitialImport(true);
        builder16.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject24 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder11.mongoOplogFilter(basicDBObject24);
        builder25.mongoCollection = "name";
        int int28 = builder25.socketTimeout;
        builder25.riverIndexName = "hi!.null";
        java.lang.String str31 = builder25.mongoCollection;
        int int32 = builder25.socketTimeout;
        boolean boolean33 = builder25.getdropCollection();
        java.lang.String str34 = builder25.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.setskipInitialImport(true);
        builder35.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder35.skipInitialImport(false);
        java.lang.String str43 = builder42.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.importAllCollections(true);
        boolean boolean46 = builder45.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        builder47.parentTypes = strSet61;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder45.parentTypes((java.util.Set<java.lang.String>) strSet61);
        builder64.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        java.util.Set<java.lang.String> strSet70 = builder68.parentTypes;
        builder25.setincludeFields(strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder4.parentTypes(strSet70);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "name" + "'", str31, "name");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory48 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        builder49.parentTypes = strSet63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder49.script("port");
        builder67.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings70 = null;
        org.elasticsearch.common.settings.Settings settings71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        builder72.setskipInitialImport(true);
        builder72.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder72.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject80 = builder72.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings71, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings70, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        builder67.setmongoCollectionFilter(basicDBObject80);
        org.elasticsearch.script.ExecutableScript executableScript84 = docScoreNativeScriptFactory48.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        builder5.setmongoCollectionFilter(basicDBObject80);
        java.lang.String str86 = builder5.getriverIndexName();
        java.lang.String str87 = builder5.mongoDb;
        builder5.settypeName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition90 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str91 = builder5.getmongoLocalUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList92 = builder5.mongoServers;
        int int93 = builder5.getconnectTimeout();
        builder5.dropCollection = true;
        builder5.mongoUseSSL = false;
        java.lang.String str98 = builder5.getriverName();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(executableScript84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(serverAddressList92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        boolean boolean5 = builder0.getdisableIndexRefresh();
        boolean boolean6 = builder0.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str10 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.mongoLocalPassword;
        int int12 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoServers(serverAddressList15);
        int int17 = builder16.throttleSize;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "servers" + "'", str10, "servers");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        builder46.statisticsTypeName = "options";
        boolean boolean51 = builder46.getmongoSecondaryReadPreference();
        builder46.setindexName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str55 = mongoDBRiverDefinition54.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "skip_initial_import" + "'", str55, "skip_initial_import");
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.scriptType("size");
        java.lang.String str12 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoAdminPassword("");
        builder11.setsocketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoDb("hi!");
        builder10.isMongos = true;
        java.lang.String str13 = builder10.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder16.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder16.script("port");
        builder34.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        builder39.setskipInitialImport(true);
        builder39.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder39.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject47 = builder39.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings48 = new org.elasticsearch.river.RiverSettings(settings38, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.river.RiverSettings riverSettings49 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        builder34.setmongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder10.mongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.script.ExecutableScript executableScript53 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.script.ScriptService scriptService55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "index", riverSettings54, scriptService55);
        int int57 = mongoDBRiverDefinition56.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean58 = mongoDBRiverDefinition56.mongoUseSSL;
        java.util.Set<java.lang.String> strSet59 = mongoDBRiverDefinition56.excludeFields;
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executableScript53);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 30000 + "'", int57 == 30000);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet59);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder10.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str14 = mongoDBRiverDefinition13.getSOCKET_TIMEOUT();
        java.lang.String str15 = mongoDBRiverDefinition13.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "socket_timeout" + "'", str14, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        java.lang.String str7 = builder0.getstatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder0.setmongoOplogFilter(basicDBObject8);
        java.lang.String str10 = builder0.riverName;
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        java.lang.String str19 = builder0.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.throttleSize((int) 'a');
        boolean boolean23 = builder22.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.statisticsTypeName("actions");
        builder25.mongoSSLVerifyCertificate = true;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str6 = mongoDBRiverDefinition2.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int8 = mongoDBRiverDefinition6.throttleSize;
        java.lang.String str9 = mongoDBRiverDefinition6.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str8 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "import_all_collections" + "'", str8, "import_all_collections");
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        java.lang.String str6 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet7 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder10.parentTypes = strSet24;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder10.script("port");
        builder28.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        builder33.setskipInitialImport(true);
        builder33.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject41 = builder33.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        builder28.setmongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.RiverSettings riverSettings45 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.mongoCollectionFilter(basicDBObject41);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.scriptType;
        int int13 = mongoDBRiverDefinition2.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "throttle_size" + "'", str11, "throttle_size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 60000 + "'", int13 == 60000);
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore(10.0f);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        docScoreSearchScript0.setNextScore(1.0f);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("type", "db", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?db?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        java.lang.String str12 = builder10.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoSecondaryReadPreference(true);
        java.lang.String str15 = builder10.gettypeName();
        java.lang.Boolean boolean16 = builder10.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.connectTimeout(60000);
        builder10.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str9 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str10 = mongoDBRiverDefinition2.getBULK_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition3.mongoLocalPassword;
        java.lang.String str6 = mongoDBRiverDefinition3.getMongoAdminPassword();
        java.lang.String str7 = mongoDBRiverDefinition3.getRiverName();
        org.elasticsearch.common.unit.TimeValue timeValue8 = mongoDBRiverDefinition3.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition3.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(serverAddressList9);
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.statisticsTypeName("initial_timestamp");
        builder11.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder16.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder16.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.indexName("password");
        builder36.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder39.parentTypes = strSet53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder39.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.dropCollection(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = builder59.mongoServers;
        java.lang.String str64 = builder59.getscript();
        builder59.setmongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        java.lang.String str69 = builder67.getindexName();
        boolean boolean70 = builder67.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder67.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder73);
        builder73.setskipInitialImport(true);
        builder73.scriptType = "admin";
        java.lang.String[] strArray81 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        builder73.setincludeFields((java.util.Set<java.lang.String>) strSet82);
        builder67.setincludeFields((java.util.Set<java.lang.String>) strSet82);
        builder59.includeFields = strSet82;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet82);
        builder11.excludeFields = strSet82;
        com.mongodb.MongoClientOptions mongoClientOptions89 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder11.mongoClientOptions(mongoClientOptions89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder11.indexName("ssl");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("bulk_size", "type", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?type? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        builder7.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.importAllCollections(true);
        boolean boolean30 = builder29.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        builder5.parentTypes = strSet45;
        builder5.mongoAdminUser = "store_statistics";
        boolean boolean53 = builder5.mongoGridFS;
        boolean boolean54 = builder5.mongoSSLVerifyCertificate;
        builder5.storeStatistics = false;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp57 = builder5.getinitialTimestamp();
        boolean boolean58 = builder5.getstoreStatistics();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(wildcardTimestamp57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getimportAllCollections();
        java.lang.String str3 = builder1.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.mongoGridFS(false);
        builder1.mongoGridFS = true;
        builder1.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder1.riverName("");
        builder1.setskipInitialImport(true);
        boolean boolean15 = builder1.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder16.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder16.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.dropCollection(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder36.mongoServers;
        java.lang.String str41 = builder36.getscript();
        builder36.setmongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        builder44.setskipInitialImport(true);
        builder44.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder44.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject52 = builder44.getmongoCollectionFilter();
        builder36.mongoCollectionFilter = basicDBObject52;
        builder1.mongoCollectionFilter = basicDBObject52;
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(basicDBObject52);
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        builder0.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.socketTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        builder1.setskipInitialImport(true);
        builder1.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder1.skipInitialImport(false);
        java.lang.String str9 = builder8.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminPassword("socket_timeout");
        boolean boolean14 = builder8.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject15 = builder8.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(basicDBObject15);
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean9 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gridfs" + "'", str6, "gridfs");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "socket_timeout" + "'", str7, "socket_timeout");
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        java.lang.String str6 = builder0.indexName;
        builder0.dropCollection = false;
        builder0.statisticsIndexName = "drop_collection";
        builder0.mongoSecondaryReadPreference = true;
        builder0.importAllCollections = false;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder7.mongoClientOptions = mongoClientOptions11;
        java.util.Set<java.lang.String> strSet13 = builder7.getincludeFields();
        java.lang.String str14 = builder7.getriverName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder7.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str19 = mongoDBRiverDefinition18.getFLUSH_INTERVAL_FIELD();
        boolean boolean20 = mongoDBRiverDefinition18.getmongoUseSSL();
        boolean boolean21 = mongoDBRiverDefinition18.getimportAllCollections();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition18.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoCollectionFilter(basicDBObject22);
        boolean boolean24 = builder7.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "flush_interval" + "'", str19, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoCollection();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "exclude_fields" + "'", str2, "exclude_fields");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        builder7.mongoLocalUser = "advanced_transformation";
        builder7.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.riverIndexName("null.gridfs");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        java.lang.String str9 = builder8.mongoAdminUser;
        builder8.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder8.build();
        boolean boolean13 = mongoDBRiverDefinition12.advancedTransformation;
        boolean boolean14 = mongoDBRiverDefinition12.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str6 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean7 = mongoDBRiverDefinition1.mongoGridFS;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "host" + "'", str3, "host");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "socket_timeout" + "'", str6, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.setadvancedTransformation(true);
        builder5.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder5.mongoDb("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str4 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getStatisticsIndexName();
        int int6 = mongoDBRiverDefinition1.getConnectTimeout();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoAdminUser();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoSSLVerifyCertificate(false);
        builder12.setmongoCollection("gridfs");
        int int15 = builder12.getsocketTimeout();
        builder12.statisticsIndexName = "script.default_lang";
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        builder23.setskipInitialImport(true);
        builder23.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject31 = builder23.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings22, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        builder18.setmongoCollectionFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.throttleSize((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder18.disableIndexRefresh(false);
        builder18.mongoSecondaryReadPreference = false;
        builder18.setisMongos((java.lang.Boolean) true);
        builder18.setisMongos((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.mongoOplogFilter;
        int int7 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition2.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        builder0.setmongoSSLVerifyCertificate(false);
        int int6 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        builder7.parentTypes = strSet21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.dropCollection(true);
        int int31 = builder30.getsocketTimeout();
        java.lang.String str32 = builder30.scriptType;
        java.lang.String str33 = builder30.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.util.Set<java.lang.String> strSet35 = builder30.getparentTypes();
        builder0.setparentTypes(strSet35);
        boolean boolean37 = builder0.getdropCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        boolean boolean8 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean10 = builder9.getimportAllCollections();
        java.lang.String str11 = builder9.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder9.getmongoServers();
        boolean boolean13 = builder9.getmongoGridFS();
        builder9.indexName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder16.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder16.throttleSize((int) (byte) 0);
        int int35 = builder16.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        builder36.setskipInitialImport(true);
        builder36.scriptType = "admin";
        java.lang.String[] strArray44 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder36.setincludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet45);
        java.util.Set<java.lang.String> strSet49 = builder16.parentTypes;
        builder9.setexcludeFields(strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder0.excludeFields(strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder52.parentTypes = strSet66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder52.throttleSize((int) (byte) 0);
        int int71 = builder52.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        builder72.setskipInitialImport(true);
        builder72.scriptType = "admin";
        java.lang.String[] strArray80 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        builder72.setincludeFields((java.util.Set<java.lang.String>) strSet81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder52.excludeFields((java.util.Set<java.lang.String>) strSet81);
        java.util.Set<java.lang.String> strSet85 = builder52.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder51.parentTypes(strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition87 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder86);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp88 = mongoDBRiverDefinition87.initialTimestamp;
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(wildcardTimestamp88);
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = builder8.getindexName();
        boolean boolean11 = builder8.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder14.parentTypes = strSet28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet47);
        builder13.includeFields = strSet47;
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet47);
        builder5.typeName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.script = "is_mongos";
        java.lang.String str58 = builder5.mongoLocalPassword;
        builder5.mongoAdminPassword = "port";
        org.bson.types.BSONTimestamp bSONTimestamp61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder5.initialTimestamp(bSONTimestamp61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str49 = mongoDBRiverDefinition48.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition48.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition48.getDB_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition48.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition48.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "advanced_transformation" + "'", str49, "advanced_transformation");
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "db" + "'", str51, "db");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "script_type" + "'", str52, "script_type");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.skipInitialImport(false);
        java.lang.String str7 = builder6.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.scriptType("admin");
        java.lang.String str10 = builder6.includeCollection;
        java.util.Set<java.lang.String> strSet11 = builder6.includeFields;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        builder0.setstatisticsIndexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.dropCollection(false);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoDb("hi!");
        builder29.isMongos = true;
        java.lang.String str32 = builder29.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        builder35.parentTypes = strSet49;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder35.script("port");
        builder53.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings56 = null;
        org.elasticsearch.common.settings.Settings settings57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        builder58.setskipInitialImport(true);
        builder58.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder58.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject66 = builder58.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings67 = new org.elasticsearch.river.RiverSettings(settings57, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings56, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        builder53.setmongoCollectionFilter(basicDBObject66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder29.mongoCollectionFilter(basicDBObject66);
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        builder0.setmongoOplogFilter(basicDBObject66);
        int int73 = builder0.getconnectTimeout();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoLocalUser();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setconnectTimeout((int) '#');
        java.lang.String str16 = builder0.getincludeCollection();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoCollection();
        int int9 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str11 = mongoDBRiverDefinition1.getIncludeCollection();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        java.lang.String str5 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition2.getInitialTimestamp();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertNull(wildcardTimestamp6);
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        builder8.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder8.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoServers(serverAddressList14);
        boolean boolean16 = builder15.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.typeName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.scriptType("exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        java.lang.String str12 = builder5.getmongoDb();
        java.lang.String str13 = builder5.riverIndexName;
        java.lang.String str14 = builder5.indexName;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "password" + "'", str12, "password");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "skip_initial_import" + "'", str14, "skip_initial_import");
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        java.lang.String str21 = builder18.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoLocalPassword("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoDb("hi!");
        builder29.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = builder32.getindexName();
        boolean boolean35 = builder32.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder38.parentTypes = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder38.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder57.parentTypes = strSet71;
        builder56.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        builder37.includeFields = strSet71;
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        builder18.includeFields = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder18.scriptType("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder18.mongoCollection("user.null");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet13 = builder12.getparentTypes();
        java.lang.String str14 = builder12.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        java.lang.String str17 = builder15.getindexName();
        boolean boolean18 = builder15.getmongoSSLVerifyCertificate();
        java.lang.String str19 = builder15.typeName;
        builder15.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.typeName("bulk");
        java.lang.String str24 = builder23.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str27 = builder25.getindexName();
        boolean boolean28 = builder25.getmongoSSLVerifyCertificate();
        java.lang.String str29 = builder25.typeName;
        builder25.riverName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        builder32.setskipInitialImport(true);
        builder32.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder32.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder40.parentTypes = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder39.parentTypes((java.util.Set<java.lang.String>) strSet54);
        builder57.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        builder60.setskipInitialImport(true);
        builder60.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder60.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        builder68.parentTypes = strSet82;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder67.parentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder57.excludeFields((java.util.Set<java.lang.String>) strSet82);
        builder25.includeFields = strSet82;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet82);
        java.util.Set<java.lang.String> strSet89 = builder23.parentTypes;
        builder12.setparentTypes(strSet89);
        java.util.Set<java.lang.String> strSet91 = builder12.parentTypes;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(strSet91);
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.mongoSecondaryReadPreference;
        builder0.mongoLocalPassword = "hi!";
        builder0.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("initial_timestamp");
        boolean boolean11 = builder0.storeStatistics;
        builder0.statisticsTypeName = "import_all_collections";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminPassword("servers");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.Boolean boolean4 = mongoDBRiverDefinition2.isMongos();
        int int5 = mongoDBRiverDefinition2.socketTimeout;
        java.lang.Boolean boolean6 = mongoDBRiverDefinition2.isMongos();
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.getExcludeFields();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "initial_timestamp" + "'", str8, "initial_timestamp");
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder7.mongoClientOptions = mongoClientOptions11;
        java.util.Set<java.lang.String> strSet13 = builder7.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.script("collection");
        builder7.setmongoAdminUser("connect_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder7.mongoClientOptions(mongoClientOptions18);
        java.lang.String str20 = builder19.getstatisticsIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder19.setmongoClientOptions(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str6 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "exclude_fields" + "'", str6, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "socket_timeout" + "'", str7, "socket_timeout");
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        int int5 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.skipInitialImport(true);
        builder9.setmongoAdminUser("ssl_verify_certificate");
        java.lang.String str12 = builder9.mongoAdminUser;
        builder9.settypeName("script");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl_verify_certificate" + "'", str12, "ssl_verify_certificate");
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        java.lang.String str19 = builder0.getindexName();
        java.lang.String str20 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.riverName("local");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.dropCollection(true);
        com.mongodb.BasicDBObject basicDBObject8 = builder5.mongoOplogFilter;
        builder5.mongoGridFS = false;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(basicDBObject8);
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        boolean boolean14 = builder10.mongoSSLVerifyCertificate;
        java.lang.String str15 = builder10.getriverName();
        builder10.mongoSSLVerifyCertificate = true;
        boolean boolean18 = builder10.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str20 = mongoDBRiverDefinition19.getMongoDb();
        boolean boolean21 = mongoDBRiverDefinition19.storeStatistics;
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition19.getParentTypes();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        java.lang.String str19 = builder0.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.throttleSize((int) 'a');
        boolean boolean23 = builder22.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.statisticsTypeName("actions");
        builder22.setmongoGridFS(true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str10 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gridfs" + "'", str11, "gridfs");
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory48 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        builder49.parentTypes = strSet63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder49.script("port");
        builder67.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings70 = null;
        org.elasticsearch.common.settings.Settings settings71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        builder72.setskipInitialImport(true);
        builder72.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder72.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject80 = builder72.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings71, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings70, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        builder67.setmongoCollectionFilter(basicDBObject80);
        org.elasticsearch.script.ExecutableScript executableScript84 = docScoreNativeScriptFactory48.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        builder5.setmongoCollectionFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder5.mongoUseSSL(false);
        builder5.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder5.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet92 = builder5.getparentTypes();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(executableScript84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(strSet92);
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        docScoreSearchScript0.setNextScore((float) 60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setmongoLocalPassword("hi!");
        builder7.mongoLocalPassword = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder14.setriverIndexName("admin");
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        builder18.parentTypes = strSet32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.script("port");
        builder36.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings39 = null;
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.setskipInitialImport(true);
        builder41.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder41.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject49 = builder41.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings50 = new org.elasticsearch.river.RiverSettings(settings40, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings39, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        builder36.setmongoCollectionFilter(basicDBObject49);
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        builder14.mongoCollectionFilter = basicDBObject49;
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder14.mongoClientOptions(mongoClientOptions55);
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        builder56.mongoClientOptions = mongoClientOptions57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        boolean boolean60 = mongoDBRiverDefinition59.isDropCollection();
        com.mongodb.BasicDBObject basicDBObject61 = mongoDBRiverDefinition59.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder7.mongoCollectionFilter(basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.script("throttle_size");
        java.lang.Object obj65 = docScoreSearchScript0.unwrap((java.lang.Object) builder62);
        docScoreSearchScript0.setNextScore((float) 1L);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setskipInitialImport(true);
        builder5.scriptType = "admin";
        builder5.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject15 = builder5.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ScriptService scriptService19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("credentials", "ssl", riverSettings18, scriptService19);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.disableIndexRefresh;
        int int10 = mongoDBRiverDefinition2.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition2.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition2.getIncludeFields();
        boolean boolean13 = mongoDBRiverDefinition2.dropCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getscript();
        builder5.importAllCollections = false;
        java.lang.Boolean boolean9 = builder5.isMongos;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoAdminPassword;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "actions" + "'", str3, "actions");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_bulk_requests" + "'", str4, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("disable_index_refresh");
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) builder29);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder29.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.riverName("is_mongos");
        builder34.setincludeCollection("import_all_collections");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        java.lang.String str8 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.scriptType("size");
        builder10.setriverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setisMongos((java.lang.Boolean) true);
        builder20.setmongoDb("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.includeCollection("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.lang.String str29 = builder27.script;
        java.lang.String str30 = builder27.typeName;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "disable_index_refresh" + "'", str30, "disable_index_refresh");
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(false);
        builder0.setmongoUseSSL(true);
        builder0.mongoDb = "collection";
        builder0.mongoUseSSL = true;
        java.util.Set<java.lang.String> strSet14 = builder0.includeFields;
        builder0.statisticsIndexName = "script_type";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder10.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str14 = mongoDBRiverDefinition13.getSOCKET_TIMEOUT();
        java.lang.String str15 = mongoDBRiverDefinition13.getDEFAULT_DB_HOST();
        java.lang.String str16 = mongoDBRiverDefinition13.getINDEX_OBJECT();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "socket_timeout" + "'", str14, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "localhost" + "'", str15, "localhost");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        boolean boolean3 = builder0.getmongoUseSSL();
        builder0.includeCollection = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.importAllCollections(true);
        builder0.setconnectTimeout((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoServers(serverAddressList26);
        builder27.setriverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder27.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition1.isMongos();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition2.getInitialTimestamp();
        boolean boolean8 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str9 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "admin" + "'", str5, "admin");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        builder49.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder49.mongoDb("hi!");
        builder54.isMongos = true;
        java.lang.String str57 = builder54.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.mongoSSLVerifyCertificate(false);
        java.lang.String str60 = builder59.gettypeName();
        java.lang.String str61 = builder59.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder59.mongoSecondaryReadPreference(true);
        builder63.skipInitialImport = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList66 = builder63.mongoServers;
        builder5.mongoServers = serverAddressList66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        builder68.setskipInitialImport(true);
        builder68.scriptType = "admin";
        builder68.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder68.isMongos((java.lang.Boolean) false);
        builder68.setriverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray93 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet94 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet94, strArray93);
        builder80.parentTypes = strSet94;
        builder68.excludeFields = strSet94;
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet94);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(serverAddressList66);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition4.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition4.getDB_FIELD();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "db" + "'", str8, "db");
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        java.lang.Object obj9 = null;
        docScoreSearchScript0.setNextVar("drop_collection", obj9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        boolean boolean14 = builder11.getmongoUseSSL();
        builder11.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.mongoLocalUser("collection");
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        // The following exception was thrown during execution in test generation
        try {
            float float20 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        java.util.Set<java.lang.String> strSet30 = builder29.getexcludeFields();
        java.lang.String str31 = builder29.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.scriptType("drop_collection");
        boolean boolean34 = builder29.mongoSecondaryReadPreference;
        boolean boolean35 = builder29.getdropCollection();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.Boolean boolean11 = mongoDBRiverDefinition2.isMongos;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition2.parentTypes;
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition2.getParentTypes();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition2.getMongoServers();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(serverAddressList14);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        java.lang.String str6 = builder0.indexName;
        builder0.dropCollection = false;
        java.lang.String str9 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = mongoDBRiverDefinition11.getDEFAULT_BULK_SIZE();
        java.lang.String str13 = mongoDBRiverDefinition11.statisticsTypeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition11.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoServers(serverAddressList14);
        builder0.disableIndexRefresh = true;
        builder0.statisticsTypeName = "concurrent_bulk_requests";
        java.util.Set<java.lang.String> strSet20 = builder0.parentTypes;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder4.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers(serverAddressList8);
        builder9.typeName = "include_collection";
        builder9.mongoAdminUser = "throttle_size";
        int int14 = builder9.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str16 = mongoDBRiverDefinition15.getScript();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str5 = mongoDBRiverDefinition4.scriptType;
        java.lang.String str6 = mongoDBRiverDefinition4.getSSL_CONNECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition4.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings8 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService scriptService9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("type", "script.disable_dynamic", riverSettings8, scriptService9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl" + "'", str6, "ssl");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondary_read_preference" + "'", str11, "secondary_read_preference");
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        boolean boolean16 = mongoDBRiverDefinition15.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        java.lang.Boolean boolean12 = builder9.isMongos;
        java.lang.String str13 = builder9.getmongoCollection();
        java.util.Set<java.lang.String> strSet14 = builder9.getparentTypes();
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + false + "'", boolean12, false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.indexName;
        java.lang.String str21 = builder0.mongoCollection;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        boolean boolean8 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "throttle_size" + "'", str11, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        java.lang.String str6 = mongoDBRiverDefinition4.getIncludeCollection();
        boolean boolean7 = mongoDBRiverDefinition4.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition4.getPORT_FIELD();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition4.mongoOplogFilter;
        boolean boolean10 = mongoDBRiverDefinition4.isSkipInitialImport();
        boolean boolean11 = mongoDBRiverDefinition4.isMongoUseSSL();
        java.lang.String str12 = mongoDBRiverDefinition4.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "localhost" + "'", str12, "localhost");
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.settypeName("socket_timeout");
        builder0.script = "store_statistics";
        builder0.setthrottleSize(10);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        java.lang.String str9 = builder8.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = builder10.getindexName();
        boolean boolean13 = builder10.getmongoSSLVerifyCertificate();
        java.lang.String str14 = builder10.typeName;
        builder10.riverName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.setskipInitialImport(true);
        builder17.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder17.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder25.parentTypes = strSet39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet39);
        builder42.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        builder45.setskipInitialImport(true);
        builder45.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder45.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        builder53.parentTypes = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder52.parentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder42.excludeFields((java.util.Set<java.lang.String>) strSet67);
        builder10.includeFields = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder73);
        java.lang.String str75 = builder73.mongoAdminUser;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        builder18.mongoClientOptions = mongoClientOptions20;
        boolean boolean22 = builder18.getmongoUseSSL();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        boolean boolean4 = builder0.storeStatistics;
        java.lang.String str5 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean7 = mongoDBRiverDefinition6.skipInitialImport;
        java.lang.String str8 = mongoDBRiverDefinition6.getTypeName();
        boolean boolean9 = mongoDBRiverDefinition6.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.mongoLocalUser;
        java.lang.String str8 = builder0.getscript();
        java.lang.String str9 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        builder0.setstatisticsIndexName("local");
        int int7 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder0.getinitialTimestamp();
        builder0.mongoSSLVerifyCertificate = false;
        java.lang.String str11 = builder0.mongoDb;
        java.lang.String str12 = builder0.includeCollection;
        builder0.setriverIndexName("gridfs");
        java.lang.String str15 = builder0.mongoAdminUser;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.setskipInitialImport(true);
        builder28.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder36.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder25.excludeFields((java.util.Set<java.lang.String>) strSet50);
        builder54.mongoLocalPassword = "store_statistics";
        builder54.isMongos = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        builder59.parentTypes = strSet73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder59.throttleSize((int) (byte) 0);
        int int78 = builder59.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        builder79.setskipInitialImport(true);
        builder79.scriptType = "admin";
        java.lang.String[] strArray87 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet88 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        builder79.setincludeFields((java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder59.excludeFields((java.util.Set<java.lang.String>) strSet88);
        builder91.statisticsTypeName = "throttle_size";
        builder91.script = "initial_timestamp";
        com.mongodb.BasicDBObject basicDBObject96 = builder91.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder54.mongoOplogFilter(basicDBObject96);
        boolean boolean98 = builder54.dropCollection;
        boolean boolean99 = builder54.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(basicDBObject96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder4.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers(serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder10.parentTypes = strSet24;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder10.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        int int31 = builder29.getsocketTimeout();
        java.lang.String str32 = builder29.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        builder29.excludeFields = strSet47;
        builder10.parentTypes = strSet47;
        builder9.parentTypes = strSet47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder9.scriptType("actions");
        builder9.disableIndexRefresh = false;
        java.lang.String str57 = builder9.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        builder58.setskipInitialImport(true);
        builder58.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder58.skipInitialImport(false);
        java.lang.String str66 = builder65.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder65.importAllCollections(true);
        boolean boolean69 = builder68.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        builder70.parentTypes = strSet84;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder68.parentTypes((java.util.Set<java.lang.String>) strSet84);
        builder87.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder87.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition92 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder91);
        java.util.Set<java.lang.String> strSet93 = builder91.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder9.includeFields(strSet93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder9.importAllCollections(true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        java.lang.String str5 = builder4.getmongoLocalPassword();
        builder4.setconnectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.statisticsTypeName("throttle_size");
        boolean boolean10 = builder4.getadvancedTransformation();
        builder4.setsocketTimeout((int) (byte) 100);
        builder4.socketTimeout = 1000;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder4.socketTimeout((int) (byte) 1);
        java.lang.String str17 = builder4.getscript();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str6 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.mongoAdminUser;
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str10 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setmongoLocalPassword("hi!");
        builder0.mongoLocalPassword = "is_mongos";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoSecondaryReadPreference = true;
        builder0.setmongoDb("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoAdminPassword();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.statisticsIndexName;
        java.lang.String str9 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str11 = mongoDBRiverDefinition2.statisticsTypeName;
        boolean boolean12 = mongoDBRiverDefinition2.getdisableIndexRefresh();
        java.lang.String str13 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "options" + "'", str13, "options");
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getmongoAdminUser();
        boolean boolean8 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.storeStatistics(false);
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getimportAllCollections();
        java.lang.String str16 = builder14.getmongoAdminUser();
        java.lang.String str17 = builder14.typeName;
        builder14.setmongoCollection("gridfs");
        builder14.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder14.build();
        org.elasticsearch.common.logging.ESLogger eSLogger23 = mongoDBRiverDefinition22.getlogger();
        java.lang.String str24 = mongoDBRiverDefinition22.getTHROTTLE_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject25 = mongoDBRiverDefinition22.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        org.elasticsearch.river.RiverSettings riverSettings28 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoCollectionFilter(basicDBObject25);
        java.lang.String str30 = builder29.getriverIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNotNull(eSLogger23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "throttle_size" + "'", str24, "throttle_size");
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean8 = builder7.getimportAllCollections();
        java.lang.String str9 = builder7.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(false);
        java.lang.String str12 = builder11.getmongoLocalPassword();
        java.lang.String str13 = builder11.mongoDb;
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder11.setmongoClientOptions(mongoClientOptions14);
        boolean boolean16 = builder11.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.throttleSize(27017);
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.mongoCollectionFilter(basicDBObject19);
        boolean boolean21 = builder20.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        builder7.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.importAllCollections(true);
        boolean boolean30 = builder29.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        builder5.parentTypes = strSet45;
        builder5.mongoAdminUser = "store_statistics";
        java.lang.String str53 = builder5.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str55 = builder5.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        builder19.mongoCollection = "name";
        int int22 = builder19.socketTimeout;
        java.lang.String str23 = builder19.statisticsTypeName;
        builder19.mongoLocalPassword = "include_collection";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoLocalUser("");
        boolean boolean25 = builder18.importAllCollections;
        builder18.setmongoLocalUser("user");
        builder18.skipInitialImport = true;
        builder18.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.common.logging.ESLogger eSLogger33 = mongoDBRiverDefinition32.getlogger();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(eSLogger33);
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.mongoCollection;
        java.lang.String str5 = mongoDBRiverDefinition2.typeName;
        java.lang.String str6 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoCollection();
        java.lang.String str8 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        builder10.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.storeStatistics(true);
        builder10.statisticsIndexName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder27.parentTypes = strSet41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder26.parentTypes((java.util.Set<java.lang.String>) strSet41);
        builder44.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.setskipInitialImport(true);
        builder47.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder47.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder55.parentTypes = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder54.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet69);
        java.util.Set<java.lang.String> strSet74 = builder44.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder10.parentTypes(strSet74);
        builder10.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder10.mongoDb("script.disable_dynamic");
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder79.getmongoClientOptions();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(mongoClientOptions80);
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.indexName;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "password" + "'", str5, "password");
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.includeCollection("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder14.parentTypes = strSet28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.throttleSize((int) (byte) 0);
        int int33 = builder14.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        java.lang.String[] strArray42 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder34.setincludeFields((java.util.Set<java.lang.String>) strSet43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet43);
        builder46.statisticsTypeName = "throttle_size";
        org.elasticsearch.common.settings.Settings settings49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSERVERS_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition51.getGRIDFS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition51.getACTIONS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition51.getSCRIPT_TYPE_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition51.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger57 = mongoDBRiverDefinition51.getlogger();
        com.mongodb.BasicDBObject basicDBObject58 = mongoDBRiverDefinition51.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings49, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        builder46.mongoCollectionFilter = basicDBObject58;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder11.mongoOplogFilter(basicDBObject58);
        org.bson.types.Binary binary62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.initialTimestamp(binary62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "servers" + "'", str52, "servers");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gridfs" + "'", str53, "gridfs");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "script_type" + "'", str55, "script_type");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "import_all_collections" + "'", str56, "import_all_collections");
        org.junit.Assert.assertNotNull(eSLogger57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = mongoDBRiverDefinition19.mongoLocalPassword;
        java.lang.String str21 = mongoDBRiverDefinition19.script;
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSSLVerifyCertificate();
        java.lang.String str23 = mongoDBRiverDefinition19.statisticsIndexName;
        int int24 = mongoDBRiverDefinition19.getConnectTimeout();
        boolean boolean25 = mongoDBRiverDefinition19.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        builder0.setmongoDb("hi!.null");
        builder0.setincludeCollection("local");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        boolean boolean14 = builder10.skipInitialImport;
        java.lang.String str15 = builder10.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.scriptType(".scripts");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.isDropCollection();
        java.lang.String str5 = mongoDBRiverDefinition3.statisticsTypeName;
        boolean boolean6 = mongoDBRiverDefinition3.isMongoSSLVerifyCertificate();
        java.lang.String str7 = mongoDBRiverDefinition3.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition3.getDEFAULT_DB_HOST();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_requests" + "'", str7, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "localhost" + "'", str8, "localhost");
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.getMongoCollection();
        java.lang.String str8 = mongoDBRiverDefinition6.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition6.typeName;
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition6.mongoOplogFilter;
        java.lang.String str11 = mongoDBRiverDefinition6.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition6.getExcludeFields();
        java.lang.String str13 = mongoDBRiverDefinition6.getSERVERS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition6.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "servers" + "'", str13, "servers");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.getmongoLocalUser();
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(false);
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getSERVERS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getGRIDFS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition5.getACTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.getSCRIPT_TYPE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition5.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger11 = mongoDBRiverDefinition5.getlogger();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition5.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "servers" + "'", str6, "servers");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "actions" + "'", str8, "actions");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
        org.junit.Assert.assertNotNull(eSLogger11);
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition2.getIS_MONGOS_FIELD();
        int int7 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition2.isMongoUseSSL();
        java.lang.Boolean boolean9 = mongoDBRiverDefinition2.isMongos();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "is_mongos" + "'", str6, "is_mongos");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoAdminPassword("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getLOCAL_DB_FIELD();
        int int9 = mongoDBRiverDefinition7.getThrottleSize();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        builder0.storeStatistics = true;
        boolean boolean6 = builder0.getskipInitialImport();
        boolean boolean7 = builder0.disableIndexRefresh;
        builder0.mongoLocalPassword = "";
        java.lang.String str10 = builder0.riverIndexName;
        builder0.throttleSize = '#';
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoOplogFilter;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        builder10.mongoLocalUser = "null.null";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.scriptType("options");
        boolean boolean18 = builder17.getstoreStatistics();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder17.setmongoClientOptions(mongoClientOptions19);
        builder17.setstatisticsTypeName("size");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.storeStatistics;
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition3.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition3.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition3.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition3.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "import_all_collections" + "'", str6, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "skip_initial_import" + "'", str7, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        builder0.storeStatistics = true;
        builder0.typeName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoUseSSL = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean7 = mongoDBRiverDefinition6.getmongoGridFS();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition6.getisMongos();
        java.lang.String str9 = mongoDBRiverDefinition6.getHOST_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "host" + "'", str9, "host");
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        java.lang.String str6 = builder0.mongoLocalUser;
        java.lang.String str7 = builder0.getmongoCollection();
        builder0.setsocketTimeout(30000);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition4.getRiverName();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition4.getMongoOplogFilter();
        boolean boolean8 = mongoDBRiverDefinition4.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition4.riverName;
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition4.getParentTypes();
        java.lang.String str11 = mongoDBRiverDefinition4.getMongoLocalUser();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition21.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition21.getMongoLocalUser();
        java.lang.String str24 = mongoDBRiverDefinition21.getDEFAULT_DB_HOST();
        int int25 = mongoDBRiverDefinition21.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean26 = mongoDBRiverDefinition21.isSkipInitialImport();
        java.lang.String str27 = mongoDBRiverDefinition21.getCREDENTIALS_FIELD();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition21.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition21.getMongoCollectionFilter();
        java.lang.String str30 = mongoDBRiverDefinition21.getSTORE_STATISTICS_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition21.getADMIN_DB_FIELD();
        java.lang.String str32 = mongoDBRiverDefinition21.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "localhost" + "'", str24, "localhost");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "credentials" + "'", str27, "credentials");
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "store_statistics" + "'", str30, "store_statistics");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "admin" + "'", str31, "admin");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        builder0.setstatisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.Boolean boolean21 = mongoDBRiverDefinition20.isMongos();
        java.lang.String str22 = mongoDBRiverDefinition20.mongoDb;
        java.lang.Boolean boolean23 = mongoDBRiverDefinition20.isMongos;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.isDropCollection();
        java.lang.String str5 = mongoDBRiverDefinition3.statisticsTypeName;
        java.lang.String str6 = mongoDBRiverDefinition3.getMongoLocalPassword();
        java.lang.String str7 = mongoDBRiverDefinition3.getPORT_FIELD();
        int int8 = mongoDBRiverDefinition3.socketTimeout;
        java.lang.String str9 = mongoDBRiverDefinition3.getIncludeCollection();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.setadvancedTransformation(true);
        boolean boolean49 = builder5.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder5.typeName("");
        java.lang.String str52 = builder51.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str54 = mongoDBRiverDefinition53.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "filter" + "'", str54, "filter");
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        builder46.statisticsTypeName = "options";
        boolean boolean51 = builder46.getmongoSecondaryReadPreference();
        builder46.setmongoDb("user");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        java.util.Set<java.lang.String> strSet6 = builder0.getincludeFields();
        boolean boolean7 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setskipInitialImport(true);
        boolean boolean12 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalUser("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder15.parentTypes = strSet29;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder15.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        int int36 = builder34.getsocketTimeout();
        java.lang.String str37 = builder34.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder38.parentTypes = strSet52;
        builder34.excludeFields = strSet52;
        builder15.parentTypes = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet52);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str59 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.statisticsIndexName("store_statistics");
        boolean boolean62 = builder0.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoAdminUser();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminPassword;
        boolean boolean9 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteSizeValue10);
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        java.lang.String str6 = builder0.mongoLocalUser;
        builder0.mongoLocalUser = "credentials";
        builder0.setmongoLocalUser("db");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.mongoLocalUser("parent_types");
        builder29.setadvancedTransformation(false);
        builder29.setmongoDb("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder29.mongoDb("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder29.mongoLocalUser("collection");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str5 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str7 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "actions" + "'", str7, "actions");
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getStatisticsTypeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "actions" + "'", str8, "actions");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str26 = mongoDBRiverDefinition25.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions27 = mongoDBRiverDefinition25.getMongoClientOptions();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ssl_verify_certificate" + "'", str26, "ssl_verify_certificate");
        org.junit.Assert.assertNull(mongoClientOptions27);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        boolean boolean7 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        java.lang.String str9 = builder0.getmongoDb();
        builder0.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        builder13.storeStatistics = true;
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.common.settings.Settings settings18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean20 = builder19.getimportAllCollections();
        java.lang.String str21 = builder19.getmongoAdminUser();
        java.lang.String str22 = builder19.typeName;
        builder19.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject25 = builder19.getmongoCollectionFilter();
        java.lang.String str26 = builder19.getmongoAdminUser();
        java.lang.String str27 = builder19.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.setskipInitialImport(true);
        builder28.scriptType = "admin";
        builder28.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder28.isMongos((java.lang.Boolean) false);
        builder37.riverName = "servers";
        com.mongodb.BasicDBObject basicDBObject40 = builder37.mongoCollectionFilter;
        builder19.mongoCollectionFilter = basicDBObject40;
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        builder13.mongoCollectionFilter = basicDBObject40;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gridfs" + "'", str27, "gridfs");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(basicDBObject40);
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("gridfs", "bulk", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?bulk?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        boolean boolean8 = mongoDBRiverDefinition1.isMongoGridFS();
        int int9 = mongoDBRiverDefinition1.socketTimeout;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        builder0.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverName("");
        builder0.setmongoAdminUser("admin");
        java.lang.String str14 = builder0.riverName;
        builder0.skipInitialImport = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str9 = mongoDBRiverDefinition1.scriptType;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_timeout" + "'", str6, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.indexName = "";
        boolean boolean3 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.lang.String str7 = builder4.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder4.mongoServers;
        builder0.setmongoServers(serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("servers");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("bulk", "admin");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?admin?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        builder4.mongoDb = "socket_timeout";
        boolean boolean7 = builder4.mongoSSLVerifyCertificate;
        java.lang.String str8 = builder4.mongoCollection;
        java.util.Set<java.lang.String> strSet9 = builder4.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        builder0.setstatisticsIndexName("local");
        int int7 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder0.getinitialTimestamp();
        builder0.mongoSSLVerifyCertificate = false;
        java.lang.String str11 = builder0.mongoDb;
        builder0.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean12 = builder0.dropCollection;
        java.util.Set<java.lang.String> strSet13 = builder0.includeFields;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition2.mongoOplogFilter;
        java.lang.String str11 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str12 = mongoDBRiverDefinition2.mongoAdminUser;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        builder10.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.statisticsIndexName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.scriptType("name");
        builder18.mongoDb = "script.default_lang";
        builder18.mongoLocalPassword = "";
        builder18.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str28 = mongoDBRiverDefinition27.getADMIN_DB_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "admin" + "'", str28, "admin");
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("disable_index_refresh");
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) builder29);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder29.getinitialTimestamp();
        builder29.skipInitialImport = true;
        java.lang.String str34 = builder29.getriverName();
        java.lang.String str35 = builder29.scriptType;
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder32.statisticsTypeName = "throttle_size";
        builder32.script = "initial_timestamp";
        java.lang.String str37 = builder32.getmongoLocalUser();
        builder32.setmongoGridFS(false);
        java.lang.String str40 = builder32.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        builder32.mongoAdminPassword = "ssl";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition4.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.statisticsTypeName;
        java.lang.String str8 = mongoDBRiverDefinition4.getMongoAdminUser();
        java.lang.String str9 = mongoDBRiverDefinition4.getBULK_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition4.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_size" + "'", str9, "bulk_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.isStoreStatistics();
        java.lang.String str12 = mongoDBRiverDefinition10.getScriptType();
        java.lang.String str13 = mongoDBRiverDefinition10.getLOCAL_DB_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition10.getlogger();
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "admin" + "'", str12, "admin");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertNotNull(eSLogger14);
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.setmongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.throttleSize(100);
        boolean boolean16 = builder10.mongoGridFS;
        builder10.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        builder4.setsocketTimeout(1);
        boolean boolean7 = builder4.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.isMongos((java.lang.Boolean) false);
        int int10 = builder9.getthrottleSize();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.advancedTransformation;
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str5 = mongoDBRiverDefinition1.typeName;
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean7 = mongoDBRiverDefinition1.advancedTransformation;
        boolean boolean8 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "exclude_fields" + "'", str2, "exclude_fields");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoLocalPassword("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.lang.String str23 = mongoDBRiverDefinition22.getMongoOplogNamespace();
        int int24 = mongoDBRiverDefinition22.getSocketTimeout();
        java.lang.String str25 = mongoDBRiverDefinition22.getRiverName();
        boolean boolean26 = mongoDBRiverDefinition22.storeStatistics;
        boolean boolean27 = mongoDBRiverDefinition22.isMongoUseSSL();
        java.lang.String str28 = mongoDBRiverDefinition22.getBULK_SIZE_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition22.getPORT_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition22.getINCLUDE_COLLECTION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = mongoDBRiverDefinition22.initialTimestamp;
        java.lang.String str32 = mongoDBRiverDefinition22.mongoAdminPassword;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "null.null" + "'", str23, "null.null");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bulk_size" + "'", str28, "bulk_size");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "port" + "'", str29, "port");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "include_collection" + "'", str30, "include_collection");
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        int int9 = builder8.connectTimeout;
        java.lang.String str10 = builder8.riverIndexName;
        builder8.skipInitialImport = false;
        boolean boolean13 = builder8.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        builder23.setskipInitialImport(true);
        builder23.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject31 = builder23.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings22, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject31);
        builder18.setmongoCollectionFilter(basicDBObject31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.mongoUseSSL(true);
        builder36.setmongoCollection("bulk_timeout");
        builder36.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder2.parentTypes = strSet16;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder2.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        builder22.setisMongos((java.lang.Boolean) true);
        builder22.setmongoDb("actions");
        java.lang.String str28 = builder22.getmongoCollection();
        int int29 = builder22.connectTimeout;
        java.lang.String str30 = builder22.mongoLocalUser;
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder33.script("port");
        java.lang.String str52 = builder33.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder53.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean57 = builder56.getimportAllCollections();
        java.lang.String str58 = builder56.getmongoAdminUser();
        java.lang.String str59 = builder56.typeName;
        boolean boolean60 = builder56.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder56.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        java.lang.String str67 = builder64.getmongoLocalUser();
        builder64.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList70 = builder64.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder56.mongoServers(serverAddressList70);
        boolean boolean72 = builder71.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet73 = builder71.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder74);
        java.lang.String str76 = mongoDBRiverDefinition75.getSSL_CONNECTION_FIELD();
        boolean boolean77 = mongoDBRiverDefinition75.isStoreStatistics();
        java.lang.String str78 = mongoDBRiverDefinition75.getLOCAL_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition75.getMongoCollectionFilter();
        builder71.mongoCollectionFilter = basicDBObject79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder53.mongoOplogFilter(basicDBObject79);
        builder33.setmongoOplogFilter(basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings83 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings84 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder22.mongoOplogFilter(basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings86 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings87 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(serverAddressList70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ssl" + "'", str76, "ssl");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "local" + "'", str78, "local");
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        builder5.riverName = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder5.mongoAdminPassword("advanced_transformation");
        builder15.mongoLocalUser = "localhost";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder6.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder6.script("port");
        builder24.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        builder29.setskipInitialImport(true);
        builder29.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder29.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject37 = builder29.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings38 = new org.elasticsearch.river.RiverSettings(settings28, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        builder24.setmongoCollectionFilter(basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings41 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject37);
        java.util.Map<java.lang.String, java.lang.Object> strMap44 = riverSettings43.settings();
        org.elasticsearch.river.RiverSettings riverSettings45 = new org.elasticsearch.river.RiverSettings(settings2, strMap44);
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = riverSettings45.settings();
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings1, strMap46);
        org.elasticsearch.river.RiverSettings riverSettings48 = new org.elasticsearch.river.RiverSettings(settings0, strMap46);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean7 = mongoDBRiverDefinition6.getmongoGridFS();
        int int8 = mongoDBRiverDefinition6.connectTimeout;
        int int9 = mongoDBRiverDefinition6.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 60000 + "'", int9 == 60000);
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.getMongoCollection();
        int int8 = mongoDBRiverDefinition6.getThrottleSize();
        int int9 = mongoDBRiverDefinition6.throttleSize;
        java.lang.String str10 = mongoDBRiverDefinition6.getRiverName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder10.initialTimestamp;
        builder10.setmongoSecondaryReadPreference(true);
        builder10.setconnectTimeout((int) (short) -1);
        java.lang.String str17 = builder10.getstatisticsIndexName();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str5 = mongoDBRiverDefinition2.getIS_MONGOS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getSIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "is_mongos" + "'", str5, "is_mongos");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "store_statistics" + "'", str12, "store_statistics");
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        builder3.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.mongoDb("hi!");
        builder8.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str13 = builder11.getindexName();
        boolean boolean14 = builder11.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder17.parentTypes = strSet31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder17.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder36.parentTypes = strSet50;
        builder35.setexcludeFields((java.util.Set<java.lang.String>) strSet50);
        builder16.includeFields = strSet50;
        builder8.setparentTypes((java.util.Set<java.lang.String>) strSet50);
        builder0.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.socketTimeout(30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoSSLVerifyCertificate(true);
        builder60.advancedTransformation = true;
        java.lang.String str63 = builder60.getindexName();
        builder60.settypeName("include_fields");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = builder8.getindexName();
        boolean boolean11 = builder8.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder14.parentTypes = strSet28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet47);
        builder13.includeFields = strSet47;
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet47);
        builder5.typeName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder5.throttleSize((int) (short) 100);
        org.elasticsearch.common.settings.Settings settings58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean60 = builder59.getimportAllCollections();
        java.lang.String str61 = builder59.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder59.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder59.mongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet66 = builder65.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject67 = builder65.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings58, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        builder57.mongoOplogFilter = basicDBObject67;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(basicDBObject67);
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition4.mongoOplogFilter;
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition4.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertNotNull(timeValue7);
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        int int5 = mongoDBRiverDefinition1.getThrottleSize();
        boolean boolean6 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        int int8 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean9 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        boolean boolean10 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.connectTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoClientOptions(mongoClientOptions5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = builder0.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.isDropCollection();
        boolean boolean5 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        boolean boolean6 = mongoDBRiverDefinition3.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition3.getMongoCollectionFilter();
        boolean boolean8 = mongoDBRiverDefinition3.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        boolean boolean10 = mongoDBRiverDefinition2.isDropCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        java.lang.String str6 = builder0.indexName;
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str10 = mongoDBRiverDefinition9.getMongoAdminPassword();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        boolean boolean12 = builder9.getmongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition2.getBULK_TIMEOUT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.isDropCollection();
        java.lang.String str10 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        int int11 = mongoDBRiverDefinition2.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition2.getINDEX_OBJECT();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition2.initialTimestamp;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "local" + "'", str5, "local");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
        org.junit.Assert.assertNull(wildcardTimestamp13);
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.Boolean boolean4 = mongoDBRiverDefinition2.isMongos();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition2.typeName;
        java.lang.String str8 = mongoDBRiverDefinition2.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.getstoreStatistics();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.setriverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean9 = builder0.dropCollection;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder0.mongoServers;
        builder0.settypeName("skip_initial_import");
        builder0.setincludeCollection("concurrent_requests");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serverAddressList10);
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getTYPE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "type" + "'", str8, "type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        boolean boolean12 = builder8.getstoreStatistics();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean15 = builder14.getimportAllCollections();
        java.lang.String str16 = builder14.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder14.getmongoServers();
        boolean boolean18 = builder14.getmongoGridFS();
        builder14.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder14.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.riverIndexName("");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder8.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoOplogFilter(basicDBObject27);
        builder0.mongoSSLVerifyCertificate = false;
        com.mongodb.BasicDBObject basicDBObject32 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject32);
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        builder8.typeName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.socketTimeout(0);
        java.lang.String str13 = builder12.getriverName();
        builder12.statisticsTypeName = "script.disable_dynamic";
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.dropCollection(true);
        int int24 = builder23.getsocketTimeout();
        java.lang.String str25 = builder23.scriptType;
        java.lang.String str26 = builder23.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.mongoUseSSL(true);
        builder29.setmongoCollection("db");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str8 = mongoDBRiverDefinition2.getSIZE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoGridFS();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition2.isMongos;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition2.getMongoOplogFilter();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.getmongoLocalUser();
        builder0.riverName = "store_statistics";
        boolean boolean6 = builder0.mongoGridFS;
        com.mongodb.BasicDBObject basicDBObject7 = builder0.mongoOplogFilter;
        builder0.riverName = "null.null";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(basicDBObject7);
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminPassword("exclude_fields");
        builder10.setstatisticsIndexName("password");
        boolean boolean13 = builder10.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        boolean boolean16 = mongoDBRiverDefinition14.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        builder6.setstoreStatistics(true);
        boolean boolean14 = builder6.importAllCollections;
        int int15 = builder6.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getimportAllCollections();
        java.lang.String str18 = builder16.getmongoAdminUser();
        java.lang.String str19 = builder16.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder16.mongoServers;
        builder6.setmongoServers(serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers(serverAddressList20);
        builder0.setriverIndexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder25.parentTypes = strSet39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder25.script("port");
        builder43.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.mongoLocalPassword("");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder0.mongoOplogFilter(basicDBObject48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.indexName("concurrent_requests");
        java.lang.String str52 = builder51.getmongoDb();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.throttleSize(1000);
        builder0.setmongoLocalPassword("type");
        java.lang.String str8 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int10 = mongoDBRiverDefinition9.socketTimeout;
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isSkipInitialImport();
        int int5 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean6 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str12 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        boolean boolean14 = mongoDBRiverDefinition1.isMongoUseSSL();
        int int15 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index" + "'", str8, "index");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str5 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.Boolean boolean8 = mongoDBRiverDefinition1.getisMongos();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalPassword;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory48 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        builder49.parentTypes = strSet63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder49.script("port");
        builder67.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings70 = null;
        org.elasticsearch.common.settings.Settings settings71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        builder72.setskipInitialImport(true);
        builder72.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder72.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject80 = builder72.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings71, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings70, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        builder67.setmongoCollectionFilter(basicDBObject80);
        org.elasticsearch.script.ExecutableScript executableScript84 = docScoreNativeScriptFactory48.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject80);
        builder5.setmongoCollectionFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder5.mongoUseSSL(false);
        builder87.mongoLocalPassword = "";
        builder87.throttleSize = 'a';
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(executableScript84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((float) 1000);
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.dropCollection(false);
        java.lang.String str35 = builder34.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject36 = builder34.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        builder6.mongoCollectionFilter = basicDBObject36;
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(basicDBObject36);
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.indexName;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = mongoDBRiverDefinition2.initialTimestamp;
        java.lang.String str10 = mongoDBRiverDefinition2.getMongoAdminPassword();
        java.lang.String str11 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition2.mongoServers;
        java.lang.String str13 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.null" + "'", str13, "null.null");
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        boolean boolean7 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        java.lang.String str9 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSSLVerifyCertificate(false);
        builder0.statisticsTypeName = "localhost";
        java.lang.String str14 = builder0.mongoAdminPassword;
        builder0.setthrottleSize((int) (short) -1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setriverIndexName("admin");
        builder2.storeStatistics = false;
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getimportAllCollections();
        java.lang.String str10 = builder8.getmongoAdminUser();
        java.lang.String str11 = builder8.typeName;
        builder8.setmongoCollection("gridfs");
        builder8.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder8.build();
        builder8.importAllCollections = true;
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str22 = mongoDBRiverDefinition21.scriptType;
        java.lang.String str23 = mongoDBRiverDefinition21.getTypeName();
        int int24 = mongoDBRiverDefinition21.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str25 = mongoDBRiverDefinition21.getBULK_TIMEOUT_FIELD();
        java.lang.Object obj26 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getimportAllCollections();
        java.lang.String str30 = builder28.getmongoAdminUser();
        java.lang.String str31 = builder28.typeName;
        builder28.setmongoCollection("gridfs");
        java.lang.String str34 = builder28.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.dropCollection(true);
        docScoreSearchScript0.setNextVar("hi!.null", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str41 = mongoDBRiverDefinition40.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet42 = mongoDBRiverDefinition40.getParentTypes();
        java.lang.String str43 = mongoDBRiverDefinition40.getMongoLocalUser();
        boolean boolean44 = mongoDBRiverDefinition40.dropCollection;
        java.lang.String str45 = mongoDBRiverDefinition40.mongoLocalPassword;
        java.lang.String str46 = mongoDBRiverDefinition40.script;
        int int47 = mongoDBRiverDefinition40.getDEFAULT_DB_PORT();
        java.lang.String str48 = mongoDBRiverDefinition40.scriptType;
        java.lang.Object obj49 = docScoreSearchScript0.unwrap((java.lang.Object) str48);
        org.apache.lucene.search.Scorer scorer50 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 60000 + "'", int24 == 60000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bulk_timeout" + "'", str25, "bulk_timeout");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "disable_index_refresh" + "'", str41, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = mongoDBRiverDefinition8.getLOCAL_DB_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoUseSSL();
        java.lang.String str11 = mongoDBRiverDefinition8.getCONCURRENT_REQUESTS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
        org.junit.Assert.assertNotNull(byteSizeValue12);
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoServers(serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.common.settings.Settings settings30 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory31 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder33.throttleSize((int) (byte) 0);
        int int52 = builder33.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        builder53.setskipInitialImport(true);
        builder53.scriptType = "admin";
        java.lang.String[] strArray61 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        builder53.setincludeFields((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder33.excludeFields((java.util.Set<java.lang.String>) strSet62);
        builder65.statisticsTypeName = "throttle_size";
        builder65.script = "initial_timestamp";
        com.mongodb.BasicDBObject basicDBObject70 = builder65.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        org.elasticsearch.script.ExecutableScript executableScript72 = docScoreNativeScriptFactory31.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = null;
        org.elasticsearch.script.ExecutableScript executableScript74 = docScoreNativeScriptFactory31.newScript(strMap73);
        org.elasticsearch.common.settings.Settings settings75 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean77 = builder76.getimportAllCollections();
        java.lang.String str78 = builder76.getmongoAdminUser();
        java.lang.String str79 = builder76.typeName;
        builder76.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject82 = builder76.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings83 = new org.elasticsearch.river.RiverSettings(settings75, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        org.elasticsearch.script.ExecutableScript executableScript84 = docScoreNativeScriptFactory31.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        org.elasticsearch.river.RiverSettings riverSettings85 = new org.elasticsearch.river.RiverSettings(settings30, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        org.elasticsearch.river.RiverSettings riverSettings86 = new org.elasticsearch.river.RiverSettings(settings29, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject82);
        builder27.setmongoOplogFilter(basicDBObject82);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(executableScript72);
        org.junit.Assert.assertNotNull(executableScript74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(basicDBObject82);
        org.junit.Assert.assertNotNull(executableScript84);
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str7 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str12 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str14 = mongoDBRiverDefinition1.mongoLocalUser;
        boolean boolean15 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "db" + "'", str4, "db");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "admin" + "'", str5, "admin");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_size" + "'", str9, "bulk_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "null.null" + "'", str11, "null.null");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gridfs" + "'", str12, "gridfs");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("db", "parent_types");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?parent_types?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getUSER_FIELD();
        int int7 = mongoDBRiverDefinition1.socketTimeout;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.mongoLocalPassword;
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition2.getmongoGridFS();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition2.getRiverName();
        java.lang.String str9 = mongoDBRiverDefinition2.statisticsTypeName;
        org.elasticsearch.common.unit.TimeValue timeValue10 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(timeValue10);
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        java.lang.String[] strArray14 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        builder6.setincludeFields((java.util.Set<java.lang.String>) strSet15);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        int int21 = builder19.getsocketTimeout();
        boolean boolean22 = builder19.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        builder19.mongoServers = serverAddressList26;
        java.lang.String str28 = builder19.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.riverName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        builder35.parentTypes = strSet49;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder35.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        int int56 = builder54.getsocketTimeout();
        java.lang.String str57 = builder54.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        builder58.parentTypes = strSet72;
        builder54.excludeFields = strSet72;
        builder35.parentTypes = strSet72;
        builder34.excludeFields = strSet72;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet72);
        builder0.excludeFields = strSet72;
        builder0.setmongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder0.mongoLocalUser("drop_collection");
        builder83.statisticsIndexName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition86 = builder83.build();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition86);
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject5 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str6 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        boolean boolean3 = builder0.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder4.getmongoServers();
        builder0.mongoServers = serverAddressList7;
        java.lang.String str9 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.riverName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder16.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder16.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        int int37 = builder35.getsocketTimeout();
        java.lang.String str38 = builder35.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder39.parentTypes = strSet53;
        builder35.excludeFields = strSet53;
        builder16.parentTypes = strSet53;
        builder15.excludeFields = strSet53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet53);
        builder0.setsocketTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.dropCollection(false);
        java.lang.String str64 = builder63.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoLocalPassword("servers");
        builder13.setindexName("type");
        builder13.riverName = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet24 = builder20.getincludeFields();
        boolean boolean25 = builder20.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = builder20.build();
        java.lang.String str27 = builder20.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.socketTimeout(0);
        java.util.Set<java.lang.String> strSet30 = builder20.getexcludeFields();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet30);
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.includeCollection;
        int int13 = mongoDBRiverDefinition2.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "throttle_size" + "'", str11, "throttle_size");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.mongoSSLVerifyCertificate = true;
        builder5.mongoUseSSL = false;
        int int51 = builder5.getsocketTimeout();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        java.lang.String str5 = builder4.getmongoLocalPassword();
        builder4.setscript("initial_timestamp");
        boolean boolean8 = builder4.mongoSecondaryReadPreference;
        builder4.mongoLocalPassword = "parent_types";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        int int5 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.dropCollection(false);
        int int12 = builder7.getsocketTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean4 = mongoDBRiverDefinition1.skipInitialImport;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str6 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str7 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "exclude_fields" + "'", str2, "exclude_fields");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "parent_types" + "'", str7, "parent_types");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str6 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_bulk_requests" + "'", str4, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str5 = mongoDBRiverDefinition1.mongoDb;
        boolean boolean6 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean7 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        builder19.mongoCollection = "name";
        int int22 = builder19.socketTimeout;
        builder19.riverIndexName = "hi!.null";
        java.lang.String str25 = builder19.statisticsTypeName;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder27.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        builder33.setskipInitialImport(true);
        builder33.scriptType = "admin";
        builder33.setstoreStatistics(true);
        boolean boolean41 = builder33.importAllCollections;
        int int42 = builder33.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getimportAllCollections();
        java.lang.String str45 = builder43.getmongoAdminUser();
        java.lang.String str46 = builder43.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = builder43.mongoServers;
        builder33.setmongoServers(serverAddressList47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder27.mongoServers(serverAddressList47);
        builder27.setriverIndexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder52.parentTypes = strSet66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder52.script("port");
        builder70.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.mongoLocalPassword("");
        com.mongodb.BasicDBObject basicDBObject75 = builder74.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder27.mongoOplogFilter(basicDBObject75);
        org.elasticsearch.river.RiverSettings riverSettings77 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder19.mongoOplogFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.mongoDb("is_mongos");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str6 = mongoDBRiverDefinition2.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.storeStatistics;
        java.lang.String str8 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str5 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str7 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "skip_initial_import" + "'", str5, "skip_initial_import");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "options" + "'", str7, "options");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "password" + "'", str8, "password");
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.dropCollection(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder20.mongoServers;
        java.lang.String str25 = builder20.getscript();
        builder20.setmongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.statisticsIndexName("include_collection");
        java.lang.String str30 = builder20.includeCollection;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str5 = builder1.getindexName();
        java.lang.Boolean boolean6 = builder1.isMongos;
        builder1.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str12 = builder9.getmongoLocalUser();
        boolean boolean13 = builder9.getstoreStatistics();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder9.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean16 = builder15.getimportAllCollections();
        java.lang.String str17 = builder15.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder15.getmongoServers();
        boolean boolean19 = builder15.getmongoGridFS();
        builder15.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder15.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.riverIndexName("");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder9.mongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder1.mongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        org.elasticsearch.common.settings.Settings settings32 = riverSettings31.globalSettings();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(settings32);
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.indexName("");
        builder0.scriptType = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.socketTimeout((int) (byte) 1);
        java.lang.String str11 = builder10.getstatisticsIndexName();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.riverName = "";
        builder0.setsocketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(true);
        builder12.storeStatistics = true;
        com.mongodb.BasicDBObject basicDBObject15 = builder12.getmongoOplogFilter();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject15);
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        java.lang.String str6 = mongoDBRiverDefinition4.getIncludeCollection();
        boolean boolean7 = mongoDBRiverDefinition4.getimportAllCollections();
        boolean boolean8 = mongoDBRiverDefinition4.mongoSecondaryReadPreference;
        boolean boolean9 = mongoDBRiverDefinition4.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition4.getACTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition4.indexName;
        java.lang.String str12 = mongoDBRiverDefinition4.scriptType;
        boolean boolean13 = mongoDBRiverDefinition4.isImportAllCollections();
        int int14 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str11 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        int int12 = mongoDBRiverDefinition9.connectTimeout;
        java.lang.String str13 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "advanced_transformation" + "'", str11, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsTypeName("is_mongos");
        builder0.mongoAdminPassword = "parent_types";
        builder0.disableIndexRefresh = false;
        boolean boolean14 = builder0.dropCollection;
        builder0.connectTimeout = 8;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoAdminPassword("socket_timeout");
        boolean boolean13 = builder7.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject14 = builder7.mongoCollectionFilter;
        java.lang.String str15 = builder7.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.mongoAdminUser("gridfs");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.throttleSize(0);
        builder0.connectTimeout = 'a';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str13 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str14 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int15 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("disable_index_refresh");
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) builder29);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder29.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean33 = builder32.getimportAllCollections();
        java.lang.String str34 = builder32.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList35 = builder32.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList36 = builder32.getmongoServers();
        builder29.mongoServers = serverAddressList36;
        java.lang.String str38 = builder29.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = builder29.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean41 = builder40.getimportAllCollections();
        java.lang.String str42 = builder40.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList43 = builder40.getmongoServers();
        boolean boolean44 = builder40.getmongoGridFS();
        builder40.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder40.mongoSecondaryReadPreference(true);
        builder40.script = "user";
        com.mongodb.BasicDBObject basicDBObject51 = builder40.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder29.mongoOplogFilter(basicDBObject51);
        java.lang.String str53 = builder52.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.includeCollection("bulk_size");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(serverAddressList35);
        org.junit.Assert.assertNotNull(serverAddressList36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(serverAddressList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str10 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.getParentTypes();
        boolean boolean13 = mongoDBRiverDefinition1.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "skip_initial_import" + "'", str10, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 60000 + "'", int11 == 60000);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str5 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "skip_initial_import" + "'", str5, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "store_statistics" + "'", str6, "store_statistics");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        builder0.throttleSize = (short) 100;
        boolean boolean9 = builder0.mongoSSLVerifyCertificate;
        builder0.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("options");
        java.lang.String str14 = builder13.getriverIndexName();
        builder13.setstatisticsIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str18 = mongoDBRiverDefinition17.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "is_mongos" + "'", str18, "is_mongos");
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition3.mongoLocalPassword;
        java.lang.String str6 = mongoDBRiverDefinition3.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition3.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition3.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition3.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition3.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition3.getExcludeFields();
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition3.getlogger();
        int int13 = mongoDBRiverDefinition3.getThrottleSize();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder8.statisticsIndexName;
        java.lang.String str10 = builder8.getmongoAdminPassword();
        java.lang.String str11 = builder8.mongoCollection;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder0.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.connectTimeout(0);
        builder6.setmongoGridFS(false);
        builder6.setscriptType("name");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setriverIndexName("admin");
        builder2.storeStatistics = false;
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getimportAllCollections();
        java.lang.String str10 = builder8.getmongoAdminUser();
        java.lang.String str11 = builder8.typeName;
        builder8.setmongoCollection("gridfs");
        builder8.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder8.build();
        builder8.importAllCollections = true;
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str22 = mongoDBRiverDefinition21.scriptType;
        java.lang.String str23 = mongoDBRiverDefinition21.getTypeName();
        int int24 = mongoDBRiverDefinition21.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str25 = mongoDBRiverDefinition21.getBULK_TIMEOUT_FIELD();
        java.lang.Object obj26 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.lang.String str29 = mongoDBRiverDefinition28.getSSL_CONNECTION_FIELD();
        int int30 = mongoDBRiverDefinition28.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str31 = mongoDBRiverDefinition28.getADMIN_DB_FIELD();
        int int32 = mongoDBRiverDefinition28.connectTimeout;
        java.lang.Object obj33 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition28);
        boolean boolean34 = mongoDBRiverDefinition28.isStoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 60000 + "'", int24 == 60000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bulk_timeout" + "'", str25, "bulk_timeout");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ssl" + "'", str29, "ssl");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 30000 + "'", int30 == 30000);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "admin" + "'", str31, "admin");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.script;
        java.lang.String str9 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        int int12 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "import_all_collections" + "'", str9, "import_all_collections");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoLocalPassword();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.getExcludeFields();
        java.lang.String str11 = mongoDBRiverDefinition2.getNAME_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "name" + "'", str11, "name");
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        java.lang.String str6 = mongoDBRiverDefinition4.getIncludeCollection();
        boolean boolean7 = mongoDBRiverDefinition4.getimportAllCollections();
        boolean boolean8 = mongoDBRiverDefinition4.mongoSecondaryReadPreference;
        java.lang.String str9 = mongoDBRiverDefinition4.mongoAdminPassword;
        java.lang.String str10 = mongoDBRiverDefinition4.statisticsTypeName;
        boolean boolean11 = mongoDBRiverDefinition4.isStoreStatistics();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        builder18.setmongoDb("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getimportAllCollections();
        java.lang.String str24 = builder22.getmongoAdminUser();
        java.lang.String str25 = builder22.typeName;
        boolean boolean26 = builder22.getstoreStatistics();
        boolean boolean27 = builder22.mongoUseSSL;
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = builder22.mongoServers;
        builder18.setmongoServers(serverAddressList28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.riverIndexName("ssl");
        java.lang.String str35 = builder18.getmongoLocalUser();
        java.lang.String str36 = builder18.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder18.connectTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((-1.0f));
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore((float) 60000);
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.setconnectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.riverIndexName("script.default_lang");
        builder13.mongoAdminPassword = "connect_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.throttleSize((int) (short) 10);
        org.elasticsearch.common.settings.Settings settings18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        java.lang.String str21 = mongoDBRiverDefinition20.getSSL_CONNECTION_FIELD();
        boolean boolean22 = mongoDBRiverDefinition20.isStoreStatistics();
        java.lang.String str23 = mongoDBRiverDefinition20.getLOCAL_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition20.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder13.mongoOplogFilter(basicDBObject24);
        builder13.throttleSize = ' ';
        builder13.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ssl" + "'", str21, "ssl");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "local" + "'", str23, "local");
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(builder26);
    }
}

