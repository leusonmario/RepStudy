import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.mongoLocalPassword;
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str7 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.dropCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("bulk_size", "is_mongos");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?is_mongos?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setscriptType("collection");
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("");
        builder13.setriverIndexName("");
        builder13.statisticsIndexName = "skip_initial_import";
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject28 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        builder18.setmongoOplogFilter(basicDBObject28);
        java.lang.String str31 = builder18.getmongoCollection();
        java.lang.String str32 = builder18.gettypeName();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setriverIndexName("admin");
        builder2.storeStatistics = false;
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) false);
        docScoreSearchScript0.setNextScore((float) '4');
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoDb("hi!");
        builder19.isMongos = true;
        java.lang.String str22 = builder19.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder25.parentTypes = strSet39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder25.script("port");
        builder43.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings46 = null;
        org.elasticsearch.common.settings.Settings settings47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        builder48.setskipInitialImport(true);
        builder48.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder48.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject56 = builder48.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings47, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings46, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder43.setmongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder19.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings63 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings64 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        java.lang.Object obj65 = docScoreSearchScript0.unwrap((java.lang.Object) basicDBObject56);
        org.elasticsearch.common.settings.Settings settings66 = null;
        org.elasticsearch.common.settings.Settings settings67 = null;
        org.elasticsearch.common.settings.Settings settings68 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        builder69.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder69.mongoDb("hi!");
        builder74.isMongos = true;
        builder74.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        builder79.setskipInitialImport(true);
        builder79.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder79.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject87 = builder79.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder74.mongoOplogFilter(basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings89 = new org.elasticsearch.river.RiverSettings(settings68, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings90 = new org.elasticsearch.river.RiverSettings(settings67, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings66, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{ }");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{ }");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{ }");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue6 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str10 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str11 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl" + "'", str12, "ssl");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.throttleSize((int) (byte) 10);
        java.lang.String str6 = builder0.getscriptType();
        java.lang.String str7 = builder0.mongoLocalUser;
        builder0.setimportAllCollections(true);
        java.lang.String str10 = builder0.scriptType;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition2.getDB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoAdminPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "db" + "'", str6, "db");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.statisticsTypeName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder14.parentTypes = strSet28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean38 = builder37.getimportAllCollections();
        java.lang.String str39 = builder37.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder37.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder36.mongoServers(serverAddressList40);
        builder13.setmongoServers(serverAddressList40);
        builder13.setadvancedTransformation(false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition4.getRiverName();
        boolean boolean7 = mongoDBRiverDefinition4.advancedTransformation;
        boolean boolean8 = mongoDBRiverDefinition4.isDropCollection();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        int int5 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        int int7 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos();
        boolean boolean11 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str12 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str13 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "admin" + "'", str4, "admin");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "localhost" + "'", str12, "localhost");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "credentials" + "'", str6, "credentials");
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_timeout" + "'", str8, "bulk_timeout");
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("script_type");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?script_type?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        boolean boolean6 = mongoDBRiverDefinition2.isStoreStatistics();
        boolean boolean7 = mongoDBRiverDefinition2.mongoUseSSL;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsIndexName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "exclude_fields" + "'", str5, "exclude_fields");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        builder1.setskipInitialImport(true);
        builder1.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder1.skipInitialImport(false);
        java.lang.String str9 = builder8.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder8.mongoClientOptions = mongoClientOptions12;
        java.util.Set<java.lang.String> strSet14 = builder8.getincludeFields();
        java.lang.String str15 = builder8.getriverName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder8.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str20 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoUseSSL();
        boolean boolean22 = mongoDBRiverDefinition19.getimportAllCollections();
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder8.mongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "flush_interval" + "'", str20, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("servers", "drop_collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?drop_collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str4 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        java.lang.String str5 = mongoDBRiverDefinition2.getIS_MONGOS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoLocalPassword();
        java.lang.String str7 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "localhost" + "'", str4, "localhost");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "is_mongos" + "'", str5, "is_mongos");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition2.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp4 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardTimestamp4);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        builder5.connectTimeout = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.importAllCollections(false);
        java.lang.String str12 = builder11.riverIndexName;
        java.lang.String str13 = builder11.mongoDb;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder10.initialTimestamp;
        builder10.mongoDb = "user";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean16 = mongoDBRiverDefinition15.disableIndexRefresh;
        java.lang.String str17 = mongoDBRiverDefinition15.getRiverName();
        java.lang.String str18 = mongoDBRiverDefinition15.getMongoCollection();
        java.lang.String str19 = mongoDBRiverDefinition15.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_requests" + "'", str19, "concurrent_requests");
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.setmongoAdminPassword("ssl");
        boolean boolean8 = builder5.getmongoUseSSL();
        int int9 = builder5.getthrottleSize();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.getHOST_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition5.getBULK_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition5.getSERVERS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition5.getIncludeCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "host" + "'", str9, "host");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_size" + "'", str10, "bulk_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "servers" + "'", str11, "servers");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoLocalUser("");
        builder24.setstatisticsTypeName("advanced_transformation");
        builder24.advancedTransformation = false;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.disableIndexRefresh(false);
        boolean boolean14 = builder5.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder5.skipInitialImport(false);
        builder18.setdropCollection(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = builder18.getinitialTimestamp();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(wildcardTimestamp21);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition2.initialTimestamp;
        int int7 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoLocalPassword("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp23 = mongoDBRiverDefinition22.getInitialTimestamp();
        boolean boolean24 = mongoDBRiverDefinition22.mongoSSLVerifyCertificate;
        java.lang.String str25 = mongoDBRiverDefinition22.getUSER_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition22.includeCollection;
        java.lang.String str27 = mongoDBRiverDefinition22.statisticsIndexName;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNull(wildcardTimestamp23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "user" + "'", str25, "user");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str8 = mongoDBRiverDefinition1.getIncludeCollection();
        int int9 = mongoDBRiverDefinition1.getConnectTimeout();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        builder7.setmongoAdminUser("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.indexName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition19.initialTimestamp;
        java.lang.String str21 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(wildcardTimestamp20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "initial_timestamp" + "'", str21, "initial_timestamp");
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        int int6 = mongoDBRiverDefinition1.getThrottleSize();
        int int7 = mongoDBRiverDefinition1.getThrottleSize();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        builder8.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder8.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoServers(serverAddressList14);
        com.mongodb.BasicDBObject basicDBObject16 = builder0.mongoOplogFilter;
        java.lang.String str17 = builder0.getmongoLocalUser();
        builder0.socketTimeout = (short) 100;
        builder0.setmongoLocalPassword("db");
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = builder0.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(serverAddressList22);
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.dropCollection(false);
        java.lang.Boolean boolean14 = builder13.getisMongos();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder13.mongoClientOptions = mongoClientOptions15;
        builder13.advancedTransformation = false;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + false + "'", boolean14, false);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        builder3.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.mongoDb("hi!");
        builder8.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str13 = builder11.getindexName();
        boolean boolean14 = builder11.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder17.parentTypes = strSet31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder17.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder36.parentTypes = strSet50;
        builder35.setexcludeFields((java.util.Set<java.lang.String>) strSet50);
        builder16.includeFields = strSet50;
        builder8.setparentTypes((java.util.Set<java.lang.String>) strSet50);
        builder0.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.socketTimeout(30000);
        builder0.mongoGridFS = false;
        boolean boolean61 = builder0.advancedTransformation;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.dropCollection(false);
        java.lang.String str26 = builder25.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject27 = builder25.mongoCollectionFilter;
        builder25.script = "is_mongos";
        builder25.mongoDb = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        builder32.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoDb("hi!");
        builder37.isMongos = true;
        java.lang.String str40 = builder37.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder37.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder43.parentTypes = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder43.script("port");
        builder61.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings64 = null;
        org.elasticsearch.common.settings.Settings settings65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        builder66.setskipInitialImport(true);
        builder66.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder66.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject74 = builder66.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings75 = new org.elasticsearch.river.RiverSettings(settings65, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject74);
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings64, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject74);
        builder61.setmongoCollectionFilter(basicDBObject74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder37.mongoCollectionFilter(basicDBObject74);
        int int79 = builder37.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        java.lang.String str81 = builder37.typeName;
        java.lang.String[] strArray92 = new java.lang.String[] { "advanced_transformation", "include_collection", "bulk_timeout", "index", "ssl", "", "disable_index_refresh", "index", "user", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet93 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet93, strArray92);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder25.includeFields((java.util.Set<java.lang.String>) strSet93);
        com.mongodb.MongoClientOptions mongoClientOptions97 = null;
        builder25.mongoClientOptions = mongoClientOptions97;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(basicDBObject74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.connectTimeout(0);
        java.lang.String str5 = builder4.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getPASSWORD_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.typeName = "throttle_size";
        builder7.setstatisticsIndexName("include_collection");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        builder0.setstatisticsTypeName("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoClientOptions(mongoClientOptions20);
        boolean boolean22 = builder21.advancedTransformation;
        builder21.mongoAdminPassword = "connect_timeout";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalPassword;
        boolean boolean8 = mongoDBRiverDefinition2.getdropCollection();
        java.lang.String str9 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        int int10 = mongoDBRiverDefinition2.getThrottleSize();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.setconnectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.typeName("include_collection");
        org.bson.types.Binary binary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.initialTimestamp(binary14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.storeStatistics(true);
        builder10.skipInitialImport = false;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        boolean boolean8 = builder0.importAllCollections;
        int int9 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getimportAllCollections();
        java.lang.String str12 = builder10.getmongoAdminUser();
        java.lang.String str13 = builder10.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder10.mongoServers;
        builder0.setmongoServers(serverAddressList14);
        builder0.setadvancedTransformation(false);
        builder0.setmongoGridFS(true);
        boolean boolean20 = builder0.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder3.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.dropCollection(false);
        java.lang.String str29 = builder28.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject30 = builder28.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder0.mongoCollectionFilter = basicDBObject30;
        builder0.setmongoDb("parent_types");
        builder0.setriverIndexName("localhost");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setskipInitialImport(true);
        builder5.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject13 = builder5.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.importAllCollections(true);
        builder26.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder26.getmongoClientOptions();
        builder26.storeStatistics = false;
        org.elasticsearch.common.settings.Settings settings36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        builder37.setskipInitialImport(true);
        builder37.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder37.skipInitialImport(false);
        builder37.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        builder48.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder48.mongoDb("hi!");
        builder53.isMongos = true;
        java.lang.String str56 = builder53.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder53.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        builder59.parentTypes = strSet73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder59.script("port");
        builder77.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings80 = null;
        org.elasticsearch.common.settings.Settings settings81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition83 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder82);
        builder82.setskipInitialImport(true);
        builder82.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder82.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject90 = builder82.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings81, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        org.elasticsearch.river.RiverSettings riverSettings92 = new org.elasticsearch.river.RiverSettings(settings80, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        builder77.setmongoCollectionFilter(basicDBObject90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder53.mongoCollectionFilter(basicDBObject90);
        org.elasticsearch.river.RiverSettings riverSettings95 = new org.elasticsearch.river.RiverSettings(settings47, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        builder37.mongoOplogFilter = basicDBObject90;
        org.elasticsearch.river.RiverSettings riverSettings97 = new org.elasticsearch.river.RiverSettings(settings36, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder26.mongoCollectionFilter(basicDBObject90);
        org.elasticsearch.script.ExecutableScript executableScript99 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(basicDBObject90);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(executableScript99);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.indexName("initial_timestamp");
        builder22.setstatisticsIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.advancedTransformation(false);
        builder22.setdropCollection(false);
        builder22.mongoUseSSL = false;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.statisticsIndexName("store_statistics");
        java.lang.String str13 = builder5.getincludeCollection();
        java.lang.String str14 = builder5.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.settypeName("socket_timeout");
        java.lang.String str8 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("localhost");
        boolean boolean11 = builder10.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition13.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertNull(wildcardTimestamp15);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        builder0.setstatisticsIndexName("index");
        java.util.Set<java.lang.String> strSet21 = builder0.getexcludeFields();
        java.lang.String str22 = builder0.getindexName();
        builder0.setscript("");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoLocalUser("concurrent_bulk_requests");
        builder5.setmongoDb("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str11 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getSOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.getMongoServers();
        builder5.setmongoServers(serverAddressList16);
        builder5.setmongoAdminPassword("user.null");
        boolean boolean20 = builder5.mongoGridFS;
        boolean boolean21 = builder5.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl" + "'", str11, "ssl");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "socket_timeout" + "'", str15, "socket_timeout");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.statisticsIndexName;
        java.lang.String str9 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.indexName;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = mongoDBRiverDefinition2.initialTimestamp;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        boolean boolean5 = builder0.getdisableIndexRefresh();
        builder0.setriverIndexName("drop_collection");
        builder0.riverName = "hi!";
        builder0.setmongoUseSSL(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("type");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?type? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder32.statisticsTypeName = "throttle_size";
        builder32.script = "initial_timestamp";
        com.mongodb.BasicDBObject basicDBObject37 = builder32.getmongoCollectionFilter();
        java.lang.String str38 = builder32.getriverIndexName();
        boolean boolean39 = builder32.getstoreStatistics();
        java.lang.String str40 = builder32.getscript();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "initial_timestamp" + "'", str40, "initial_timestamp");
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("actions", "include_collection", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.script;
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.dropCollection;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_bulk_requests" + "'", str4, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_collection" + "'", str6, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition4.getMongoServers();
        boolean boolean7 = mongoDBRiverDefinition4.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition4.getTHROTTLE_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        builder5.connectTimeout = 1;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = mongoDBRiverDefinition12.getDEFAULT_BULK_SIZE();
        java.lang.String str14 = mongoDBRiverDefinition12.getINITIAL_TIMESTAMP_FIELD();
        int int15 = mongoDBRiverDefinition12.getSocketTimeout();
        java.lang.String str16 = mongoDBRiverDefinition12.getTHROTTLE_SIZE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition12.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition12.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition12.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoCollectionFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "throttle_size" + "'", str16, "throttle_size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "advanced_transformation" + "'", str17, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "concurrent_requests" + "'", str18, "concurrent_requests");
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setmongoLocalPassword("hi!");
        builder0.mongoLocalPassword = "is_mongos";
        boolean boolean6 = builder0.getskipInitialImport();
        java.lang.String str7 = builder0.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        boolean boolean8 = builder0.importAllCollections;
        int int9 = builder0.throttleSize;
        java.lang.String str10 = builder0.mongoDb;
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder0.getmongoClientOptions();
        boolean boolean12 = builder0.dropCollection;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder0.mongoServers;
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(serverAddressList13);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        builder0.setisMongos((java.lang.Boolean) false);
        builder0.setscriptType("concurrent_requests");
        java.lang.String str12 = builder0.getincludeCollection();
        builder0.mongoAdminUser = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder0.getinitialTimestamp();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = mongoDBRiverDefinition19.mongoLocalPassword;
        java.lang.String str21 = mongoDBRiverDefinition19.getCREDENTIALS_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition19.getCONNECT_TIMEOUT();
        java.lang.String str23 = mongoDBRiverDefinition19.getSCRIPT_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition19.getIncludeCollection();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "credentials" + "'", str21, "credentials");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "connect_timeout" + "'", str22, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "script" + "'", str23, "script");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.disableIndexRefresh(false);
        boolean boolean14 = builder5.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder5.initialTimestamp;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.indexName;
        java.lang.String str9 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder0.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.connectTimeout(0);
        builder0.setmongoAdminPassword("name");
        builder0.setstatisticsTypeName("script.disable_dynamic");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder19.parentTypes = strSet33;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder18.mongoAdminPassword("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder18.advancedTransformation(false);
        boolean boolean41 = builder40.getdropCollection();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        builder0.mongoAdminPassword = "script_type";
        boolean boolean7 = builder0.getstoreStatistics();
        builder0.setdropCollection(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        boolean boolean7 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str12 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl_verify_certificate" + "'", str12, "ssl_verify_certificate");
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "local" + "'", str5, "local");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.getmongoUseSSL();
        builder0.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalUser("collection");
        int int8 = builder7.getsocketTimeout();
        builder7.setmongoLocalPassword("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        java.lang.Object obj9 = null;
        docScoreSearchScript0.setNextVar("drop_collection", obj9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        boolean boolean14 = builder11.getmongoUseSSL();
        builder11.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.mongoLocalUser("collection");
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        docScoreSearchScript0.setNextScore(0.0f);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.Boolean boolean4 = mongoDBRiverDefinition2.isMongos();
        boolean boolean5 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getScriptType();
        java.lang.String str8 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getCONNECT_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition5.mongoCollection;
        java.lang.String str9 = mongoDBRiverDefinition5.getSCRIPT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition5.getstoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition5.getRiverIndexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setscriptType("collection");
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("");
        builder13.setstatisticsTypeName("hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition2.getMongoClientOptions();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
        org.junit.Assert.assertNull(mongoClientOptions8);
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean2 = builder1.getimportAllCollections();
        java.lang.String str3 = builder1.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder1.getmongoServers();
        builder1.storeStatistics = true;
        builder1.setmongoSecondaryReadPreference(false);
        boolean boolean9 = builder1.storeStatistics;
        com.mongodb.BasicDBObject basicDBObject10 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings11 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = riverSettings11.settings();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        builder0.setstatisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str21 = mongoDBRiverDefinition20.getBULK_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition20.riverIndexName;
        java.lang.String str23 = mongoDBRiverDefinition20.mongoLocalUser;
        com.mongodb.MongoClientOptions mongoClientOptions24 = mongoDBRiverDefinition20.mongoClientOptions;
        java.lang.String str25 = mongoDBRiverDefinition20.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk" + "'", str21, "bulk");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gridfs" + "'", str25, "gridfs");
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        boolean boolean14 = mongoDBRiverDefinition13.advancedTransformation;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setscriptType("collection");
        builder0.throttleSize = (short) 10;
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        builder16.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.mongoDb("hi!");
        builder21.isMongos = true;
        java.lang.String str24 = builder21.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder27.parentTypes = strSet41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder27.script("port");
        builder45.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings48 = null;
        org.elasticsearch.common.settings.Settings settings49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.setskipInitialImport(true);
        builder50.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder50.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject58 = builder50.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings49, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings48, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        builder45.setmongoCollectionFilter(basicDBObject58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder21.mongoCollectionFilter(basicDBObject58);
        org.elasticsearch.river.RiverSettings riverSettings63 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.script.ExecutableScript executableScript64 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.river.RiverSettings riverSettings65 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        builder0.setmongoCollectionFilter(basicDBObject58);
        builder0.socketTimeout = '#';
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(executableScript64);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("script.default_lang", "connect_timeout");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?connect_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "throttle_size" + "'", str52, "throttle_size");
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder0.mongoClientOptions = mongoClientOptions19;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("collection");
        builder22.mongoUseSSL = false;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        builder5.connectTimeout = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoAdminUser("host");
        java.lang.String str14 = builder13.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        java.lang.String str19 = builder0.getindexName();
        builder0.setconnectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str23 = mongoDBRiverDefinition22.getDB_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition22.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "db" + "'", str23, "db");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gridfs" + "'", str24, "gridfs");
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoAdminPassword("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition7.parentTypes;
        java.lang.Boolean boolean9 = mongoDBRiverDefinition7.isMongos;
        java.lang.String str10 = mongoDBRiverDefinition7.getTHROTTLE_SIZE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition7.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        builder5.disableIndexRefresh = true;
        builder5.connectTimeout = (short) -1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder5.build();
        java.lang.String str15 = mongoDBRiverDefinition14.getIncludeCollection();
        boolean boolean16 = mongoDBRiverDefinition14.disableIndexRefresh;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        int int11 = mongoDBRiverDefinition2.getSocketTimeout();
        java.lang.String str12 = mongoDBRiverDefinition2.getFILTER_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        java.lang.Object obj4 = null;
        docScoreSearchScript0.setNextVar("concurrent_requests", obj4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.String str8 = mongoDBRiverDefinition7.getSSL_CONNECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition7.isStoreStatistics();
        boolean boolean10 = mongoDBRiverDefinition7.mongoGridFS;
        java.lang.Object obj11 = docScoreSearchScript0.unwrap((java.lang.Object) boolean10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str16 = builder12.getindexName();
        java.lang.Boolean boolean17 = builder12.isMongos;
        builder12.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str23 = builder20.getmongoLocalUser();
        boolean boolean24 = builder20.getstoreStatistics();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = builder20.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean27 = builder26.getimportAllCollections();
        java.lang.String str28 = builder26.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = builder26.getmongoServers();
        boolean boolean30 = builder26.getmongoGridFS();
        builder26.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder26.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder26.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.riverIndexName("");
        com.mongodb.BasicDBObject basicDBObject39 = builder38.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder20.mongoCollectionFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder12.mongoOplogFilter(basicDBObject39);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl" + "'", str8, "ssl");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + false + "'", obj11, false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.includeCollection("hi!.null");
        builder14.setstatisticsTypeName("bulk_size");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setadvancedTransformation(false);
        int int7 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setskipInitialImport(true);
        builder8.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(false);
        java.lang.String str16 = builder15.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.importAllCollections(true);
        boolean boolean19 = builder18.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        builder20.parentTypes = strSet34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.lang.Class<?> wildcardClass42 = mongoDBRiverDefinition41.getClass();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        int int5 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        int int7 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos();
        boolean boolean11 = mongoDBRiverDefinition1.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str13 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "admin" + "'", str4, "admin");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "parent_types" + "'", str13, "parent_types");
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoDb("local");
        boolean boolean23 = builder22.advancedTransformation;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition21.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition21.mongoAdminUser;
        org.elasticsearch.common.unit.TimeValue timeValue24 = mongoDBRiverDefinition21.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str25 = mongoDBRiverDefinition21.getIMPORT_ALL_COLLECTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition21.getMongoCollectionFilter();
        java.lang.String str27 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "import_all_collections" + "'", str25, "import_all_collections");
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "script_type" + "'", str27, "script_type");
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition2.getDB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "db" + "'", str6, "db");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setriverIndexName("admin");
        builder2.storeStatistics = false;
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getimportAllCollections();
        java.lang.String str10 = builder8.getmongoAdminUser();
        java.lang.String str11 = builder8.typeName;
        builder8.setmongoCollection("gridfs");
        builder8.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder8.build();
        builder8.importAllCollections = true;
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.disableIndexRefresh(false);
        java.lang.Object obj28 = docScoreSearchScript0.unwrap((java.lang.Object) builder27);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext29 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminPassword;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition21.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition21.mongoAdminUser;
        java.lang.String str24 = mongoDBRiverDefinition21.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition21.getSIZE_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition21.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "disable_index_refresh" + "'", str24, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "size" + "'", str25, "size");
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        java.util.Set<java.lang.String> strSet30 = builder29.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.statisticsIndexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        builder33.setskipInitialImport(true);
        builder33.scriptType = "admin";
        builder33.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder33.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder33.statisticsTypeName("store_statistics");
        int int45 = builder33.getconnectTimeout();
        boolean boolean46 = builder33.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        java.lang.String str49 = mongoDBRiverDefinition48.getSSL_CONNECTION_FIELD();
        int int50 = mongoDBRiverDefinition48.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str51 = mongoDBRiverDefinition48.getADMIN_DB_FIELD();
        int int52 = mongoDBRiverDefinition48.connectTimeout;
        java.lang.String str53 = mongoDBRiverDefinition48.getCONCURRENT_REQUESTS_FIELD();
        int int54 = mongoDBRiverDefinition48.socketTimeout;
        java.lang.String str55 = mongoDBRiverDefinition48.getCONNECT_TIMEOUT();
        java.lang.String str56 = mongoDBRiverDefinition48.getINCLUDE_COLLECTION_FIELD();
        java.lang.Boolean boolean57 = mongoDBRiverDefinition48.isMongos();
        boolean boolean58 = mongoDBRiverDefinition48.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition48.mongoCollectionFilter;
        builder33.setmongoOplogFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder29.mongoCollectionFilter(basicDBObject59);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ssl" + "'", str49, "ssl");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 30000 + "'", int50 == 30000);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "admin" + "'", str51, "admin");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "concurrent_requests" + "'", str53, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "connect_timeout" + "'", str55, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "include_collection" + "'", str56, "include_collection");
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        builder18.setmongoDb("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean23 = builder22.getimportAllCollections();
        java.lang.String str24 = builder22.getmongoAdminUser();
        java.lang.String str25 = builder22.typeName;
        boolean boolean26 = builder22.getstoreStatistics();
        boolean boolean27 = builder22.mongoUseSSL;
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = builder22.mongoServers;
        builder18.setmongoServers(serverAddressList28);
        builder18.setmongoLocalUser("");
        java.lang.String str32 = builder18.mongoLocalUser;
        java.lang.String str33 = builder18.getmongoLocalPassword();
        builder18.scriptType = "bulk_size";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.isDropCollection();
        boolean boolean5 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        java.lang.String str6 = mongoDBRiverDefinition3.getBULK_SIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition3.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition3.getSTORE_STATISTICS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition3.getDEFAULT_DB_HOST();
        java.lang.String str10 = mongoDBRiverDefinition3.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_size" + "'", str6, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "localhost" + "'", str9, "localhost");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "initial_timestamp" + "'", str10, "initial_timestamp");
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setscriptType("collection");
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        boolean boolean12 = builder0.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet13 = builder0.getexcludeFields();
        boolean boolean14 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str16 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.riverName("initial_timestamp");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoDb("filter");
        builder22.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean26 = builder25.getimportAllCollections();
        java.lang.String str27 = builder25.getmongoAdminUser();
        java.lang.String str28 = builder25.typeName;
        builder25.setmongoCollection("gridfs");
        builder25.setconnectTimeout((int) (short) -1);
        builder25.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.setskipInitialImport(true);
        builder35.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder35.skipInitialImport(false);
        java.lang.String str43 = builder42.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.importAllCollections(true);
        boolean boolean46 = builder45.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        builder47.parentTypes = strSet61;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder45.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet61);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder22.mongoAdminUser("parent_types");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.scriptType;
        int int7 = mongoDBRiverDefinition1.throttleSize;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "exclude_fields" + "'", str5, "exclude_fields");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.riverName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder15.parentTypes = strSet29;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet29);
        builder32.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.setskipInitialImport(true);
        builder35.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder35.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder43.parentTypes = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder42.parentTypes((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder32.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder0.includeFields = strSet57;
        builder0.setmongoGridFS(false);
        java.lang.String str65 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder0.socketTimeout((int) (byte) 10);
        java.lang.String str68 = builder67.mongoLocalPassword;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        builder0.importAllCollections = true;
        com.mongodb.BasicDBObject basicDBObject5 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.skipInitialImport(false);
        java.lang.String str14 = builder13.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(true);
        builder13.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder27.parentTypes = strSet41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder26.parentTypes((java.util.Set<java.lang.String>) strSet41);
        builder44.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.setskipInitialImport(true);
        builder47.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder47.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder55.parentTypes = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder54.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet69);
        java.util.Set<java.lang.String> strSet74 = builder44.excludeFields;
        builder13.excludeFields = strSet74;
        builder0.parentTypes = strSet74;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder0.dropCollection(false);
        boolean boolean79 = builder78.advancedTransformation;
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        boolean boolean14 = builder10.mongoSSLVerifyCertificate;
        java.lang.String str15 = builder10.getriverName();
        builder10.mongoSSLVerifyCertificate = true;
        boolean boolean18 = builder10.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder24.parentTypes = strSet38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder24.script("port");
        builder42.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.common.settings.Settings settings46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.setskipInitialImport(true);
        builder47.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder47.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject55 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings46, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        builder42.setmongoCollectionFilter(basicDBObject55);
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings22, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        builder10.setmongoOplogFilter(basicDBObject55);
        org.bson.types.BSONTimestamp bSONTimestamp64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder10.initialTimestamp(bSONTimestamp64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean7 = builder0.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder0.setmongoClientOptions(mongoClientOptions8);
        builder0.disableIndexRefresh = false;
        builder0.settypeName(".scripts");
        builder0.setadvancedTransformation(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.typeName = "hi!";
        java.lang.String str8 = builder5.mongoLocalUser;
        builder5.isMongos = false;
        boolean boolean11 = builder5.getmongoSecondaryReadPreference();
        builder5.mongoDb = "advanced_transformation";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        int int16 = builder14.getsocketTimeout();
        boolean boolean17 = builder14.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean19 = builder18.getimportAllCollections();
        java.lang.String str20 = builder18.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder18.getmongoServers();
        builder14.mongoServers = serverAddressList21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        builder23.setskipInitialImport(true);
        builder23.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder30.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder48.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        builder51.setskipInitialImport(true);
        builder51.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder51.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        builder59.parentTypes = strSet73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder58.parentTypes((java.util.Set<java.lang.String>) strSet73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder48.excludeFields((java.util.Set<java.lang.String>) strSet73);
        builder14.includeFields = strSet73;
        builder5.parentTypes = strSet73;
        boolean boolean80 = builder5.importAllCollections;
        boolean boolean81 = builder5.storeStatistics;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.mongoDb("hi!");
        builder9.isMongos = true;
        java.lang.String str12 = builder9.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder15.parentTypes = strSet29;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder15.script("port");
        builder33.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings36 = null;
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.setskipInitialImport(true);
        builder38.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder38.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject46 = builder38.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings48 = new org.elasticsearch.river.RiverSettings(settings36, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        builder33.setmongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder9.mongoCollectionFilter(basicDBObject46);
        int int51 = builder9.getsocketTimeout();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory52 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        builder53.parentTypes = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder53.script("port");
        builder71.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings74 = null;
        org.elasticsearch.common.settings.Settings settings75 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        builder76.setskipInitialImport(true);
        builder76.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder76.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject84 = builder76.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings85 = new org.elasticsearch.river.RiverSettings(settings75, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.RiverSettings riverSettings86 = new org.elasticsearch.river.RiverSettings(settings74, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        builder71.setmongoCollectionFilter(basicDBObject84);
        org.elasticsearch.script.ExecutableScript executableScript88 = docScoreNativeScriptFactory52.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        builder9.setmongoCollectionFilter(basicDBObject84);
        org.elasticsearch.river.RiverSettings riverSettings90 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        java.util.Map<java.lang.String, java.lang.Object> strMap92 = riverSettings91.settings();
        org.elasticsearch.river.RiverSettings riverSettings93 = new org.elasticsearch.river.RiverSettings(settings1, strMap92);
        org.elasticsearch.river.RiverSettings riverSettings94 = new org.elasticsearch.river.RiverSettings(settings0, strMap92);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(executableScript88);
        org.junit.Assert.assertNotNull(strMap92);
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        builder0.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverIndexName("skip_initial_import");
        boolean boolean12 = builder11.dropCollection;
        builder11.statisticsTypeName = "collection";
        boolean boolean15 = builder11.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        java.lang.String str3 = builder0.getincludeCollection();
        java.lang.String str4 = builder0.getstatisticsIndexName();
        builder0.throttleSize = 1000;
        boolean boolean7 = builder0.getdropCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.indexName("initial_timestamp");
        boolean boolean23 = builder18.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        int int26 = builder24.getsocketTimeout();
        boolean boolean27 = builder24.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean29 = builder28.getimportAllCollections();
        java.lang.String str30 = builder28.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = builder28.getmongoServers();
        builder24.mongoServers = serverAddressList31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder18.mongoServers(serverAddressList31);
        java.lang.String str34 = builder18.statisticsIndexName;
        builder18.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder32.statisticsTypeName = "throttle_size";
        java.lang.String str35 = builder32.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.statisticsIndexName("bulk_size");
        builder32.mongoAdminPassword = "secondary_read_preference";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.Boolean boolean16 = mongoDBRiverDefinition15.isMongos();
        java.lang.String str17 = mongoDBRiverDefinition15.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "filter" + "'", str17, "filter");
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition2.mongoCollectionFilter;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertNotNull(basicDBObject10);
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        java.lang.Object obj9 = null;
        docScoreSearchScript0.setNextVar("drop_collection", obj9);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoAdminUser("hi!");
        builder22.setstatisticsTypeName("servers");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        java.util.Set<java.lang.String> strSet30 = builder29.getexcludeFields();
        java.lang.String str31 = builder29.scriptType;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "admin" + "'", str31, "admin");
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str4 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.getmongoUseSSL();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setriverIndexName("admin");
        builder2.storeStatistics = false;
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean9 = builder8.getimportAllCollections();
        java.lang.String str10 = builder8.getmongoAdminUser();
        java.lang.String str11 = builder8.typeName;
        builder8.setmongoCollection("gridfs");
        builder8.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder8.build();
        builder8.importAllCollections = true;
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.disableIndexRefresh(false);
        java.lang.Object obj28 = docScoreSearchScript0.unwrap((java.lang.Object) builder27);
        org.apache.lucene.search.Scorer scorer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int4 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getMongoDb();
        boolean boolean7 = mongoDBRiverDefinition5.isStoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition5.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.mongoAdminUser;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        builder19.setscript("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.skipInitialImport(false);
        boolean boolean26 = builder23.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setmongoLocalPassword("hi!");
        builder0.mongoLocalPassword = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setriverIndexName("admin");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings46 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder7.mongoCollectionFilter = basicDBObject42;
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder7.mongoClientOptions(mongoClientOptions48);
        com.mongodb.MongoClientOptions mongoClientOptions50 = null;
        builder49.mongoClientOptions = mongoClientOptions50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        boolean boolean53 = mongoDBRiverDefinition52.isDropCollection();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition52.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.mongoCollectionFilter(basicDBObject54);
        java.lang.String str56 = builder0.getmongoDb();
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition21.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition21.mongoAdminUser;
        java.lang.String str24 = mongoDBRiverDefinition21.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition21.getSIZE_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition21.getHOST_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "disable_index_refresh" + "'", str24, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "size" + "'", str25, "size");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "host" + "'", str26, "host");
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        builder1.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.mongoDb("hi!");
        builder6.setmongoAdminPassword("ssl");
        int int9 = builder6.getconnectTimeout();
        boolean boolean10 = builder6.dropCollection;
        com.mongodb.BasicDBObject basicDBObject11 = builder6.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.common.settings.Settings settings13 = riverSettings12.globalSettings();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(settings13);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        int int49 = builder5.throttleSize;
        boolean boolean50 = builder5.mongoSecondaryReadPreference;
        builder5.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder5.mongoAdminUser("gridfs");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("store_statistics");
        builder0.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.includeCollection("gridfs");
        builder15.setconnectTimeout(0);
        java.lang.String str18 = builder15.gettypeName();
        builder15.indexName = "user.null";
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        builder19.setscript("concurrent_requests");
        boolean boolean22 = builder19.mongoUseSSL;
        java.lang.String str23 = builder19.typeName;
        java.lang.String str24 = builder19.script;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "concurrent_requests" + "'", str24, "concurrent_requests");
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str5 = mongoDBRiverDefinition4.getSSL_CONNECTION_FIELD();
        boolean boolean6 = mongoDBRiverDefinition4.isStoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition4.getLOCAL_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition4.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings9 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.script.ScriptService scriptService10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("import_all_collections", "ssl_verify_certificate", riverSettings9, scriptService10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ssl" + "'", str5, "ssl");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "local" + "'", str7, "local");
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str5 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "host" + "'", str3, "host");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "admin" + "'", str5, "admin");
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "null.null" + "'", str9, "null.null");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        int int49 = builder5.throttleSize;
        builder5.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder5.socketTimeout(0);
        builder5.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder4.parentTypes = strSet18;
        builder0.excludeFields = strSet18;
        builder0.setriverName("gridfs");
        builder0.script = "user";
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str6 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getIS_MONGOS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getmongoGridFS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "is_mongos" + "'", str7, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.setadvancedTransformation(true);
        java.lang.String str49 = builder5.mongoDb;
        java.lang.String str50 = builder5.statisticsIndexName;
        builder5.mongoSSLVerifyCertificate = true;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("bulk", "admin", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?admin?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("localhost");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?localhost?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        boolean boolean5 = builder0.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(false);
        builder7.indexName = ".scripts";
        builder7.setscriptType("throttle_size");
        java.lang.String str12 = builder7.indexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + ".scripts" + "'", str12, ".scripts");
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getPORT_FIELD();
        int int5 = mongoDBRiverDefinition2.socketTimeout;
        int int6 = mongoDBRiverDefinition2.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "port" + "'", str4, "port");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        builder18.setmongoDb("index");
        boolean boolean22 = builder18.importAllCollections;
        builder18.setmongoGridFS(true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        java.lang.String str7 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.throttleSize(1);
        builder0.connectTimeout = (short) 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        java.lang.String str9 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition10.mongoOplogFilter;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setadvancedTransformation(false);
        int int7 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setskipInitialImport(true);
        builder8.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(false);
        java.lang.String str16 = builder15.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.importAllCollections(true);
        boolean boolean19 = builder18.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        builder20.parentTypes = strSet34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.disableIndexRefresh(true);
        builder0.setscript("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str44 = mongoDBRiverDefinition43.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition43.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "advanced_transformation" + "'", str44, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "collection" + "'", str45, "collection");
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.setmongoAdminUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str15 = mongoDBRiverDefinition14.getSKIP_INITIAL_IMPORT_FIELD();
        int int16 = mongoDBRiverDefinition14.connectTimeout;
        boolean boolean17 = mongoDBRiverDefinition14.mongoGridFS;
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition14.mongoCollectionFilter;
        java.lang.String str19 = mongoDBRiverDefinition14.mongoCollection;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(false);
        builder6.setscript("type");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder6.initialTimestamp;
        builder6.mongoLocalPassword = "options";
        boolean boolean12 = builder6.getadvancedTransformation();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        boolean boolean15 = builder6.getstoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str9 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getDB_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = mongoDBRiverDefinition1.initialTimestamp;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index" + "'", str8, "index");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
        org.junit.Assert.assertNull(wildcardTimestamp12);
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.storeStatistics(true);
        boolean boolean5 = builder0.disableIndexRefresh;
        builder0.setmongoGridFS(true);
        java.lang.String str8 = builder0.getstatisticsTypeName();
        builder0.includeCollection = "disable_index_refresh";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        boolean boolean3 = builder0.advancedTransformation;
        builder0.setriverName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.riverIndexName("store_statistics");
        builder9.mongoUseSSL = false;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoServers(serverAddressList26);
        org.bson.types.Binary binary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder22.initialTimestamp(binary28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder10.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoClientOptions(mongoClientOptions13);
        builder10.includeCollection = "password";
        boolean boolean17 = builder10.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.Boolean boolean5 = mongoDBRiverDefinition1.isMongos();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.excludeFields;
        boolean boolean7 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getstoreStatistics();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_requests" + "'", str8, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteSizeValue10);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str8 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_size" + "'", str3, "bulk_size");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition5.mongoAdminUser;
        java.lang.String str9 = mongoDBRiverDefinition5.getGRIDFS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition5.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "exclude_fields" + "'", str10, "exclude_fields");
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.scriptType;
        boolean boolean7 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "admin" + "'", str5, "admin");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions4 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.Boolean boolean5 = mongoDBRiverDefinition1.isMongos;
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        boolean boolean7 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_size" + "'", str3, "bulk_size");
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setskipInitialImport(true);
        builder5.scriptType = "admin";
        builder5.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) false);
        builder14.riverName = "servers";
        com.mongodb.BasicDBObject basicDBObject17 = builder14.mongoCollectionFilter;
        builder0.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.getmongoDb();
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("disable_index_refresh");
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) builder29);
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        builder33.setskipInitialImport(true);
        builder33.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject41 = builder33.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        builder29.mongoCollectionFilter = basicDBObject41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.util.List<com.mongodb.ServerAddress> serverAddressList46 = mongoDBRiverDefinition45.getMongoServers();
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(serverAddressList46);
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("store_statistics");
        int int12 = builder0.getconnectTimeout();
        boolean boolean13 = builder0.importAllCollections;
        builder0.settypeName("is_mongos");
        builder0.isMongos = false;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.disableIndexRefresh = false;
        builder7.setmongoAdminUser("port");
        builder7.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder7.mongoLocalPassword("port");
        java.lang.Boolean boolean19 = builder18.isMongos;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        boolean boolean7 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        boolean boolean9 = builder0.getstoreStatistics();
        builder0.mongoSSLVerifyCertificate = true;
        java.lang.String str12 = builder0.script;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        java.lang.String str21 = builder18.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoLocalPassword("admin");
        java.lang.String str24 = builder18.getmongoDb();
        boolean boolean25 = builder18.getmongoUseSSL();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoDb("hi!");
        builder7.isMongos = true;
        java.lang.String str10 = builder7.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        builder13.parentTypes = strSet27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder13.script("port");
        builder31.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings34 = null;
        org.elasticsearch.common.settings.Settings settings35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        builder36.setskipInitialImport(true);
        builder36.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder36.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject44 = builder36.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings45 = new org.elasticsearch.river.RiverSettings(settings35, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject44);
        org.elasticsearch.river.RiverSettings riverSettings46 = new org.elasticsearch.river.RiverSettings(settings34, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject44);
        builder31.setmongoCollectionFilter(basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder7.mongoCollectionFilter(basicDBObject44);
        int int49 = builder7.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        int int51 = builder7.throttleSize;
        java.util.Set<java.lang.String> strSet52 = builder7.getparentTypes();
        builder7.advancedTransformation = false;
        com.mongodb.BasicDBObject basicDBObject55 = builder7.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(basicDBObject55);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition2.mongoCollectionFilter;
        java.lang.String str13 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "local" + "'", str5, "local");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder4.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers(serverAddressList8);
        builder9.mongoSSLVerifyCertificate = false;
        java.lang.String str12 = builder9.getscriptType();
        boolean boolean13 = builder9.skipInitialImport;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        builder0.throttleSize = (short) 100;
        boolean boolean9 = builder0.mongoSSLVerifyCertificate;
        builder0.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoDb("name");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getmongoAdminUser();
        java.util.Set<java.lang.String> strSet8 = builder0.getincludeFields();
        java.lang.String str9 = builder0.getscriptType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 60000 + "'", int6 == 60000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.disableIndexRefresh(false);
        builder0.setconnectTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.socketTimeout((int) (short) -1);
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript25 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript27 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript27.setNextScore((float) 1000);
        docScoreSearchScript27.setNextScore((float) 1000);
        docScoreSearchScript25.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder34.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder34.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.typeName("disable_index_refresh");
        docScoreSearchScript25.setNextVar("parent_types", (java.lang.Object) builder54);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp56 = builder54.getinitialTimestamp();
        org.elasticsearch.common.settings.Settings settings57 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory58 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        builder59.parentTypes = strSet73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder59.script("port");
        builder77.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings80 = null;
        org.elasticsearch.common.settings.Settings settings81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition83 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder82);
        builder82.setskipInitialImport(true);
        builder82.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder82.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject90 = builder82.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings81, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        org.elasticsearch.river.RiverSettings riverSettings92 = new org.elasticsearch.river.RiverSettings(settings80, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        builder77.setmongoCollectionFilter(basicDBObject90);
        org.elasticsearch.script.ExecutableScript executableScript94 = docScoreNativeScriptFactory58.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        org.elasticsearch.river.RiverSettings riverSettings95 = new org.elasticsearch.river.RiverSettings(settings57, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        builder54.mongoOplogFilter = basicDBObject90;
        org.elasticsearch.river.RiverSettings riverSettings97 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        builder23.setmongoCollectionFilter(basicDBObject90);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(wildcardTimestamp56);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(basicDBObject90);
        org.junit.Assert.assertNotNull(executableScript94);
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("script.default_lang", "ssl");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?ssl?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        java.lang.String str12 = builder10.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoSecondaryReadPreference(true);
        java.lang.String str15 = builder10.gettypeName();
        java.lang.String str16 = builder10.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoGridFS(true);
        boolean boolean19 = builder18.getadvancedTransformation();
        builder18.setskipInitialImport(false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.Class<?> wildcardClass4 = mongoDBRiverDefinition1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "exclude_fields" + "'", str3, "exclude_fields");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = mongoDBRiverDefinition19.mongoLocalPassword;
        java.lang.String str21 = mongoDBRiverDefinition19.getCREDENTIALS_FIELD();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition19.includeFields;
        org.elasticsearch.common.logging.ESLogger eSLogger23 = mongoDBRiverDefinition19.getlogger();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "credentials" + "'", str21, "credentials");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(eSLogger23);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        java.lang.Object obj9 = null;
        docScoreSearchScript0.setNextVar("drop_collection", obj9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        boolean boolean14 = builder11.getmongoUseSSL();
        builder11.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.mongoLocalUser("collection");
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder18);
        docScoreSearchScript0.setNextScore(0.0f);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition6.getSTORE_STATISTICS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition6.getdisableIndexRefresh();
        boolean boolean10 = mongoDBRiverDefinition6.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition6.getGRIDFS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition6.getMongoCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gridfs" + "'", str11, "gridfs");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(false);
        builder0.setriverIndexName("skip_initial_import");
        builder0.mongoLocalPassword = "gridfs";
        java.lang.String str12 = builder0.mongoAdminUser;
        builder0.setmongoAdminPassword("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.riverIndexName("connect_timeout");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.statisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.isMongos((java.lang.Boolean) true);
        builder7.mongoAdminPassword = "drop_collection";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoUseSSL(false);
        builder13.setmongoAdminPassword("script.default_lang");
        java.lang.String str16 = builder13.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.getimportAllCollections();
        java.lang.String str19 = builder17.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        builder20.parentTypes = strSet34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder20.script("port");
        builder38.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.String str43 = builder41.getindexName();
        boolean boolean44 = builder41.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        builder47.parentTypes = strSet61;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder47.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder66.parentTypes = strSet80;
        builder65.setexcludeFields((java.util.Set<java.lang.String>) strSet80);
        builder46.includeFields = strSet80;
        builder38.excludeFields = strSet80;
        builder17.includeFields = strSet80;
        builder13.excludeFields = strSet80;
        builder13.mongoDb = "bulk_timeout";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        int int6 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition2.parentTypes;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setadvancedTransformation(false);
        int int7 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setskipInitialImport(true);
        builder8.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(false);
        java.lang.String str16 = builder15.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.importAllCollections(true);
        boolean boolean19 = builder18.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        builder20.parentTypes = strSet34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.mongoDb("sandbox");
        builder0.indexName = "secondary_read_preference";
        int int43 = builder0.throttleSize;
        builder0.setsocketTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder46.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder46.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str66 = mongoDBRiverDefinition65.mongoLocalPassword;
        java.lang.String str67 = mongoDBRiverDefinition65.getScript();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = mongoDBRiverDefinition65.mongoServers;
        builder0.mongoServers = serverAddressList68;
        boolean boolean70 = builder0.mongoGridFS;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        int int6 = builder0.throttleSize;
        builder0.setscript("user.null");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str6 = mongoDBRiverDefinition1.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disable_index_refresh" + "'", str6, "disable_index_refresh");
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        builder0.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.getmongoUseSSL();
        builder0.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("");
        org.bson.types.BSONTimestamp bSONTimestamp8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.initialTimestamp(bSONTimestamp8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str49 = builder5.typeName;
        java.lang.String[] strArray60 = new java.lang.String[] { "advanced_transformation", "include_collection", "bulk_timeout", "index", "ssl", "", "disable_index_refresh", "index", "user", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.isMongos((java.lang.Boolean) false);
        boolean boolean66 = builder63.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.storeStatistics(true);
        java.util.Set<java.lang.String> strSet16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.parentTypes(strSet16);
        builder10.mongoDb = "parent_types";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("script.disable_dynamic", "include_collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "options" + "'", str8, "options");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.importAllCollections;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder0.mongoClientOptions;
        java.lang.String str5 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder3.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.dropCollection(false);
        java.lang.String str29 = builder28.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject30 = builder28.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings31 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder0.mongoCollectionFilter = basicDBObject30;
        builder0.setmongoDb("parent_types");
        java.lang.String str35 = builder0.getincludeCollection();
        builder0.mongoGridFS = true;
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setmongoGridFS(true);
        java.lang.String str11 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("gridfs");
        builder0.setmongoLocalPassword("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean17 = builder16.getimportAllCollections();
        java.lang.String str18 = builder16.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder16.getmongoServers();
        boolean boolean20 = builder16.getmongoGridFS();
        builder16.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoSecondaryReadPreference(true);
        java.lang.String str25 = builder16.script;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.common.settings.Settings settings27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.setskipInitialImport(true);
        builder28.scriptType = "admin";
        builder28.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder28.isMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject38 = builder28.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings27, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject38);
        org.elasticsearch.river.RiverSettings riverSettings40 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject38);
        builder16.setmongoCollectionFilter(basicDBObject38);
        builder0.mongoCollectionFilter = basicDBObject38;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(basicDBObject38);
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder7.mongoClientOptions = mongoClientOptions11;
        java.util.Set<java.lang.String> strSet13 = builder7.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.script("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.statisticsTypeName("localhost");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        com.mongodb.BasicDBObject basicDBObject12 = builder9.getmongoCollectionFilter();
        builder9.setsocketTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.advancedTransformation;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.mongoLocalUser("parent_types");
        java.lang.String str30 = builder29.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.advancedTransformation(false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str8 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gridfs" + "'", str8, "gridfs");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setindexName("flush_interval");
        builder18.mongoLocalUser = "socket_timeout";
        java.lang.Boolean boolean23 = builder18.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = mongoDBRiverDefinition24.getInitialTimestamp();
        java.lang.String str26 = mongoDBRiverDefinition24.getDEFAULT_DB_HOST();
        boolean boolean27 = mongoDBRiverDefinition24.dropCollection;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "localhost" + "'", str26, "localhost");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.setriverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int9 = builder0.throttleSize;
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoCollectionFilter();
        builder0.isMongos = true;
        builder0.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(basicDBObject10);
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str14 = mongoDBRiverDefinition13.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition13.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_bulk_requests" + "'", str14, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gridfs" + "'", str15, "gridfs");
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str14 = mongoDBRiverDefinition13.getBULK_SIZE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        java.lang.String str19 = builder18.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.dropCollection(true);
        builder18.mongoAdminPassword = "hi!";
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        java.lang.String str28 = builder25.getmongoAdminUser();
        builder25.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder25.initialTimestamp;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript32 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript34 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript34.setNextScore((float) 1000);
        docScoreSearchScript34.setNextScore((float) 1000);
        docScoreSearchScript32.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder41.parentTypes = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder41.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.typeName("disable_index_refresh");
        docScoreSearchScript32.setNextVar("parent_types", (java.lang.Object) builder61);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp63 = builder61.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean65 = builder64.getimportAllCollections();
        java.lang.String str66 = builder64.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = builder64.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = builder64.getmongoServers();
        builder61.mongoServers = serverAddressList68;
        builder25.mongoServers = serverAddressList68;
        boolean boolean71 = builder25.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder25.mongoLocalPassword(".scripts");
        boolean boolean74 = builder73.getmongoSSLVerifyCertificate();
        java.lang.String str75 = builder73.getmongoAdminUser();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(wildcardTimestamp63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(serverAddressList67);
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        java.lang.String str19 = builder18.getscriptType();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setscriptType("collection");
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("");
        java.lang.String str14 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoAdminUser();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition2.mongoClientOptions;
        java.lang.String str9 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getScript();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "import_all_collections" + "'", str9, "import_all_collections");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        builder0.setstatisticsIndexName("local");
        int int7 = builder0.socketTimeout;
        boolean boolean8 = builder0.dropCollection;
        int int9 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        builder11.setskipInitialImport(true);
        builder11.scriptType = "admin";
        builder11.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.isMongos((java.lang.Boolean) false);
        builder11.setriverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder23.parentTypes = strSet37;
        builder11.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet37);
        boolean boolean42 = builder41.getmongoUseSSL();
        builder41.typeName = "local";
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.getindexName();
        com.mongodb.BasicDBObject basicDBObject21 = builder0.getmongoOplogFilter();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder23.parentTypes = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder23.script("port");
        builder41.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings44 = null;
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        builder46.setskipInitialImport(true);
        builder46.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder46.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject54 = builder46.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings44, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        builder41.setmongoCollectionFilter(basicDBObject54);
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        builder0.setmongoCollectionFilter(basicDBObject54);
        builder0.riverName = "name";
        builder0.setindexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder0.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder0.mongoLocalPassword("index");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(basicDBObject21);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str4 = mongoDBRiverDefinition2.getNAME_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.mongoUseSSL;
        java.lang.String str6 = mongoDBRiverDefinition2.riverName;
        java.lang.String str7 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str8 = mongoDBRiverDefinition2.scriptType;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoServers(serverAddressList26);
        builder27.setriverIndexName("import_all_collections");
        com.mongodb.BasicDBObject basicDBObject30 = builder27.getmongoCollectionFilter();
        boolean boolean31 = builder27.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        boolean boolean33 = builder27.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder10.mongoLocalUser = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoAdminUser("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.typeName("drop_collection");
        builder10.setstatisticsIndexName("is_mongos");
        java.lang.String str19 = builder10.getmongoDb();
        boolean boolean20 = builder10.getimportAllCollections();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("options", "port");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?port?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoDb("filter");
        java.lang.String str23 = builder0.getstatisticsTypeName();
        builder0.disableIndexRefresh = true;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder0.getmongoServers();
        int int5 = builder0.throttleSize;
        boolean boolean6 = builder0.advancedTransformation;
        builder0.setmongoLocalUser("flush_interval");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder0.mongoServers;
        java.lang.String str5 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminUser("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition2.getlogger();
        boolean boolean6 = mongoDBRiverDefinition2.isStoreStatistics();
        boolean boolean7 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        builder29.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        boolean boolean35 = mongoDBRiverDefinition34.isMongoUseSSL();
        java.lang.String str36 = mongoDBRiverDefinition34.getGRIDFS_FIELD();
        java.lang.String str37 = mongoDBRiverDefinition34.getSCRIPT_FIELD();
        java.lang.String str38 = mongoDBRiverDefinition34.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "gridfs" + "'", str36, "gridfs");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "script" + "'", str37, "script");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "actions" + "'", str38, "actions");
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition3.mongoLocalPassword;
        java.lang.String str6 = mongoDBRiverDefinition3.getStatisticsIndexName();
        java.lang.String str7 = mongoDBRiverDefinition3.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition3.mongoLocalPassword;
        boolean boolean9 = mongoDBRiverDefinition3.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.mongoSecondaryReadPreference;
        boolean boolean5 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str4 = mongoDBRiverDefinition2.getNAME_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition2.getMongoClientOptions();
        int int6 = mongoDBRiverDefinition2.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setadvancedTransformation(false);
        builder0.setincludeCollection("script.default_lang");
        java.lang.String str9 = builder0.getmongoLocalUser();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("script", "include_fields", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.scriptType("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.throttleSize((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.dropCollection(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        builder30.setmongoClientOptions(mongoClientOptions31);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str24 = builder20.mongoDb;
        builder20.typeName = "script";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder20.initialTimestamp;
        builder20.setisMongos((java.lang.Boolean) true);
        boolean boolean30 = builder20.getdisableIndexRefresh();
        builder20.importAllCollections = false;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(wildcardTimestamp27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        builder4.setsocketTimeout(1);
        builder4.setdropCollection(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        builder19.setscript("concurrent_requests");
        boolean boolean22 = builder19.mongoUseSSL;
        builder19.mongoCollection = "name";
        boolean boolean25 = builder19.dropCollection;
        java.lang.String str26 = builder19.getincludeCollection();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("", "index");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?index?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        builder0.setmongoDb("hi!.null");
        java.lang.String str19 = builder0.getscript();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("port", "index");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?index?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.storeStatistics(true);
        java.lang.String str5 = builder0.mongoDb;
        builder0.mongoLocalUser = "admin";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        boolean boolean3 = builder0.advancedTransformation;
        builder0.setconnectTimeout((int) (short) 1);
        int int6 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean8 = mongoDBRiverDefinition7.dropCollection;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition4.getRiverName();
        java.lang.String str7 = mongoDBRiverDefinition4.getMongoOplogNamespace();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("size", "skip_initial_import", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?skip_initial_import?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        builder0.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverName("");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        boolean boolean14 = builder0.mongoGridFS;
        boolean boolean15 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setindexName("flush_interval");
        builder18.mongoLocalUser = "socket_timeout";
        boolean boolean23 = builder18.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.mongoLocalPassword;
        int int5 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str8 = mongoDBRiverDefinition2.getDB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_collection" + "'", str6, "include_collection");
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "db" + "'", str8, "db");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "servers" + "'", str9, "servers");
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        builder0.setincludeCollection("gridfs");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.statisticsIndexName;
        java.lang.String str9 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.mongoUseSSL;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl_verify_certificate" + "'", str9, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setindexName("flush_interval");
        builder18.mongoLocalUser = "socket_timeout";
        java.lang.Boolean boolean23 = builder18.getisMongos();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = mongoDBRiverDefinition25.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(byteSizeValue26);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        boolean boolean23 = builder18.skipInitialImport;
        boolean boolean24 = builder18.getmongoSecondaryReadPreference();
        java.lang.String str25 = builder18.riverName;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str8 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str9 = mongoDBRiverDefinition1.script;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        builder4.setsocketTimeout(1);
        boolean boolean7 = builder4.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getimportAllCollections();
        java.lang.String str12 = builder10.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        builder13.parentTypes = strSet27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder13.script("port");
        builder31.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.lang.String str36 = builder34.getindexName();
        boolean boolean37 = builder34.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder40.parentTypes = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder40.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        builder59.parentTypes = strSet73;
        builder58.setexcludeFields((java.util.Set<java.lang.String>) strSet73);
        builder39.includeFields = strSet73;
        builder31.excludeFields = strSet73;
        builder10.includeFields = strSet73;
        builder9.excludeFields = strSet73;
        java.lang.String str81 = builder9.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str83 = mongoDBRiverDefinition82.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean84 = mongoDBRiverDefinition82.skipInitialImport;
        java.lang.String str85 = mongoDBRiverDefinition82.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "concurrent_bulk_requests" + "'", str83, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "concurrent_bulk_requests" + "'", str85, "concurrent_bulk_requests");
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str5 = mongoDBRiverDefinition1.typeName;
        java.lang.String str6 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getIncludeCollection();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "exclude_fields" + "'", str2, "exclude_fields");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "servers" + "'", str6, "servers");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder23.parentTypes = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder23.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.dropCollection(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = builder43.mongoServers;
        java.lang.String str48 = builder43.getscript();
        builder43.setmongoDb("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = builder51.getindexName();
        boolean boolean54 = builder51.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder51.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        builder57.setskipInitialImport(true);
        builder57.scriptType = "admin";
        java.lang.String[] strArray65 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder57.setincludeFields((java.util.Set<java.lang.String>) strSet66);
        builder51.setincludeFields((java.util.Set<java.lang.String>) strSet66);
        builder43.includeFields = strSet66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet66);
        java.lang.String str72 = builder20.mongoLocalUser;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        builder0.setstatisticsTypeName("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoClientOptions(mongoClientOptions20);
        boolean boolean22 = builder21.advancedTransformation;
        builder21.setstatisticsTypeName("socket_timeout");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        java.lang.String str12 = builder10.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoSecondaryReadPreference(true);
        java.lang.String str15 = builder10.gettypeName();
        builder10.setstatisticsTypeName("include_collection");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        java.lang.String str8 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.storeStatistics;
        java.lang.String str11 = mongoDBRiverDefinition2.getScript();
        boolean boolean12 = mongoDBRiverDefinition2.isImportAllCollections();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        int int28 = builder25.getconnectTimeout();
        boolean boolean29 = builder25.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.importAllCollections(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder25.initialTimestamp;
        java.lang.String str33 = builder25.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        builder34.setstoreStatistics(true);
        boolean boolean42 = builder34.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean44 = builder43.getimportAllCollections();
        java.lang.String str45 = builder43.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList46 = builder43.getmongoServers();
        boolean boolean47 = builder43.getmongoGridFS();
        builder43.indexName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        builder50.parentTypes = strSet64;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder50.throttleSize((int) (byte) 0);
        int int69 = builder50.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder70);
        builder70.setskipInitialImport(true);
        builder70.scriptType = "admin";
        java.lang.String[] strArray78 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder70.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet79);
        java.util.Set<java.lang.String> strSet83 = builder50.parentTypes;
        builder43.setexcludeFields(strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder34.excludeFields(strSet83);
        builder25.setparentTypes(strSet83);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp87 = builder25.initialTimestamp;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(serverAddressList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(wildcardTimestamp87);
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str10 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "password" + "'", str10, "password");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        java.lang.Object obj9 = null;
        docScoreSearchScript0.setNextVar("drop_collection", obj9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean12 = builder11.getimportAllCollections();
        java.lang.String str13 = builder11.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        boolean boolean18 = builder11.getadvancedTransformation();
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder11);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.disableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        builder0.mongoClientOptions = mongoClientOptions20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = null;
        builder0.setmongoServers(serverAddressList24);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoLocalPassword("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str22 = mongoDBRiverDefinition21.getUSER_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "user" + "'", str22, "user");
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean22 = builder18.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.statisticsIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.socketTimeout(1000);
        builder28.setskipInitialImport(true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder19.mongoGridFS;
        builder19.setscriptType("hi!.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.statisticsTypeName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        boolean boolean26 = builder24.mongoGridFS;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setadvancedTransformation(false);
        int int7 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setskipInitialImport(true);
        builder8.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(false);
        java.lang.String str16 = builder15.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.importAllCollections(true);
        boolean boolean19 = builder18.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        builder20.parentTypes = strSet34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.disableIndexRefresh(true);
        builder0.setscript("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject44 = mongoDBRiverDefinition43.mongoOplogFilter;
        java.lang.String str45 = mongoDBRiverDefinition43.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(basicDBObject44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script_type" + "'", str45, "script_type");
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("socket_timeout");
        builder0.dropCollection = false;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        builder29.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        boolean boolean35 = mongoDBRiverDefinition34.isMongoUseSSL();
        java.lang.String str36 = mongoDBRiverDefinition34.getGRIDFS_FIELD();
        java.lang.String str37 = mongoDBRiverDefinition34.getSCRIPT_FIELD();
        boolean boolean38 = mongoDBRiverDefinition34.getadvancedTransformation();
        java.lang.String str39 = mongoDBRiverDefinition34.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "gridfs" + "'", str36, "gridfs");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "script" + "'", str37, "script");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "import_all_collections" + "'", str39, "import_all_collections");
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoLocalPassword("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str26 = mongoDBRiverDefinition25.getSSL_VERIFY_CERT_FIELD();
        int int27 = mongoDBRiverDefinition25.getDEFAULT_CONNECT_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition25.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ssl_verify_certificate" + "'", str26, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 30000 + "'", int27 == 30000);
        org.junit.Assert.assertNull(basicDBObject28);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.getisMongos();
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        int int7 = mongoDBRiverDefinition1.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoDb();
        int int9 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str10 = mongoDBRiverDefinition1.getRiverIndexName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((-1.0f));
        org.apache.lucene.search.Scorer scorer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        boolean boolean4 = builder0.storeStatistics;
        java.lang.String str5 = builder0.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        boolean boolean11 = mongoDBRiverDefinition2.isSkipInitialImport();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = mongoDBRiverDefinition3.getNAME_FIELD();
        boolean boolean5 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        boolean boolean6 = mongoDBRiverDefinition3.mongoSecondaryReadPreference;
        java.lang.String str7 = mongoDBRiverDefinition3.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "skip_initial_import" + "'", str7, "skip_initial_import");
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.socketTimeout(30000);
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        builder0.mongoClientOptions = mongoClientOptions10;
        builder0.setmongoCollection("filter");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        int int8 = mongoDBRiverDefinition1.getConnectTimeout();
        boolean boolean9 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.storeStatistics(true);
        builder15.includeCollection = "include_fields";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str49 = mongoDBRiverDefinition48.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition48.getCOLLECTION_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition48.getSERVERS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition48.statisticsTypeName;
        java.lang.String str53 = mongoDBRiverDefinition48.riverName;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "advanced_transformation" + "'", str49, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "collection" + "'", str50, "collection");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "servers" + "'", str51, "servers");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.setmongoAdminPassword("ssl");
        int int8 = builder5.getconnectTimeout();
        boolean boolean9 = builder5.dropCollection;
        builder5.setsocketTimeout((int) (byte) 1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder5.mongoServers;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.setmongoDb(".scripts");
        builder25.statisticsIndexName = "concurrent_bulk_requests";
        boolean boolean30 = builder25.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str4 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "local" + "'", str4, "local");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("store_statistics");
        builder0.setscriptType("collection");
        java.lang.String str14 = builder0.riverIndexName;
        builder0.mongoLocalPassword = "throttle_size";
        boolean boolean17 = builder0.getskipInitialImport();
        java.lang.String str18 = builder0.typeName;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue6 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str7 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.parentTypes;
        int int9 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.initialTimestamp;
        builder0.skipInitialImport = false;
        java.lang.String str9 = builder0.getmongoCollection();
        builder0.setmongoDb("credentials");
        org.bson.types.BSONTimestamp bSONTimestamp12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.initialTimestamp(bSONTimestamp12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder4.parentTypes = strSet18;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder4.script("port");
        builder22.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings25 = null;
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.setskipInitialImport(true);
        builder27.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject35 = builder27.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings26, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings25, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        builder22.setmongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        builder0.mongoCollectionFilter = basicDBObject35;
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.mongoClientOptions(mongoClientOptions41);
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        builder42.mongoClientOptions = mongoClientOptions43;
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.mongoClientOptions;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(mongoClientOptions45);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        builder7.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.importAllCollections(true);
        boolean boolean30 = builder29.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        builder5.parentTypes = strSet45;
        boolean boolean51 = builder5.disableIndexRefresh;
        java.lang.String str52 = builder5.riverIndexName;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int4 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.socketTimeout = 10;
        builder0.setindexName("type");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.Boolean boolean4 = mongoDBRiverDefinition2.isMongos();
        boolean boolean5 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getScript();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.indexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.Boolean boolean9 = mongoDBRiverDefinition8.getisMongos();
        int int10 = mongoDBRiverDefinition8.getThrottleSize();
        java.lang.Class<?> wildcardClass11 = mongoDBRiverDefinition8.getClass();
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str10 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "password" + "'", str10, "password");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_timeout" + "'", str11, "bulk_timeout");
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoLocalPassword("servers");
        builder13.setstoreStatistics(true);
        java.util.Set<java.lang.String> strSet16 = builder13.getincludeFields();
        builder13.setmongoLocalPassword("script.default_lang");
        java.lang.String str19 = builder13.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalPassword;
        boolean boolean8 = mongoDBRiverDefinition2.getdropCollection();
        boolean boolean9 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str10 = mongoDBRiverDefinition2.getStatisticsTypeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore((float) 1000);
        docScoreSearchScript0.setNextScore(10.0f);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        int int28 = builder9.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        builder29.setskipInitialImport(true);
        builder29.scriptType = "admin";
        java.lang.String[] strArray37 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder29.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder9.advancedTransformation(false);
        java.lang.Object obj44 = docScoreSearchScript0.unwrap((java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = mongoDBRiverDefinition46.getDEFAULT_BULK_SIZE();
        java.lang.String str48 = mongoDBRiverDefinition46.getINITIAL_TIMESTAMP_FIELD();
        int int49 = mongoDBRiverDefinition46.getSocketTimeout();
        java.lang.String str50 = mongoDBRiverDefinition46.getTHROTTLE_SIZE_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition46.getMongoCollection();
        boolean boolean52 = mongoDBRiverDefinition46.getmongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.includeFields;
        java.lang.Object obj54 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition46);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(byteSizeValue47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "throttle_size" + "'", str50, "throttle_size");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNotNull(obj54);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str9 = mongoDBRiverDefinition1.includeCollection;
        int int10 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        builder48.setriverIndexName("");
        java.lang.String str51 = builder48.indexName;
        boolean boolean52 = builder48.storeStatistics;
        java.lang.Boolean boolean53 = builder48.getisMongos();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + true + "'", boolean53, true);
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        builder10.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.storeStatistics(true);
        builder10.statisticsIndexName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder27.parentTypes = strSet41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder26.parentTypes((java.util.Set<java.lang.String>) strSet41);
        builder44.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.setskipInitialImport(true);
        builder47.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder47.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder55.parentTypes = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder54.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet69);
        java.util.Set<java.lang.String> strSet74 = builder44.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder10.parentTypes(strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder10.throttleSize(0);
        boolean boolean78 = builder77.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        builder77.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        int int49 = builder5.throttleSize;
        builder5.setdisableIndexRefresh(true);
        boolean boolean52 = builder5.getadvancedTransformation();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.disableIndexRefresh(true);
        builder50.scriptType = "store_statistics";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.scriptType("");
        java.lang.String str55 = builder50.getmongoLocalUser();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str5 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "store_statistics" + "'", str7, "store_statistics");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder19.parentTypes = strSet33;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder18.mongoAdminPassword("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder18.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder18.advancedTransformation(true);
        int int43 = builder18.getconnectTimeout();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        boolean boolean7 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        java.lang.String str9 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSSLVerifyCertificate(false);
        builder0.statisticsTypeName = "localhost";
        java.lang.String str14 = builder0.getscriptType();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.parentTypes(strSet10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.statisticsTypeName("initial_timestamp");
        builder11.mongoSecondaryReadPreference = false;
        builder11.setmongoLocalUser("ssl_verify_certificate");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setisMongos((java.lang.Boolean) true);
        builder0.setscriptType("exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = mongoDBRiverDefinition8.getSERVERS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "servers" + "'", str9, "servers");
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getStatisticsTypeName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "filter" + "'", str13, "filter");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition3.mongoLocalPassword;
        int int6 = mongoDBRiverDefinition3.connectTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str7 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "is_mongos" + "'", str7, "is_mongos");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str7 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str8 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str10 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str6 = mongoDBRiverDefinition2.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoAdminUser;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteSizeValue10);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = builder8.getmongoLocalUser();
        builder8.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder8.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoServers(serverAddressList14);
        com.mongodb.BasicDBObject basicDBObject16 = builder0.mongoOplogFilter;
        java.lang.String str17 = builder0.getmongoLocalUser();
        boolean boolean18 = builder0.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition4.getlogger();
        java.lang.String str6 = mongoDBRiverDefinition4.getIncludeCollection();
        boolean boolean7 = mongoDBRiverDefinition4.getimportAllCollections();
        boolean boolean8 = mongoDBRiverDefinition4.mongoSecondaryReadPreference;
        java.lang.String str9 = mongoDBRiverDefinition4.getSECONDARY_READ_PREFERENCE_FIELD();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition4.mongoOplogFilter;
        java.lang.String str11 = mongoDBRiverDefinition4.indexName;
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.disableIndexRefresh = false;
        builder7.setmongoAdminUser("port");
        builder7.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder7.mongoLocalPassword("port");
        builder7.setmongoLocalUser("script_type");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        boolean boolean6 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.includeCollection;
        boolean boolean7 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.storeStatistics(true);
        boolean boolean5 = builder0.disableIndexRefresh;
        boolean boolean6 = builder0.getmongoUseSSL();
        builder0.mongoAdminUser = "include_fields";
        boolean boolean9 = builder0.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue3 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        int int5 = mongoDBRiverDefinition2.getSocketTimeout();
        java.lang.String str6 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings10 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        java.lang.Class<?> wildcardClass11 = basicDBObject9.getClass();
        org.junit.Assert.assertNotNull(byteSizeValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "initial_timestamp" + "'", str4, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "throttle_size" + "'", str6, "throttle_size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "advanced_transformation" + "'", str7, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_requests" + "'", str8, "concurrent_requests");
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.connectTimeout(0);
        java.lang.String str13 = builder12.getmongoLocalPassword();
        boolean boolean14 = builder12.mongoSSLVerifyCertificate;
        builder12.setdropCollection(true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        java.lang.String str28 = builder25.getmongoAdminUser();
        builder25.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder25.initialTimestamp;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript32 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript34 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript34.setNextScore((float) 1000);
        docScoreSearchScript34.setNextScore((float) 1000);
        docScoreSearchScript32.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder41.parentTypes = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder41.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.typeName("disable_index_refresh");
        docScoreSearchScript32.setNextVar("parent_types", (java.lang.Object) builder61);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp63 = builder61.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean65 = builder64.getimportAllCollections();
        java.lang.String str66 = builder64.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = builder64.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = builder64.getmongoServers();
        builder61.mongoServers = serverAddressList68;
        builder25.mongoServers = serverAddressList68;
        builder25.setscriptType("include_collection");
        boolean boolean73 = builder25.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(wildcardTimestamp63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(serverAddressList67);
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        boolean boolean4 = builder0.getstoreStatistics();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoDb("hi!");
        builder13.isMongos = true;
        java.lang.String str16 = builder13.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder19.parentTypes = strSet33;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder19.script("port");
        builder37.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.common.settings.Settings settings41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        builder42.setskipInitialImport(true);
        builder42.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder42.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject50 = builder42.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings41, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings40, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder37.setmongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder13.mongoCollectionFilter(basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.script.ExecutableScript executableScript56 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject50);
        builder0.setmongoCollectionFilter(basicDBObject50);
        builder0.setscriptType("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder0.throttleSize(10);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executableScript56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(mongoClientOptions63);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        builder26.setskipInitialImport(true);
        builder26.scriptType = "admin";
        builder26.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder26.isMongos((java.lang.Boolean) false);
        builder26.setriverName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder38.parentTypes = strSet52;
        builder26.excludeFields = strSet52;
        builder25.includeFields = strSet52;
        java.util.Set<java.lang.String> strSet57 = builder25.getparentTypes();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strSet57);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoDb("");
        builder12.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str20 = mongoDBRiverDefinition19.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition19.getParentTypes();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        int int23 = mongoDBRiverDefinition19.throttleSize;
        java.lang.String str24 = mongoDBRiverDefinition19.statisticsTypeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = mongoDBRiverDefinition19.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder12.mongoServers(serverAddressList25);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disable_index_refresh" + "'", str20, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getNAME_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "name" + "'", str8, "name");
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str49 = builder5.statisticsTypeName;
        builder5.script = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder5.mongoSSLVerifyCertificate(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder5.getmongoServers();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.Boolean boolean16 = mongoDBRiverDefinition15.isMongos();
        boolean boolean17 = mongoDBRiverDefinition15.importAllCollections;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoServers(serverAddressList26);
        builder27.setriverIndexName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.lang.String str31 = mongoDBRiverDefinition30.getBULK_FIELD();
        java.lang.String str32 = mongoDBRiverDefinition30.getINDEX_OBJECT();
        java.lang.String str33 = mongoDBRiverDefinition30.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bulk" + "'", str31, "bulk");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "index" + "'", str32, "index");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "throttle_size" + "'", str33, "throttle_size");
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.mongoAdminUser;
        boolean boolean3 = builder0.mongoSecondaryReadPreference;
        org.bson.types.Binary binary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.initialTimestamp(binary4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder32.statisticsTypeName = "throttle_size";
        builder32.script = "initial_timestamp";
        com.mongodb.BasicDBObject basicDBObject37 = builder32.getmongoCollectionFilter();
        java.lang.String str38 = builder32.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp40 = builder32.initialTimestamp;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(wildcardTimestamp40);
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSecondaryReadPreference(false);
        builder6.setscript("type");
        builder6.includeCollection = "credentials";
        builder6.setconnectTimeout((-1));
        java.lang.String str13 = builder6.mongoLocalPassword;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        java.util.Set<java.lang.String> strSet17 = builder0.getexcludeFields();
        builder0.setstoreStatistics(false);
        builder0.mongoSSLVerifyCertificate = true;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.mongoLocalPassword;
        int int5 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str8 = mongoDBRiverDefinition2.script;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_collection" + "'", str6, "include_collection");
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str7 = mongoDBRiverDefinition1.script;
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_bulk_requests" + "'", str4, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk" + "'", str8, "bulk");
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.includeCollection;
        int int13 = mongoDBRiverDefinition2.throttleSize;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "throttle_size" + "'", str11, "throttle_size");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        builder19.setscript("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.mongoLocalPassword("gridfs");
        int int26 = builder25.getsocketTimeout();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1000 + "'", int26 == 1000);
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        java.lang.Object obj4 = null;
        docScoreSearchScript0.setNextVar("concurrent_requests", obj4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.Object obj8 = docScoreSearchScript0.unwrap((java.lang.Object) builder6);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        builder29.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.mongoDb("hi!");
        builder34.isMongos = true;
        java.lang.String str37 = builder34.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder40.parentTypes = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder40.script("port");
        builder58.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings61 = null;
        org.elasticsearch.common.settings.Settings settings62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        builder63.setskipInitialImport(true);
        builder63.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder63.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject71 = builder63.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings62, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        org.elasticsearch.river.RiverSettings riverSettings73 = new org.elasticsearch.river.RiverSettings(settings61, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        builder58.setmongoCollectionFilter(basicDBObject71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder34.mongoCollectionFilter(basicDBObject71);
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings28, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder11.mongoOplogFilter(basicDBObject71);
        org.elasticsearch.river.RiverSettings riverSettings78 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        java.util.Map<java.lang.String, java.lang.Object> strMap80 = riverSettings79.settings();
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource(strMap80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strMap80);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder9.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder9.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.typeName("disable_index_refresh");
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        builder32.setskipInitialImport(true);
        builder32.scriptType = "admin";
        builder32.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder32.isMongos((java.lang.Boolean) false);
        java.lang.String str42 = builder32.mongoAdminUser;
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) str42);
        org.apache.lucene.search.Scorer scorer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str6 = mongoDBRiverDefinition1.getHOST_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "host" + "'", str6, "host");
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str24 = mongoDBRiverDefinition23.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean25 = mongoDBRiverDefinition23.isDisableIndexRefresh();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "concurrent_bulk_requests" + "'", str24, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean7 = builder6.getimportAllCollections();
        java.lang.String str8 = builder6.getmongoAdminUser();
        java.lang.String str9 = builder6.typeName;
        builder6.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject12 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.script.ScriptService scriptService17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("flush_interval", "", riverSettings16, scriptService17);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.Boolean boolean4 = mongoDBRiverDefinition2.isMongos();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean6 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str10 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(false);
        builder12.setscript("include_collection");
        int int17 = builder12.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.advancedTransformation(true);
        boolean boolean22 = builder19.getmongoGridFS();
        boolean boolean23 = builder19.dropCollection;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.typeName("localhost");
        builder11.includeCollection = "db";
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        builder0.statisticsIndexName = "parent_types";
        com.mongodb.BasicDBObject basicDBObject8 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.scriptType("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder34.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder34.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        builder53.parentTypes = strSet67;
        builder52.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        builder29.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet67);
        builder10.setstatisticsTypeName("");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject5 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.indexName("script_type");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        java.lang.String str8 = builder0.statisticsTypeName;
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getPORT_FIELD();
        int int5 = mongoDBRiverDefinition2.socketTimeout;
        java.lang.String str6 = mongoDBRiverDefinition2.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "port" + "'", str4, "port");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "store_statistics" + "'", str6, "store_statistics");
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.setadvancedTransformation(true);
        builder5.setmongoAdminPassword("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder5.skipInitialImport(false);
        boolean boolean53 = builder52.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder52.dropCollection(false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean7 = builder0.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder0.setmongoClientOptions(mongoClientOptions8);
        builder0.disableIndexRefresh = false;
        builder0.settypeName(".scripts");
        java.lang.String str14 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.mongoLocalPassword;
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        boolean boolean6 = mongoDBRiverDefinition2.importAllCollections;
        boolean boolean7 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.lang.String str9 = mongoDBRiverDefinition2.getINDEX_OBJECT();
        java.lang.String str10 = mongoDBRiverDefinition2.getFILTER_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.isMongoUseSSL();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "servers" + "'", str3, "servers");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index" + "'", str9, "index");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoAdminPassword("ssl_verify_certificate");
        boolean boolean25 = builder20.getstoreStatistics();
        java.lang.String str26 = builder20.indexName;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index" + "'", str26, "index");
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        builder7.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.importAllCollections(true);
        boolean boolean30 = builder29.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        builder5.parentTypes = strSet45;
        builder5.setdisableIndexRefresh(true);
        builder5.script = "include_fields";
        boolean boolean55 = builder5.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.mongoLocalPassword = "script.default_lang";
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder5.mongoClientOptions = mongoClientOptions12;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        boolean boolean23 = mongoDBRiverDefinition22.skipInitialImport;
        java.lang.String str24 = mongoDBRiverDefinition22.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition22.scriptType;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "concurrent_requests" + "'", str24, "concurrent_requests");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.getmongoUseSSL();
        builder0.setstatisticsTypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalUser("collection");
        builder7.mongoDb = "user";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.advancedTransformation(true);
        builder7.setdropCollection(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        builder0.setconnectTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder0.build();
        org.elasticsearch.common.logging.ESLogger eSLogger9 = mongoDBRiverDefinition8.getlogger();
        java.lang.String str10 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNotNull(eSLogger9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondary_read_preference" + "'", str11, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "throttle_size" + "'", str12, "throttle_size");
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        boolean boolean17 = builder0.getdropCollection();
        builder0.setstatisticsTypeName("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoClientOptions(mongoClientOptions20);
        boolean boolean22 = builder21.advancedTransformation;
        java.lang.String str23 = builder21.mongoAdminPassword;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str13 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str14 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.getisMongos();
        int int11 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean12 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str13 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.Boolean boolean14 = mongoDBRiverDefinition1.isMongos;
        java.lang.String str15 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        int int6 = mongoDBRiverDefinition2.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition2.statisticsTypeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition2.mongoServers;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.getParentTypes();
        boolean boolean10 = mongoDBRiverDefinition2.storeStatistics;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setisMongos((java.lang.Boolean) true);
        builder20.setmongoDb("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.includeCollection("local");
        java.lang.String str28 = builder20.statisticsTypeName;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str7 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition2.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "import_all_collections" + "'", str8, "import_all_collections");
        org.junit.Assert.assertNull(mongoClientOptions9);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setriverIndexName("admin");
        builder2.storeStatistics = false;
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) false);
        docScoreSearchScript0.setNextScore((float) '4');
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoDb("hi!");
        builder19.isMongos = true;
        java.lang.String str22 = builder19.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder25.parentTypes = strSet39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder25.script("port");
        builder43.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings46 = null;
        org.elasticsearch.common.settings.Settings settings47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        builder48.setskipInitialImport(true);
        builder48.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder48.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject56 = builder48.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings47, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings46, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder43.setmongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder19.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings63 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings64 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        java.lang.Object obj65 = docScoreSearchScript0.unwrap((java.lang.Object) basicDBObject56);
        // The following exception was thrown during execution in test generation
        try {
            long long66 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{ }");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{ }");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{ }");
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.indexName("initial_timestamp");
        boolean boolean23 = builder18.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean25 = mongoDBRiverDefinition24.disableIndexRefresh;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean24 = builder23.getimportAllCollections();
        java.lang.String str25 = builder23.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder23.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoServers(serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.statisticsTypeName("disable_index_refresh");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition4.includeFields;
        java.lang.String str6 = mongoDBRiverDefinition4.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.getINDEX_OBJECT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_collection" + "'", str6, "include_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index" + "'", str7, "index");
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setmongoGridFS(true);
        builder0.setimportAllCollections(true);
        java.lang.String str13 = builder0.getmongoCollection();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition1.getScript();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gridfs" + "'", str6, "gridfs");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "socket_timeout" + "'", str7, "socket_timeout");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setindexName("flush_interval");
        builder18.mongoLocalUser = "socket_timeout";
        boolean boolean23 = builder18.disableIndexRefresh;
        java.lang.String str24 = builder18.mongoCollection;
        builder18.setindexName("initial_timestamp");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        builder0.setconnectTimeout((int) (short) -1);
        builder0.disableIndexRefresh = false;
        builder0.setstatisticsTypeName("drop_collection");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        builder5.statisticsIndexName = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.advancedTransformation(true);
        java.lang.String str12 = builder5.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        builder0.importAllCollections = true;
        com.mongodb.BasicDBObject basicDBObject5 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.skipInitialImport(false);
        java.lang.String str14 = builder13.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.importAllCollections(true);
        builder13.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder27.parentTypes = strSet41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder26.parentTypes((java.util.Set<java.lang.String>) strSet41);
        builder44.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.setskipInitialImport(true);
        builder47.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder47.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder55.parentTypes = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder54.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder44.excludeFields((java.util.Set<java.lang.String>) strSet69);
        java.util.Set<java.lang.String> strSet74 = builder44.excludeFields;
        builder13.excludeFields = strSet74;
        builder0.parentTypes = strSet74;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder0.dropCollection(false);
        builder0.throttleSize = 0;
        builder0.setadvancedTransformation(true);
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder0.setriverName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int9 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoDb("type");
        boolean boolean12 = builder11.getadvancedTransformation();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str11 = mongoDBRiverDefinition1.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "filter" + "'", str11, "filter");
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.riverName("bulk_size");
        java.lang.String str6 = builder5.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setskipInitialImport(true);
        builder7.scriptType = "admin";
        builder7.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.isMongos((java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        builder19.setskipInitialImport(true);
        builder19.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(false);
        java.lang.String str27 = builder26.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.importAllCollections(true);
        boolean boolean30 = builder29.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder31.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        builder5.parentTypes = strSet45;
        builder5.mongoAdminUser = "store_statistics";
        boolean boolean53 = builder5.mongoGridFS;
        boolean boolean54 = builder5.mongoSSLVerifyCertificate;
        builder5.script = "connect_timeout";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str8 = mongoDBRiverDefinition1.scriptType;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean7 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoLocalPassword("servers");
        java.lang.String str14 = builder5.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.setskipInitialImport(true);
        builder15.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.skipInitialImport(false);
        java.lang.String str23 = builder22.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.importAllCollections(true);
        boolean boolean26 = builder25.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder27.parentTypes = strSet41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet41);
        builder5.includeFields = strSet41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.bson.types.BSONTimestamp bSONTimestamp47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder5.initialTimestamp(bSONTimestamp47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getmongoUseSSL();
        boolean boolean5 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str6 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition2.getIncludeCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "flush_interval" + "'", str3, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder7.mongoClientOptions = mongoClientOptions11;
        java.util.Set<java.lang.String> strSet13 = builder7.getincludeFields();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder7.initialTimestamp;
        builder7.setconnectTimeout(8);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.isDropCollection();
        boolean boolean5 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        boolean boolean6 = mongoDBRiverDefinition3.getmongoGridFS();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition3.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition3.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition3.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean10 = mongoDBRiverDefinition3.isMongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str7 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "skip_initial_import" + "'", str7, "skip_initial_import");
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        builder0.storeStatistics = true;
        builder0.setmongoSecondaryReadPreference(false);
        java.lang.String str8 = builder0.getscriptType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str5 = mongoDBRiverDefinition1.getFILTER_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "local" + "'", str7, "local");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder8.parentTypes = strSet22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet22);
        builder25.scriptType = "initial_timestamp";
        java.lang.String str28 = builder25.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.script("script_type");
        java.util.Set<java.lang.String> strSet31 = builder30.getincludeFields();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.setadvancedTransformation(false);
        builder0.setincludeCollection("script.default_lang");
        boolean boolean9 = builder0.getmongoGridFS();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("parent_types");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?parent_types?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        java.lang.String str9 = builder0.script;
        boolean boolean10 = builder0.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("options");
        builder0.importAllCollections = false;
        builder0.setdropCollection(true);
        java.lang.String str23 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.disableIndexRefresh = false;
        builder7.setmongoAdminUser("port");
        builder7.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder7.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoLocalUser("script.default_lang");
        boolean boolean14 = builder10.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        java.lang.String str3 = builder0.indexName;
        boolean boolean4 = builder0.mongoUseSSL;
        int int5 = builder0.getthrottleSize();
        builder0.socketTimeout = (short) 10;
        builder0.setmongoLocalUser("host");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str5 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition1.getisMongos();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str10 = mongoDBRiverDefinition1.getScriptType();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder0.mongoServers;
        java.lang.String str5 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.importAllCollections(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.setskipInitialImport(true);
        builder14.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.skipInitialImport(false);
        builder14.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        builder25.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoDb("hi!");
        builder30.isMongos = true;
        java.lang.String str33 = builder30.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder36.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder36.script("port");
        builder54.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings57 = null;
        org.elasticsearch.common.settings.Settings settings58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        builder59.setskipInitialImport(true);
        builder59.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder59.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject67 = builder59.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings68 = new org.elasticsearch.river.RiverSettings(settings58, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        org.elasticsearch.river.RiverSettings riverSettings69 = new org.elasticsearch.river.RiverSettings(settings57, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        builder54.setmongoCollectionFilter(basicDBObject67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder30.mongoCollectionFilter(basicDBObject67);
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        builder14.mongoOplogFilter = basicDBObject67;
        org.elasticsearch.script.ExecutableScript executableScript74 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject67);
        builder6.setmongoCollectionFilter(basicDBObject67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        builder76.setskipInitialImport(true);
        builder76.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder76.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject84 = builder76.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder76.mongoAdminPassword("exclude_fields");
        builder86.setstatisticsIndexName("password");
        boolean boolean89 = builder86.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition90 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder86);
        com.mongodb.BasicDBObject basicDBObject91 = mongoDBRiverDefinition90.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder6.mongoOplogFilter(basicDBObject91);
        com.mongodb.BasicDBObject basicDBObject93 = builder6.getmongoOplogFilter();
        builder0.setmongoOplogFilter(basicDBObject93);
        builder0.setmongoAdminUser("admin");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(executableScript74);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(basicDBObject91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(basicDBObject93);
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.disableIndexRefresh;
        int int10 = mongoDBRiverDefinition2.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition2.getCONNECT_TIMEOUT();
        boolean boolean12 = mongoDBRiverDefinition2.mongoGridFS;
        java.lang.Boolean boolean13 = mongoDBRiverDefinition2.isMongos();
        java.lang.String str14 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        java.lang.String str6 = builder0.indexName;
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int10 = mongoDBRiverDefinition9.getThrottleSize();
        int int11 = mongoDBRiverDefinition9.socketTimeout;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger7 = mongoDBRiverDefinition1.getlogger();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str9 = mongoDBRiverDefinition1.getDB_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "import_all_collections" + "'", str6, "import_all_collections");
        org.junit.Assert.assertNotNull(eSLogger7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "db" + "'", str9, "db");
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("socket_timeout", "concurrent_requests");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?concurrent_requests?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        boolean boolean8 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getCONNECT_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "user" + "'", str9, "user");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoDb("");
        builder12.typeName = "drop_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.importAllCollections(false);
        boolean boolean21 = builder20.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("store_statistics");
        int int12 = builder0.getconnectTimeout();
        builder0.setmongoAdminPassword("bulk_size");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder0.getmongoClientOptions();
        boolean boolean16 = builder0.getmongoGridFS();
        builder0.mongoLocalPassword = "skip_initial_import";
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition1.getInitialTimestamp();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(wildcardTimestamp7);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder0.setmongoClientOptions(mongoClientOptions8);
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder0.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.advancedTransformation(false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        builder5.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.includeCollection("localhost");
        builder13.setimportAllCollections(true);
        builder13.setindexName(".scripts");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str49 = builder5.typeName;
        java.lang.String[] strArray60 = new java.lang.String[] { "advanced_transformation", "include_collection", "bulk_timeout", "index", "ssl", "", "disable_index_refresh", "index", "user", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.isMongos((java.lang.Boolean) false);
        builder63.setsocketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.getsocketTimeout();
        java.lang.String str3 = builder0.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean5 = builder4.getimportAllCollections();
        java.lang.String str6 = builder4.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder4.getmongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers(serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder10.parentTypes = strSet24;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder10.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        int int31 = builder29.getsocketTimeout();
        java.lang.String str32 = builder29.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        builder29.excludeFields = strSet47;
        builder10.parentTypes = strSet47;
        builder9.parentTypes = strSet47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder9.scriptType("actions");
        java.lang.String str55 = builder54.riverName;
        java.lang.String str56 = builder54.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject57 = builder54.mongoOplogFilter;
        int int58 = builder54.getconnectTimeout();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(basicDBObject57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str20 = builder0.getindexName();
        com.mongodb.BasicDBObject basicDBObject21 = builder0.getmongoOplogFilter();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder23.parentTypes = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder23.script("port");
        builder41.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings44 = null;
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        builder46.setskipInitialImport(true);
        builder46.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder46.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject54 = builder46.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings44, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        builder41.setmongoCollectionFilter(basicDBObject54);
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        builder0.setmongoCollectionFilter(basicDBObject54);
        builder0.riverName = "name";
        builder0.setindexName("admin");
        java.lang.String str64 = builder0.indexName;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(basicDBObject21);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "admin" + "'", str64, "admin");
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition21.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition21.getMongoLocalUser();
        java.lang.String str24 = mongoDBRiverDefinition21.getDEFAULT_DB_HOST();
        int int25 = mongoDBRiverDefinition21.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean26 = mongoDBRiverDefinition21.isSkipInitialImport();
        java.lang.String str27 = mongoDBRiverDefinition21.getCREDENTIALS_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition21.getLOCAL_DB_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition21.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "localhost" + "'", str24, "localhost");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "credentials" + "'", str27, "credentials");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "local" + "'", str28, "local");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "secondary_read_preference" + "'", str29, "secondary_read_preference");
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("store_statistics");
        builder0.setscriptType("collection");
        java.lang.String str14 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoCollection("filter");
        org.bson.types.Binary binary19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.initialTimestamp(binary19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        int int5 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str6 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        int int7 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str8 = mongoDBRiverDefinition1.getCONNECT_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.Boolean boolean10 = mongoDBRiverDefinition1.isMongos();
        boolean boolean11 = mongoDBRiverDefinition1.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str13 = mongoDBRiverDefinition1.getScriptType();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "admin" + "'", str4, "admin");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.socketTimeout(10);
        java.lang.String str6 = builder0.indexName;
        builder0.riverName = "filter";
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = builder0.build();
        boolean boolean11 = mongoDBRiverDefinition10.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder10.initialTimestamp;
        builder10.mongoDb = "user";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean16 = mongoDBRiverDefinition15.disableIndexRefresh;
        java.lang.String str17 = mongoDBRiverDefinition15.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean18 = mongoDBRiverDefinition15.getdropCollection();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_bulk_requests" + "'", str17, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.mongoCollection;
        java.lang.String str5 = mongoDBRiverDefinition2.typeName;
        java.lang.String str6 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = builder50.getmongoDb();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        java.util.Set<java.lang.String> strSet19 = builder18.getexcludeFields();
        int int20 = builder18.getconnectTimeout();
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder25.parentTypes = strSet39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder25.script("port");
        builder43.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings46 = null;
        org.elasticsearch.common.settings.Settings settings47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        builder48.setskipInitialImport(true);
        builder48.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder48.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject56 = builder48.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings47, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings46, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder43.setmongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings62 = new org.elasticsearch.river.RiverSettings(settings22, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings63 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        builder18.mongoOplogFilter = basicDBObject56;
        java.lang.String str65 = builder18.getriverName();
        builder18.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str24 = builder20.mongoDb;
        builder20.typeName = "script";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder20.initialTimestamp;
        builder20.setskipInitialImport(true);
        builder20.advancedTransformation = false;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(wildcardTimestamp27);
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.script;
        java.lang.String str9 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.mongoGridFS;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "import_all_collections" + "'", str9, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str6 = mongoDBRiverDefinition2.mongoCollection;
        boolean boolean7 = mongoDBRiverDefinition2.getstoreStatistics();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.riverIndexName("");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        java.lang.String str14 = builder12.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        builder29.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.mongoSecondaryReadPreference(false);
        builder33.setstoreStatistics(true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        boolean boolean5 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str6 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean9 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition1.riverName;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition1.parentTypes;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gridfs" + "'", str6, "gridfs");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "socket_timeout" + "'", str7, "socket_timeout");
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getSIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "parent_types" + "'", str7, "parent_types");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gridfs" + "'", str11, "gridfs");
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str14 = builder7.getscriptType();
        builder7.mongoGridFS = false;
        java.lang.String str17 = builder7.getmongoAdminUser();
        java.util.Set<java.lang.String> strSet18 = null;
        builder7.setparentTypes(strSet18);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        builder5.throttleSize = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoLocalPassword("servers");
        builder13.setstoreStatistics(true);
        java.lang.String str16 = builder13.getmongoLocalPassword();
        builder13.setmongoLocalUser("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder13.includeCollection("advanced_transformation");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "servers" + "'", str16, "servers");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "collection" + "'", str3, "collection");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "servers" + "'", str4, "servers");
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        java.lang.String str23 = builder20.mongoLocalUser;
        java.lang.String str24 = builder20.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.storeStatistics(false);
        boolean boolean8 = builder0.dropCollection;
        builder0.setstatisticsTypeName("script.disable_dynamic");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.Class<?> wildcardClass12 = builder0.getClass();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isImportAllCollections();
        org.elasticsearch.common.logging.ESLogger eSLogger5 = mongoDBRiverDefinition1.getlogger();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.getMongoServers();
        java.lang.String str7 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        boolean boolean9 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition1.statisticsIndexName;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl" + "'", str3, "ssl");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(eSLogger5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        builder0.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        builder11.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoDb("hi!");
        builder16.isMongos = true;
        java.lang.String str19 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder22.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder22.script("port");
        builder40.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings43 = null;
        org.elasticsearch.common.settings.Settings settings44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        builder45.setskipInitialImport(true);
        builder45.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder45.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject53 = builder45.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings44, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings43, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        builder40.setmongoCollectionFilter(basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder16.mongoCollectionFilter(basicDBObject53);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        builder0.mongoOplogFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str61 = mongoDBRiverDefinition60.getFILTER_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions62 = mongoDBRiverDefinition60.mongoClientOptions;
        java.lang.String str63 = mongoDBRiverDefinition60.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "filter" + "'", str61, "filter");
        org.junit.Assert.assertNull(mongoClientOptions62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "is_mongos" + "'", str63, "is_mongos");
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        boolean boolean4 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoLocalUser("include_fields");
        java.lang.String str7 = builder0.mongoLocalPassword;
        builder0.script = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsIndexName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoLocalUser("concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = builder8.getindexName();
        boolean boolean11 = builder8.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder14.parentTypes = strSet28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder33.parentTypes = strSet47;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet47);
        builder13.includeFields = strSet47;
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder5.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder5.statisticsTypeName("type");
        boolean boolean57 = builder56.getstoreStatistics();
        java.lang.String str58 = builder56.gettypeName();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setskipInitialImport(true);
        builder5.scriptType = "admin";
        builder5.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.isMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject15 = builder5.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ScriptService scriptService19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("flush_interval", "script_type", riverSettings18, scriptService19);
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition20.getParentTypes();
        java.lang.String str22 = mongoDBRiverDefinition20.getLOCAL_DB_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition20.getACTIONS_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition20.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "local" + "'", str22, "local");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "actions" + "'", str23, "actions");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script_type" + "'", str24, "script_type");
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str10 = mongoDBRiverDefinition9.getFILTER_FIELD();
        boolean boolean11 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str12 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript2 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript2.setNextScore((float) 1000);
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) 1000);
        java.lang.Object obj9 = null;
        docScoreSearchScript0.setNextVar("drop_collection", obj9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        java.lang.Object obj32 = docScoreSearchScript0.unwrap((java.lang.Object) builder29);
        docScoreSearchScript0.setNextScore((float) 100L);
        org.apache.lucene.search.Scorer scorer35 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.typeName("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(false);
        java.lang.String str11 = builder10.script;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminPassword("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        builder16.setskipInitialImport(true);
        builder16.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder24.parentTypes = strSet38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet38);
        builder13.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        builder5.setadvancedTransformation(true);
        java.lang.String str49 = builder5.mongoDb;
        java.lang.String str50 = builder5.statisticsIndexName;
        builder5.setmongoGridFS(false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.scriptType("port");
        boolean boolean23 = builder18.skipInitialImport;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.typeName = "hi!";
        builder5.setmongoAdminUser(".scripts");
        builder5.statisticsIndexName = "db";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition4.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition4.getINITIAL_TIMESTAMP_FIELD();
        int int7 = mongoDBRiverDefinition4.getSocketTimeout();
        java.lang.String str8 = mongoDBRiverDefinition4.getTHROTTLE_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition4.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition4.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.throttleSize((int) (byte) 10);
        boolean boolean6 = builder5.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        int int8 = mongoDBRiverDefinition7.throttleSize;
        java.lang.String str9 = mongoDBRiverDefinition7.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        java.lang.String str8 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.storeStatistics;
        java.lang.String str11 = mongoDBRiverDefinition2.getScript();
        java.lang.Boolean boolean12 = mongoDBRiverDefinition2.isMongos();
        java.lang.String str13 = mongoDBRiverDefinition2.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        int int6 = mongoDBRiverDefinition2.throttleSize;
        java.lang.String str7 = mongoDBRiverDefinition2.script;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition2.getExcludeFields();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.indexName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("password");
        boolean boolean10 = builder5.getdropCollection();
        builder5.setmongoLocalUser("import_all_collections");
        java.lang.String str13 = builder5.getscript();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        builder7.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str14 = mongoDBRiverDefinition13.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition13.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition13.getStatisticsTypeName();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "import_all_collections" + "'", str14, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 60000 + "'", int3 == 60000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index" + "'", str4, "index");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.indexName("index");
        boolean boolean23 = builder22.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.advancedTransformation(true);
        java.lang.String str26 = builder25.getscript();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str6 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition2.parentTypes;
        java.lang.String str8 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "advanced_transformation" + "'", str6, "advanced_transformation");
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_fields" + "'", str8, "include_fields");
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet13 = builder12.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder14.parentTypes = strSet28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder14.script("port");
        builder32.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.lang.String str37 = builder35.getindexName();
        boolean boolean38 = builder35.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder41.parentTypes = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder41.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        builder60.parentTypes = strSet74;
        builder59.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        builder40.includeFields = strSet74;
        builder32.excludeFields = strSet74;
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        builder12.setstatisticsIndexName("secondary_read_preference");
        boolean boolean83 = builder12.getadvancedTransformation();
        java.lang.String str84 = builder12.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean9 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        java.lang.String str10 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getSIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "drop_collection" + "'", str10, "drop_collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "password" + "'", str12, "password");
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.includeCollection("hi!");
        boolean boolean14 = builder10.getimportAllCollections();
        builder10.setskipInitialImport(true);
        builder10.skipInitialImport = false;
        java.lang.String str19 = builder10.scriptType;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str6 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "drop_collection" + "'", str7, "drop_collection");
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean3 = mongoDBRiverDefinition1.isStoreStatistics();
        boolean boolean4 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoLocalPassword();
        boolean boolean7 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str10 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_fields" + "'", str10, "include_fields");
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        java.lang.Object obj4 = null;
        docScoreSearchScript0.setNextVar("concurrent_requests", obj4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.Object obj8 = docScoreSearchScript0.unwrap((java.lang.Object) builder6);
        org.elasticsearch.common.logging.ESLogger eSLogger10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.logger;
        docScoreSearchScript0.setNextVar("collection", (java.lang.Object) eSLogger10);
        docScoreSearchScript0.setNextScore((float) 10);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(eSLogger10);
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "options" + "'", str8, "options");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        java.lang.String str21 = builder18.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoLocalPassword("admin");
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.mongoClientOptions(mongoClientOptions24);
        boolean boolean26 = builder25.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.throttleSize(0);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str11 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "password" + "'", str11, "password");
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        builder0.script = "user";
        java.util.Set<java.lang.String> strSet11 = builder0.getincludeFields();
        java.lang.String str12 = builder0.getmongoAdminUser();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.Boolean boolean7 = mongoDBRiverDefinition2.getisMongos();
        java.lang.String str8 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.parentTypes;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = mongoDBRiverDefinition2.initialTimestamp;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        int int4 = mongoDBRiverDefinition1.getSocketTimeout();
        java.lang.String str5 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.typeName;
        java.lang.String str8 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str13 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        boolean boolean14 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "throttle_size" + "'", str5, "throttle_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setriverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getHOST_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getSERVERS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "host" + "'", str5, "host");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "servers" + "'", str6, "servers");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("hi!.null");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?hi!.null?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getindexName();
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.typeName;
        builder0.socketTimeout = 0;
        boolean boolean7 = builder0.getmongoSSLVerifyCertificate();
        builder0.setmongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getBULK_SIZE_FIELD();
        boolean boolean12 = mongoDBRiverDefinition10.skipInitialImport;
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition10.getExcludeFields();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk_size" + "'", str11, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        boolean boolean11 = builder10.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder12.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet26);
        java.util.Set<java.lang.String> strSet30 = builder29.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.statisticsIndexName("bulk_timeout");
        boolean boolean33 = builder29.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        int int10 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str12 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "options" + "'", str8, "options");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getExcludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverName();
        java.lang.Boolean boolean6 = mongoDBRiverDefinition1.isMongos;
        boolean boolean7 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str8 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "servers" + "'", str2, "servers");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gridfs" + "'", str3, "gridfs");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        boolean boolean9 = mongoDBRiverDefinition2.isDropCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.excludeFields;
        int int7 = mongoDBRiverDefinition2.getThrottleSize();
        java.lang.String str8 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getIndexName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 1000);
        java.lang.Object obj4 = null;
        docScoreSearchScript0.setNextVar("concurrent_requests", obj4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.Object obj8 = docScoreSearchScript0.unwrap((java.lang.Object) builder6);
        org.elasticsearch.common.logging.ESLogger eSLogger10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.logger;
        docScoreSearchScript0.setNextVar("collection", (java.lang.Object) eSLogger10);
        docScoreSearchScript0.setNextScore((float) 10);
        docScoreSearchScript0.setNextScore((float) 10L);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(eSLogger10);
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoLocalUser("admin");
        builder0.importAllCollections = false;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        java.lang.String str12 = builder10.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoSecondaryReadPreference(true);
        builder14.indexName = "sandbox";
        boolean boolean17 = builder14.storeStatistics;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getTypeName();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.mongoOplogFilter;
        java.lang.String str7 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.lang.String str8 = mongoDBRiverDefinition2.riverIndexName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition21.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition21.getMongoLocalUser();
        java.lang.String str24 = mongoDBRiverDefinition21.getDEFAULT_DB_HOST();
        int int25 = mongoDBRiverDefinition21.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean26 = mongoDBRiverDefinition21.isStoreStatistics();
        com.mongodb.BasicDBObject basicDBObject27 = mongoDBRiverDefinition21.getMongoOplogFilter();
        boolean boolean28 = mongoDBRiverDefinition21.getskipInitialImport();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "localhost" + "'", str24, "localhost");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(basicDBObject27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = builder0.getindexName();
        java.lang.Boolean boolean5 = builder0.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.importAllCollections(true);
        org.bson.types.Binary binary10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.initialTimestamp(binary10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.setscriptType("collection");
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("");
        builder13.setmongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoSecondaryReadPreference(false);
        java.lang.String str15 = builder14.getriverIndexName();
        builder14.dropCollection = true;
        builder14.setthrottleSize((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getRiverName();
        int int7 = mongoDBRiverDefinition2.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition2.getRiverIndexName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.skipInitialImport(false);
        builder4.setsocketTimeout(1);
        boolean boolean7 = builder4.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean11 = builder10.getimportAllCollections();
        java.lang.String str12 = builder10.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        builder13.parentTypes = strSet27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder13.script("port");
        builder31.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.lang.String str36 = builder34.getindexName();
        boolean boolean37 = builder34.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.socketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder40.parentTypes = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder40.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        builder59.parentTypes = strSet73;
        builder58.setexcludeFields((java.util.Set<java.lang.String>) strSet73);
        builder39.includeFields = strSet73;
        builder31.excludeFields = strSet73;
        builder10.includeFields = strSet73;
        builder9.excludeFields = strSet73;
        java.lang.String str81 = builder9.gettypeName();
        java.util.Set<java.lang.String> strSet82 = builder9.getexcludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str11 = builder10.gettypeName();
        builder10.statisticsTypeName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder14.setriverIndexName("admin");
        builder14.importAllCollections = true;
        com.mongodb.BasicDBObject basicDBObject19 = builder14.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.skipInitialImport(false);
        java.lang.String str28 = builder27.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.importAllCollections(true);
        builder27.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        builder33.setskipInitialImport(true);
        builder33.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder41.parentTypes = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder40.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder58.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        builder61.setskipInitialImport(true);
        builder61.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder61.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        builder69.parentTypes = strSet83;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder68.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder58.excludeFields((java.util.Set<java.lang.String>) strSet83);
        java.util.Set<java.lang.String> strSet88 = builder58.excludeFields;
        builder27.excludeFields = strSet88;
        builder14.parentTypes = strSet88;
        builder10.excludeFields = strSet88;
        builder10.riverName = "user";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(strSet88);
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        builder0.setmongoCollection("gridfs");
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getmongoAdminUser();
        boolean boolean8 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.storeStatistics(false);
        builder10.setimportAllCollections(true);
        builder10.setstatisticsIndexName("collection");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        int int19 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        builder20.scriptType = "admin";
        java.lang.String[] strArray28 = new java.lang.String[] { "", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet29);
        builder0.throttleSize = 60000;
        int int35 = builder0.socketTimeout;
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        builder0.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverIndexName("skip_initial_import");
        boolean boolean12 = builder11.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str14 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition13.typeName;
        java.lang.String str16 = mongoDBRiverDefinition13.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "collection" + "'", str14, "collection");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.indexName("password");
        builder20.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        com.mongodb.BasicDBObject basicDBObject28 = builder25.mongoCollectionFilter;
        builder24.mongoCollectionFilter = basicDBObject28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        int int31 = builder24.socketTimeout;
        boolean boolean32 = builder24.getmongoGridFS();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str3 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.riverName;
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        int int7 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bulk_size" + "'", str3, "bulk_size");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bulk" + "'", str4, "bulk");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.disableIndexRefresh(true);
        builder9.setindexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.connectTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject14 = builder9.getmongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(basicDBObject15);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.script("port");
        builder18.setindexName("flush_interval");
        java.lang.Boolean boolean21 = builder18.isMongos;
        builder18.setindexName("password");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        java.lang.String str8 = builder5.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder11.parentTypes = strSet25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder11.script("port");
        builder29.setriverName("disable_index_refresh");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setskipInitialImport(true);
        builder34.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder29.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder5.mongoCollectionFilter(basicDBObject42);
        int int47 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str49 = builder5.typeName;
        java.lang.String[] strArray60 = new java.lang.String[] { "advanced_transformation", "include_collection", "bulk_timeout", "index", "ssl", "", "disable_index_refresh", "index", "user", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.isMongos((java.lang.Boolean) false);
        boolean boolean66 = builder63.advancedTransformation;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.getmongoServers();
        boolean boolean4 = builder0.getmongoGridFS();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSecondaryReadPreference(true);
        java.lang.String str9 = builder0.script;
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.setskipInitialImport(true);
        builder12.scriptType = "admin";
        builder12.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder12.isMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject22 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        builder0.setmongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.disableIndexRefresh(true);
        java.lang.String str28 = builder0.includeCollection;
        builder0.throttleSize = (byte) 100;
        builder0.setriverName("admin");
        builder0.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean7 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.includeCollection("hi!");
        java.lang.String str10 = builder0.getmongoCollection();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.dropCollection(false);
        java.lang.String str26 = builder25.getstatisticsTypeName();
        boolean boolean27 = builder25.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.includeCollection("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.isMongos((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str8 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str9 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_requests" + "'", str5, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index" + "'", str8, "index");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        java.lang.String str3 = builder0.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder0.mongoServers;
        java.lang.String str5 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        boolean boolean7 = mongoDBRiverDefinition2.isDropCollection();
        java.lang.String str8 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        java.lang.String str10 = builder0.mongoAdminUser;
        builder0.mongoGridFS = false;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.lang.String str2 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = true;
        builder0.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverName("");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        java.util.Set<java.lang.String> strSet14 = builder13.getincludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("store_statistics");
        int int12 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder0.build();
        builder0.setdropCollection(false);
        org.bson.types.Binary binary16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.initialTimestamp(binary16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        int int3 = mongoDBRiverDefinition1.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean4 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.mongoOplogFilter;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.getIS_MONGOS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ssl" + "'", str2, "ssl");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30000 + "'", int3 == 30000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "is_mongos" + "'", str8, "is_mongos");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet5 = builder0.getparentTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strSet5);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(false);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder7.mongoClientOptions = mongoClientOptions11;
        java.util.Set<java.lang.String> strSet13 = builder7.getincludeFields();
        java.lang.String str14 = builder7.getriverName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder7.initialTimestamp;
        java.util.Set<java.lang.String> strSet16 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder7.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        java.lang.String str3 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.getdropCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str7 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNotNull(byteSizeValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "initial_timestamp" + "'", str3, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "initial_timestamp" + "'", str5, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoDb("hi!");
        builder5.isMongos = true;
        builder5.indexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        builder10.setskipInitialImport(true);
        builder10.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder5.mongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder19.mongoGridFS;
        builder19.setscriptType("hi!.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.statisticsTypeName("concurrent_bulk_requests");
        builder24.setscript("is_mongos");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoLocalUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setskipInitialImport(true);
        builder6.scriptType = "admin";
        builder6.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder6.isMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject16 = builder6.getmongoCollectionFilter();
        builder5.setmongoCollectionFilter(basicDBObject16);
        builder5.mongoLocalPassword = "ssl_verify_certificate";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoDb("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder20.advancedTransformation(false);
        builder20.setmongoUseSSL(true);
        builder20.statisticsTypeName = "drop_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str35 = builder32.getmongoLocalUser();
        builder32.riverName = "store_statistics";
        java.util.List<com.mongodb.ServerAddress> serverAddressList38 = builder32.mongoServers;
        builder20.mongoServers = serverAddressList38;
        builder5.mongoServers = serverAddressList38;
        builder5.setstoreStatistics(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(serverAddressList38);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.isDropCollection();
        boolean boolean5 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        java.lang.String str6 = mongoDBRiverDefinition3.getBULK_SIZE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition3.isSkipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition3.getSTORE_STATISTICS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition3.statisticsIndexName;
        java.lang.String str10 = mongoDBRiverDefinition3.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_size" + "'", str6, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "", "exclude_fields", "socket_timeout", "script.default_lang", "gridfs", "hi!", "servers", "", "", "servers" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder0.parentTypes = strSet14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        builder20.setisMongos((java.lang.Boolean) true);
        builder20.setmongoDb("actions");
        java.lang.String str26 = builder20.getmongoCollection();
        builder20.setstatisticsIndexName("hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str26);
    }
}

