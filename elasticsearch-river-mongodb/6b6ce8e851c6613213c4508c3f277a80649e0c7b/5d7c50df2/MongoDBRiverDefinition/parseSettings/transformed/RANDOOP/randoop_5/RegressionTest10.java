import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str45 = mongoDBRiverDefinition39.riverName;
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos();
        boolean boolean47 = mongoDBRiverDefinition39.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "null.null" + "'", str44, "null.null");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        builder0.mongoUseSSL = false;
        boolean boolean12 = builder0.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str48 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.statisticsIndexName;
        int int50 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "flush_interval" + "'", str48, "flush_interval");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalUser("parent_types");
        builder0.mongoLocalUser = "bulk_timeout";
        com.mongodb.BasicDBObject basicDBObject13 = builder0.getmongoOplogFilter();
        builder0.isMongos = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str47 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "gridfs" + "'", str47, "gridfs");
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        int int14 = builder13.getthrottleSize();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = null;
        builder13.mongoServers = serverAddressList15;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        boolean boolean18 = builder13.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str49 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        java.lang.String str51 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.String str52 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "size" + "'", str49, "size");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "connect_timeout" + "'", str50, "connect_timeout");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "admin" + "'", str52, "admin");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "name" + "'", str53, "name");
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.riverName("admin");
        com.mongodb.BasicDBObject basicDBObject67 = builder58.getmongoCollectionFilter();
        builder58.setscriptType("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.lang.String str9 = builder0.includeCollection;
        builder0.indexName = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSIZE_FIELD();
        boolean boolean53 = mongoDBRiverDefinition51.disableIndexRefresh;
        boolean boolean54 = mongoDBRiverDefinition51.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject55 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.mongoCollectionFilter(basicDBObject55);
        boolean boolean57 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = builder0.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "size" + "'", str52, "size");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.riverIndexName;
        java.lang.String str10 = mongoDBRiverDefinition8.mongoLocalUser;
        boolean boolean11 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str12 = mongoDBRiverDefinition8.getDB_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getRiverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "db" + "'", str12, "db");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder7.mongoAdminUser;
        java.lang.String[] strArray37 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str44 = mongoDBRiverDefinition43.getSIZE_FIELD();
        boolean boolean45 = mongoDBRiverDefinition43.disableIndexRefresh;
        java.lang.String str46 = mongoDBRiverDefinition43.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition43.statisticsTypeName;
        boolean boolean48 = mongoDBRiverDefinition43.isAdvancedTransformation();
        java.lang.String str49 = mongoDBRiverDefinition43.script;
        boolean boolean50 = mongoDBRiverDefinition43.getdisableIndexRefresh();
        java.lang.String str51 = mongoDBRiverDefinition43.getSERVERS_FIELD();
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) mongoDBRiverDefinition43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.indexName("credentials");
        java.lang.String str58 = builder57.mongoAdminUser;
        java.lang.String[] strArray87 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet88 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder57.parentTypes((java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder90.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition93 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder92);
        java.lang.String str94 = mongoDBRiverDefinition93.getSIZE_FIELD();
        java.lang.String str95 = mongoDBRiverDefinition93.getTHROTTLE_SIZE_FIELD();
        java.lang.String str96 = mongoDBRiverDefinition93.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet97 = mongoDBRiverDefinition93.getIncludeFields();
        java.lang.String str98 = mongoDBRiverDefinition93.getDEFAULT_DB_HOST();
        docScoreSearchScript0.setNextVar("", (java.lang.Object) str98);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "size" + "'", str44, "size");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "servers" + "'", str51, "servers");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "size" + "'", str94, "size");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "throttle_size" + "'", str95, "throttle_size");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "concurrent_bulk_requests" + "'", str96, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "localhost" + "'", str98, "localhost");
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.throttleSize = (byte) 10;
        boolean boolean19 = builder8.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.scriptType("index");
        builder26.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder32.mongoAdminUser;
        java.lang.String[] strArray62 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        boolean boolean69 = mongoDBRiverDefinition68.getdropCollection();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition68.getParentTypes();
        builder26.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder8.excludeFields(strSet70);
        java.lang.String str73 = builder72.getmongoDb();
        builder72.setindexName("initial_timestamp");
        boolean boolean76 = builder72.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str46 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "secondary_read_preference" + "'", str46, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.disableIndexRefresh(false);
        com.mongodb.BasicDBObject basicDBObject5 = builder0.getmongoCollectionFilter();
        boolean boolean6 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.riverIndexName("throttle_size");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        boolean boolean43 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        java.lang.String str6 = builder0.mongoCollection;
        boolean boolean7 = builder0.getdisableIndexRefresh();
        builder0.setscriptType("store_statistics");
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.mongoLocalPassword;
        builder0.disableIndexRefresh = true;
        boolean boolean5 = builder0.getadvancedTransformation();
        builder0.setstatisticsIndexName("collection");
        builder0.dropCollection = false;
        java.util.Set<java.lang.String> strSet10 = builder0.getincludeFields();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str43 = mongoDBRiverDefinition39.indexName;
        java.lang.String str44 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverIndexName();
        int int46 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "credentials" + "'", str43, "credentials");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "servers" + "'", str44, "servers");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 30000 + "'", int46 == 30000);
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.statisticsIndexName = "collection";
        java.lang.String str5 = builder0.mongoAdminUser;
        java.lang.String str6 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.util.Set<java.lang.String> strSet47 = builder45.getincludeFields();
        int int48 = builder45.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int50 = builder49.getsocketTimeout();
        boolean boolean51 = builder49.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.indexName("credentials");
        java.lang.String str56 = builder55.mongoAdminUser;
        java.lang.String[] strArray85 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder55.parentTypes((java.util.Set<java.lang.String>) strSet86);
        builder49.excludeFields = strSet86;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder45.parentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet86);
        java.lang.String str92 = builder91.getstatisticsIndexName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "collection" + "'", str92, "collection");
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.script = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(false);
        boolean boolean13 = builder12.getmongoUseSSL();
        builder12.setmongoLocalPassword("socket_timeout");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        java.util.Set<java.lang.String> strSet55 = builder0.getexcludeFields();
        java.lang.String str56 = builder0.riverIndexName;
        int int57 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoGridFS(false);
        builder61.disableIndexRefresh = false;
        builder61.setindexName("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        builder0.typeName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.socketTimeout((int) (short) 10);
        java.lang.String str14 = builder0.mongoDb;
        builder0.mongoLocalUser = "import_all_collections";
        builder0.includeCollection = "db";
        builder0.mongoCollection = "concurrent_bulk_requests";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setisMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.statisticsIndexName("admin");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean48 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str49 = mongoDBRiverDefinition39.getTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        builder0.setsocketTimeout(60000);
        builder0.dropCollection = false;
        builder0.importAllCollections = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        int int14 = builder13.getthrottleSize();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = null;
        builder13.mongoServers = serverAddressList15;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoDb("script_type");
        builder13.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder13.mongoSSLVerifyCertificate(false);
        builder13.disableIndexRefresh = false;
        builder13.setstatisticsTypeName("script");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        builder3.setdisableIndexRefresh(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str50 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "parent_types" + "'", str48, "parent_types");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "socket_timeout" + "'", str49, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "include_fields" + "'", str50, "include_fields");
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet10 = builder3.parentTypes;
        boolean boolean11 = builder3.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoCollection("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.statisticsIndexName("admin");
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder17.getmongoServers();
        builder17.setriverIndexName("parent_types");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(serverAddressList20);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getSIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str51 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str52 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str53 = mongoDBRiverDefinition39.getUSER_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "credentials" + "'", str52, "credentials");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "user" + "'", str53, "user");
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str48 = mongoDBRiverDefinition39.mongoDb;
        int int49 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        java.lang.String str8 = builder0.getincludeCollection();
        builder0.mongoAdminUser = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        boolean boolean52 = mongoDBRiverDefinition50.disableIndexRefresh;
        java.lang.String str53 = mongoDBRiverDefinition50.getACTIONS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition50.getMongoOplogNamespace();
        java.lang.String str55 = mongoDBRiverDefinition50.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition50.getScript();
        java.lang.String str57 = mongoDBRiverDefinition50.getDB_FIELD();
        boolean boolean58 = mongoDBRiverDefinition50.isMongoUseSSL();
        java.lang.String str59 = mongoDBRiverDefinition50.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean60 = mongoDBRiverDefinition50.isMongos();
        boolean boolean61 = mongoDBRiverDefinition50.importAllCollections;
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition50.parentTypes;
        builder0.excludeFields = strSet62;
        builder0.mongoLocalPassword = "drop_collection";
        java.util.List<com.mongodb.ServerAddress> serverAddressList66 = builder0.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "actions" + "'", str53, "actions");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "null.null" + "'", str54, "null.null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "import_all_collections" + "'", str55, "import_all_collections");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "db" + "'", str57, "db");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "script" + "'", str59, "script");
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(serverAddressList66);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("local");
        java.lang.String str12 = builder11.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.advancedTransformation(true);
        builder0.setriverName("script.default_lang");
        com.mongodb.BasicDBObject basicDBObject14 = builder0.getmongoCollectionFilter();
        builder0.advancedTransformation = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject41 = builder38.mongoCollectionFilter;
        builder38.throttleSize = 1;
        boolean boolean44 = builder38.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject45 = builder38.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder38.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder38.statisticsTypeName("localhost");
        builder38.includeCollection = "drop_collection";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        java.lang.String str12 = builder0.getstatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject13 = builder0.getmongoOplogFilter();
        builder0.setstatisticsTypeName("collection");
        builder0.settypeName("null.collection");
        java.lang.String str18 = builder0.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.getMongoClientOptions();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoUseSSL();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder8.mongoAdminUser;
        java.lang.String[] strArray38 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.lang.String str45 = mongoDBRiverDefinition44.getSIZE_FIELD();
        boolean boolean46 = mongoDBRiverDefinition44.disableIndexRefresh;
        boolean boolean47 = mongoDBRiverDefinition44.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition44.getMongoCollectionFilter();
        java.lang.String str49 = mongoDBRiverDefinition44.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition44.getScriptType();
        java.lang.Object obj51 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition44);
        java.lang.String str52 = mongoDBRiverDefinition44.getMongoCollection();
        boolean boolean53 = mongoDBRiverDefinition44.getstoreStatistics();
        java.lang.String str54 = mongoDBRiverDefinition44.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition44.mongoLocalPassword;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "advanced_transformation" + "'", str54, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "initial_timestamp" + "'", str55, "initial_timestamp");
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.indexName = "script.disable_dynamic";
        java.lang.String str26 = builder23.getmongoLocalUser();
        java.lang.String str27 = builder23.getmongoAdminUser();
        builder23.setadvancedTransformation(false);
        com.mongodb.BasicDBObject basicDBObject30 = builder23.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(basicDBObject30);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        int int44 = mongoDBRiverDefinition39.connectTimeout;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        boolean boolean46 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean47 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean18 = mongoDBRiverDefinition17.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition17.includeFields;
        java.lang.String str20 = mongoDBRiverDefinition17.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "throttle_size" + "'", str20, "throttle_size");
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.mongoGridFS(false);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder3.getmongoClientOptions();
        builder3.setmongoAdminUser("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder3.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.riverIndexName("drop_collection");
        java.lang.String str66 = builder65.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "drop_collection" + "'", str66, "drop_collection");
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoSecondaryReadPreference(false);
        java.lang.String str14 = builder13.riverName;
        boolean boolean15 = builder13.mongoUseSSL;
        java.lang.String str16 = builder13.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.getmongoAdminPassword();
        int int3 = builder0.socketTimeout;
        boolean boolean4 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str11 = builder5.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoSSLVerifyCertificate(false);
        builder13.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.throttleSize(10);
        builder13.setmongoAdminUser("local");
        builder13.mongoCollection = "db";
        builder13.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.mongoLocalPassword;
        java.lang.String str26 = builder24.mongoLocalPassword;
        builder24.disableIndexRefresh = true;
        boolean boolean29 = builder24.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        java.lang.String str70 = mongoDBRiverDefinition69.getSIZE_FIELD();
        java.lang.String str71 = mongoDBRiverDefinition69.getTHROTTLE_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition69.getParentTypes();
        builder24.setparentTypes(strSet72);
        builder13.setparentTypes(strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder0.excludeFields(strSet72);
        java.util.Set<java.lang.String> strSet76 = null;
        builder75.setparentTypes(strSet76);
        java.util.Set<java.lang.String> strSet78 = builder75.getparentTypes();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "size" + "'", str70, "size");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "throttle_size" + "'", str71, "throttle_size");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(strSet78);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.mongoLocalPassword("name");
        java.util.Set<java.lang.String> strSet45 = builder44.parentTypes;
        boolean boolean46 = builder44.getadvancedTransformation();
        java.lang.Class<?> wildcardClass47 = builder44.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str46 = mongoDBRiverDefinition39.getRiverName();
        boolean boolean47 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.String str39 = builder38.getriverName();
        java.lang.String str40 = builder38.getscript();
        java.lang.String str41 = builder38.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.statisticsTypeName;
        java.lang.String str19 = mongoDBRiverDefinition17.mongoAdminPassword;
        java.lang.String str20 = mongoDBRiverDefinition17.getLOCAL_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition17.getSCRIPT_TYPE_FIELD();
        boolean boolean22 = mongoDBRiverDefinition17.isMongoGridFS();
        java.lang.String str23 = mongoDBRiverDefinition17.getTYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "local" + "'", str20, "local");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script_type" + "'", str21, "script_type");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "type" + "'", str23, "type");
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        java.lang.String str13 = builder12.getriverName();
        boolean boolean14 = builder12.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoClientOptions(mongoClientOptions15);
        java.lang.String str17 = builder16.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        builder0.mongoCollection = "sandbox";
        java.lang.String str10 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("ssl");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.isImportAllCollections();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.statisticsTypeName = ".scripts";
        boolean boolean9 = builder6.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(false);
        java.lang.String str12 = builder6.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.dropCollection(false);
        java.lang.String str15 = builder14.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        boolean boolean50 = mongoDBRiverDefinition39.importAllCollections;
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str52 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str53 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str54 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "initial_timestamp" + "'", str54, "initial_timestamp");
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        boolean boolean55 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp56 = builder0.getinitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject57 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardTimestamp56);
        org.junit.Assert.assertNotNull(basicDBObject57);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        builder0.riverIndexName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.typeName("actions");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        java.lang.String str8 = builder5.getmongoAdminPassword();
        builder5.setconnectTimeout((int) (short) 0);
        boolean boolean11 = builder5.dropCollection;
        java.lang.String str12 = builder5.getmongoCollection();
        java.lang.Boolean boolean13 = builder5.getisMongos();
        builder5.setstoreStatistics(true);
        builder5.mongoAdminPassword = "name";
        builder5.riverName = "throttle_size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoDb();
        boolean boolean48 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        int int49 = mongoDBRiverDefinition39.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.storeStatistics = false;
        boolean boolean26 = builder23.getadvancedTransformation();
        builder23.setriverIndexName("script.disable_dynamic");
        int int29 = builder23.socketTimeout;
        builder23.setconnectTimeout(0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str47 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getFILTER_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str50 = mongoDBRiverDefinition39.getScriptType();
        int int51 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "import_all_collections" + "'", str47, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "filter" + "'", str48, "filter");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 27017 + "'", int51 == 27017);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        builder0.setmongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.indexName("script.default_lang");
        builder0.mongoLocalPassword = "bulk_timeout";
        builder0.mongoLocalPassword = "servers";
        builder0.settypeName("disable_index_refresh");
        boolean boolean12 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoSecondaryReadPreference(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoClientOptions(mongoClientOptions15);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.getmongoAdminPassword();
        int int3 = builder0.socketTimeout;
        java.lang.String str4 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.riverName("socket_timeout");
        builder0.setdropCollection(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoClientOptions(mongoClientOptions3);
        builder0.disableIndexRefresh = false;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = mongoDBRiverDefinition42.mongoSSLVerifyCertificate;
        java.lang.String str44 = mongoDBRiverDefinition42.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition42.getScriptType();
        java.lang.String str46 = mongoDBRiverDefinition42.getSCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition42.mongoCollectionFilter;
        boolean boolean48 = mongoDBRiverDefinition42.isImportAllCollections();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "initial_timestamp" + "'", str44, "initial_timestamp");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.Boolean boolean39 = builder38.isMongos;
        builder38.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.mongoAdminPassword(".scripts");
        builder38.dropCollection = true;
        boolean boolean46 = builder38.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.setmongoDb("is_mongos");
        builder0.scriptType = "filter";
        builder0.settypeName("exclude_fields");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        java.lang.String str9 = builder0.getstatisticsIndexName();
        java.lang.String str10 = builder0.getmongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder0.setmongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.storeStatistics(false);
        builder0.connectTimeout = '4';
        builder0.setdisableIndexRefresh(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getadvancedTransformation();
        builder7.mongoLocalUser = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoAdminUser("credentials");
        int int13 = builder12.getsocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean48 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition39.getMongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "initial_timestamp" + "'", str49, "initial_timestamp");
        org.junit.Assert.assertNotNull(serverAddressList50);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos;
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.mongoCollectionFilter;
        boolean boolean48 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str49 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "import_all_collections" + "'", str49, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "index" + "'", str50, "index");
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str44 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str45 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "localhost" + "'", str44, "localhost");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "throttle_size" + "'", str45, "throttle_size");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "admin" + "'", str46, "admin");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "admin" + "'", str47, "admin");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.getthrottleSize();
        builder7.setmongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder7.mongoAdminPassword("skip_initial_import");
        builder7.storeStatistics = true;
        boolean boolean65 = builder7.getdisableIndexRefresh();
        boolean boolean66 = builder7.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.connectTimeout((int) (byte) -1);
        java.lang.String str12 = builder9.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        int int15 = builder13.getthrottleSize();
        java.util.Set<java.lang.String> strSet16 = builder13.parentTypes;
        builder13.mongoLocalUser = "";
        boolean boolean19 = builder13.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = builder25.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder25.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.disableIndexRefresh(true);
        builder25.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder25.advancedTransformation(true);
        java.lang.String[] strArray70 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder35.parentTypes = strSet71;
        builder13.excludeFields = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet71);
        int int76 = builder75.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(serverAddressList27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.scriptType;
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoCollection("filter");
        java.lang.String str17 = builder0.getstatisticsIndexName();
        boolean boolean18 = builder0.dropCollection;
        int int19 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        builder23.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.typeName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder28.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.mongoAdminUser("gridfs");
        builder28.scriptType = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.indexName("credentials");
        java.lang.String str40 = builder39.mongoAdminUser;
        java.lang.String[] strArray69 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder39.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder74);
        boolean boolean76 = mongoDBRiverDefinition75.getdropCollection();
        java.util.Set<java.lang.String> strSet77 = mongoDBRiverDefinition75.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder28.parentTypes(strSet77);
        builder27.parentTypes = strSet77;
        builder0.setincludeFields(strSet77);
        builder0.setmongoSecondaryReadPreference(true);
        java.lang.String str83 = builder0.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.indexName;
        int int47 = mongoDBRiverDefinition39.getSocketTimeout();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        java.lang.String str50 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition47.mongoAdminPassword;
        boolean boolean53 = mongoDBRiverDefinition47.isAdvancedTransformation();
        java.lang.String str54 = mongoDBRiverDefinition47.getINDEX_OBJECT();
        boolean boolean55 = mongoDBRiverDefinition47.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp56 = mongoDBRiverDefinition47.getInitialTimestamp();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) wildcardTimestamp56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder59.isMongos((java.lang.Boolean) true);
        java.lang.String str65 = builder59.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder59.mongoSSLVerifyCertificate(false);
        java.lang.String str68 = builder67.mongoAdminPassword;
        boolean boolean69 = builder67.getstoreStatistics();
        int int70 = builder67.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder67.mongoLocalUser("socket_timeout");
        docScoreSearchScript0.setNextVar("script.default_lang", (java.lang.Object) builder72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str76 = builder75.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder75.indexName("credentials");
        java.lang.String str79 = builder75.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder75.scriptType("index");
        builder81.statisticsTypeName = ".scripts";
        builder81.dropCollection = true;
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder81);
        // The following exception was thrown during execution in test generation
        try {
            float float87 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "host" + "'", obj6, "host");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "actions" + "'", str50, "actions");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "actions" + "'", str51, "actions");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "index" + "'", str54, "index");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardTimestamp56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.elasticsearch.common.unit.TimeValue timeValue41 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str42 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str43 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "size" + "'", str43, "size");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "localhost" + "'", str44, "localhost");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.Boolean boolean48 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str49 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getNAME_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.isMongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "skip_initial_import" + "'", str49, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "name" + "'", str50, "name");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertNull(strSet46);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean51 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str52 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "skip_initial_import" + "'", str52, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "import_all_collections" + "'", str53, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "store_statistics" + "'", str54, "store_statistics");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "concurrent_requests" + "'", str55, "concurrent_requests");
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        builder6.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoGridFS(false);
        builder6.includeCollection = "admin";
        boolean boolean14 = builder6.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder6.socketTimeout((int) 'a');
        builder16.setimportAllCollections(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        builder56.setmongoCollection("bulk_size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str45 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str47 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str50 = mongoDBRiverDefinition39.getTypeName();
        boolean boolean51 = mongoDBRiverDefinition39.isImportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "store_statistics" + "'", str47, "store_statistics");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disable_index_refresh" + "'", str48, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        java.util.Set<java.lang.String> strSet7 = builder0.includeFields;
        java.lang.String str8 = builder0.includeCollection;
        java.lang.String str9 = builder0.mongoAdminPassword;
        java.lang.String str10 = builder0.riverName;
        builder0.riverName = "script.disable_dynamic";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str46 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str47 = mongoDBRiverDefinition39.indexName;
        java.lang.String str48 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str49 = mongoDBRiverDefinition39.getDB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "db" + "'", str49, "db");
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str50 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str51 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "is_mongos" + "'", str51, "is_mongos");
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        java.lang.String str8 = builder5.getmongoAdminPassword();
        builder5.setconnectTimeout((int) (short) 0);
        boolean boolean11 = builder5.dropCollection;
        java.lang.String str12 = builder5.getmongoCollection();
        java.lang.Boolean boolean13 = builder5.getisMongos();
        builder5.setstoreStatistics(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder5.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.riverIndexName;
        boolean boolean10 = mongoDBRiverDefinition8.isMongoSSLVerifyCertificate();
        java.lang.String str11 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "actions" + "'", str11, "actions");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        builder0.setdisableIndexRefresh(true);
        java.lang.String str59 = builder0.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str42 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoDb();
        boolean boolean44 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str45 = mongoDBRiverDefinition39.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition51.mongoCollectionFilter;
        boolean boolean54 = mongoDBRiverDefinition51.getstoreStatistics();
        java.lang.String str55 = mongoDBRiverDefinition51.getTypeName();
        java.lang.String str56 = mongoDBRiverDefinition51.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "include_collection" + "'", str56, "include_collection");
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        boolean boolean10 = builder0.getmongoUseSSL();
        builder0.typeName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.scriptType("index");
        builder19.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject22 = builder19.getmongoCollectionFilter();
        builder19.setdisableIndexRefresh(true);
        builder19.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder27.isMongos((java.lang.Boolean) true);
        java.lang.String str33 = builder27.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.mongoSSLVerifyCertificate(false);
        java.lang.String str36 = builder35.getmongoCollection();
        java.lang.String[] strArray51 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet52);
        builder0.excludeFields = strSet52;
        boolean boolean57 = builder0.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        java.lang.String str11 = builder7.statisticsIndexName;
        boolean boolean12 = builder7.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder13.setmongoOplogFilter(basicDBObject14);
        int int16 = builder13.socketTimeout;
        builder13.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder13.disableIndexRefresh(false);
        builder20.setmongoCollection("password");
        builder20.includeCollection = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder28.mongoAdminUser;
        java.lang.String[] strArray58 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str65 = mongoDBRiverDefinition64.getSIZE_FIELD();
        boolean boolean66 = mongoDBRiverDefinition64.disableIndexRefresh;
        java.lang.String str67 = mongoDBRiverDefinition64.getACTIONS_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition64.getMongoOplogNamespace();
        java.lang.Boolean boolean69 = mongoDBRiverDefinition64.isMongos();
        java.lang.String str70 = mongoDBRiverDefinition64.getMongoOplogNamespace();
        boolean boolean71 = mongoDBRiverDefinition64.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition64.getParentTypes();
        builder20.setincludeFields(strSet72);
        builder7.setparentTypes(strSet72);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "size" + "'", str65, "size");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "actions" + "'", str67, "actions");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "null.null" + "'", str68, "null.null");
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "null.null" + "'", str70, "null.null");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet72);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.riverName("bulk");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoDb("concurrent_requests");
        builder13.setscriptType("throttle_size");
        boolean boolean18 = builder13.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoClientOptions(mongoClientOptions8);
        builder9.socketTimeout = (short) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.importAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverIndexName();
        java.lang.String str48 = mongoDBRiverDefinition39.getTypeName();
        java.lang.String str49 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "drop_collection" + "'", str49, "drop_collection");
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        java.util.Set<java.lang.String> strSet43 = builder36.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.includeCollection("import_all_collections");
        builder36.mongoAdminPassword = "advanced_transformation";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        java.lang.String str9 = builder0.statisticsTypeName;
        java.lang.String str10 = builder0.getscriptType();
        java.lang.String str11 = builder0.getstatisticsTypeName();
        java.lang.String str12 = builder0.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("actions");
        builder0.dropCollection = true;
        java.lang.String str13 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("");
        builder15.setsocketTimeout((int) (short) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.mongoClientOptions;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean49 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str50 = mongoDBRiverDefinition39.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "name" + "'", str47, "name");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str46 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "throttle_size" + "'", str47, "throttle_size");
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder7.socketTimeout(8);
        java.util.Set<java.lang.String> strSet62 = builder61.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp63 = builder61.getinitialTimestamp();
        builder61.setmongoDb("local");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(wildcardTimestamp63);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        java.lang.String str11 = builder10.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        java.lang.String str53 = mongoDBRiverDefinition49.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue54 = mongoDBRiverDefinition49.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition49.mongoServers;
        builder5.mongoServers = serverAddressList55;
        builder5.statisticsIndexName = "size";
        int int59 = builder5.getconnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean18 = mongoDBRiverDefinition17.mongoSSLVerifyCertificate;
        java.lang.String str19 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean20 = mongoDBRiverDefinition17.getstoreStatistics();
        boolean boolean21 = mongoDBRiverDefinition17.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        int int44 = mongoDBRiverDefinition39.socketTimeout;
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(mongoClientOptions45);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.getSIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition17.getHOST_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition17.getSSL_VERIFY_CERT_FIELD();
        boolean boolean21 = mongoDBRiverDefinition17.mongoSSLVerifyCertificate;
        boolean boolean22 = mongoDBRiverDefinition17.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "host" + "'", str19, "host");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ssl_verify_certificate" + "'", str20, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str46 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "servers" + "'", str46, "servers");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getUSER_FIELD();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        org.elasticsearch.common.logging.ESLogger eSLogger47 = mongoDBRiverDefinition39.getlogger();
        boolean boolean48 = mongoDBRiverDefinition39.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "admin" + "'", str42, "admin");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "import_all_collections" + "'", str43, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "admin" + "'", str44, "admin");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "user" + "'", str45, "user");
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(eSLogger47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder8.setmongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.mongoUseSSL(true);
        builder15.settypeName("bulk_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        boolean boolean15 = builder12.advancedTransformation;
        builder12.setmongoLocalUser("password.password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        java.lang.String str24 = builder23.mongoAdminPassword;
        boolean boolean25 = builder23.getmongoUseSSL();
        builder23.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str49 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "is_mongos" + "'", str49, "is_mongos");
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setmongoDb("script.disable_dynamic");
        boolean boolean9 = builder6.getmongoSecondaryReadPreference();
        builder6.riverName = "actions";
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoClientOptions(mongoClientOptions12);
        builder6.indexName = "gridfs";
        builder6.mongoUseSSL = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setstoreStatistics(true);
        builder5.riverIndexName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder17.mongoAdminUser;
        java.lang.String[] strArray47 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        java.lang.String str54 = mongoDBRiverDefinition53.getSIZE_FIELD();
        boolean boolean55 = mongoDBRiverDefinition53.disableIndexRefresh;
        boolean boolean56 = mongoDBRiverDefinition53.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition53.getMongoCollectionFilter();
        java.lang.String str58 = mongoDBRiverDefinition53.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition53.getMongoCollectionFilter();
        boolean boolean60 = mongoDBRiverDefinition53.advancedTransformation;
        java.lang.String str61 = mongoDBRiverDefinition53.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition53.getINCLUDE_FIELDS_FIELD();
        java.lang.String str63 = mongoDBRiverDefinition53.getCREDENTIALS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions64 = mongoDBRiverDefinition53.getMongoClientOptions();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition53.parentTypes;
        builder5.setexcludeFields(strSet65);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder5.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "size" + "'", str54, "size");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "bulk_timeout" + "'", str58, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ssl_verify_certificate" + "'", str61, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "include_fields" + "'", str62, "include_fields");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "credentials" + "'", str63, "credentials");
        org.junit.Assert.assertNull(mongoClientOptions64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNull(mongoClientOptions67);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject9 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = false;
        java.lang.String str14 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.script("type");
        java.lang.String str17 = builder0.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        boolean boolean45 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str46 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "servers" + "'", str46, "servers");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "secondary_read_preference" + "'", str47, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "store_statistics" + "'", str48, "store_statistics");
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.Boolean boolean7 = builder0.isMongos;
        java.lang.String str8 = builder0.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "credentials" + "'", str8, "credentials");
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.isImportAllCollections();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "concurrent_bulk_requests" + "'", str44, "concurrent_bulk_requests");
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition6.getNAME_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition6.getADMIN_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition6.getScriptType();
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition6.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "name" + "'", str8, "name");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(mongoClientOptions11);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(true);
        java.lang.String str11 = builder0.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        builder7.setisMongos((java.lang.Boolean) false);
        java.lang.String str10 = builder7.riverIndexName;
        boolean boolean11 = builder7.getmongoSSLVerifyCertificate();
        java.lang.String str12 = builder7.getmongoAdminUser();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script.default_lang" + "'", str10, "script.default_lang");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("size");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?size?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject9 = builder6.getmongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoOplogFilter();
        boolean boolean11 = builder6.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.typeName("host");
        java.lang.String str14 = builder6.mongoDb;
        builder6.setstatisticsTypeName("ssl");
        java.lang.String str17 = builder6.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "size" + "'", str44, "size");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str45 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "skip_initial_import" + "'", str43, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "throttle_size" + "'", str46, "throttle_size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "connect_timeout" + "'", str47, "connect_timeout");
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoGridFS();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str48 = mongoDBRiverDefinition39.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "store_statistics" + "'", str43, "store_statistics");
        org.junit.Assert.assertNull(strSet44);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str51 = mongoDBRiverDefinition39.mongoDb;
        java.lang.Boolean boolean52 = mongoDBRiverDefinition39.isMongos;
        boolean boolean53 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoLocalUser;
        int int49 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str50 = mongoDBRiverDefinition39.getStatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        docScoreSearchScript0.setNextScore((float) 32);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder25.mongoAdminUser;
        java.lang.String[] strArray55 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.lang.String str62 = mongoDBRiverDefinition61.getSIZE_FIELD();
        boolean boolean63 = mongoDBRiverDefinition61.disableIndexRefresh;
        java.lang.String str64 = mongoDBRiverDefinition61.getACTIONS_FIELD();
        java.lang.String str65 = mongoDBRiverDefinition61.scriptType;
        java.lang.String str66 = mongoDBRiverDefinition61.getMongoOplogNamespace();
        java.lang.String str67 = mongoDBRiverDefinition61.riverName;
        java.lang.Boolean boolean68 = mongoDBRiverDefinition61.isMongos();
        java.lang.String str69 = mongoDBRiverDefinition61.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition61.includeFields;
        java.lang.Object obj71 = docScoreSearchScript0.unwrap((java.lang.Object) strSet70);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "size" + "'", str62, "size");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "actions" + "'", str64, "actions");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "null.null" + "'", str66, "null.null");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(boolean68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        java.lang.String str8 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        boolean boolean52 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "gridfs" + "'", str51, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str47 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str49 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str50 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str52 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "throttle_size" + "'", str47, "throttle_size");
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "index" + "'", str49, "index");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "script_type" + "'", str50, "script_type");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ssl_verify_certificate" + "'", str52, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "localhost" + "'", str53, "localhost");
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str49 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str50 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "connect_timeout" + "'", str50, "connect_timeout");
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        java.lang.String str43 = builder42.gettypeName();
        boolean boolean44 = builder42.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        java.lang.String str9 = builder0.getstatisticsIndexName();
        java.lang.String str10 = builder0.getmongoDb();
        java.lang.String str11 = builder0.getmongoAdminUser();
        boolean boolean12 = builder0.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.riverIndexName("sandbox");
        java.util.Set<java.lang.String> strSet32 = builder31.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet32);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        java.util.Set<java.lang.String> strSet55 = builder0.getexcludeFields();
        java.lang.String str56 = builder0.riverIndexName;
        int int57 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoGridFS(false);
        java.lang.String str64 = builder63.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        int int42 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "credentials" + "'", str41, "credentials");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        int int44 = mongoDBRiverDefinition39.throttleSize;
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.getPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "port" + "'", str46, "port");
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        boolean boolean43 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder15.parentTypes;
        builder15.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        java.lang.String str24 = builder19.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(true);
        boolean boolean27 = builder26.mongoUseSSL;
        builder26.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.isMongos((java.lang.Boolean) true);
        java.lang.String str36 = builder30.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.mongoSSLVerifyCertificate(false);
        builder38.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder38.throttleSize(10);
        builder38.setmongoAdminUser("local");
        builder38.mongoCollection = "db";
        builder38.throttleSize = (byte) 10;
        boolean boolean49 = builder38.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str51 = builder50.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.indexName("credentials");
        java.lang.String str54 = builder53.mongoAdminUser;
        java.lang.String[] strArray83 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder53.parentTypes((java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition89 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder88);
        java.lang.String str90 = mongoDBRiverDefinition89.getSIZE_FIELD();
        boolean boolean91 = mongoDBRiverDefinition89.disableIndexRefresh;
        boolean boolean92 = mongoDBRiverDefinition89.isMongoGridFS();
        java.lang.String str93 = mongoDBRiverDefinition89.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue94 = mongoDBRiverDefinition89.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList95 = mongoDBRiverDefinition89.mongoServers;
        builder38.mongoServers = serverAddressList95;
        builder26.setmongoServers(serverAddressList95);
        builder15.mongoServers = serverAddressList95;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "size" + "'", str90, "size");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(timeValue94);
        org.junit.Assert.assertNotNull(serverAddressList95);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean45 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str46 = mongoDBRiverDefinition39.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        boolean boolean10 = builder8.getstoreStatistics();
        int int11 = builder8.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoLocalUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.script("flush_interval");
        java.util.Set<java.lang.String> strSet16 = builder15.getexcludeFields();
        builder15.setsocketTimeout((int) (byte) 1);
        builder15.throttleSize = (byte) 1;
        java.lang.String str21 = builder15.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "flush_interval" + "'", str21, "flush_interval");
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("flush_interval", "gridfs");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?gridfs?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        builder7.setscript("bulk_size");
        java.lang.String str62 = builder7.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder7.includeCollection("user");
        java.lang.String str65 = builder64.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        docScoreSearchScript0.setNextScore((float) 32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder24.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet31 = builder24.parentTypes;
        boolean boolean32 = builder24.mongoGridFS;
        builder24.setriverIndexName("admin");
        boolean boolean35 = builder24.getskipInitialImport();
        boolean boolean36 = builder24.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder24.riverName("script_type.null");
        docScoreSearchScript0.setNextVar("connect_timeout", (java.lang.Object) "script_type.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.indexName("credentials");
        builder40.setmongoCollection("initial_timestamp");
        java.lang.String str46 = builder40.getmongoCollection();
        builder40.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder40.mongoUseSSL(false);
        java.lang.Object obj51 = docScoreSearchScript0.unwrap((java.lang.Object) builder40);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(obj51);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.throttleSize((int) (short) 100);
        builder55.setstoreStatistics(false);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder55.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(mongoClientOptions60);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int49 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean50 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str51 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "script_type" + "'", str51, "script_type");
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        org.elasticsearch.common.logging.ESLogger eSLogger44 = mongoDBRiverDefinition39.getlogger();
        boolean boolean45 = mongoDBRiverDefinition39.getskipInitialImport();
        org.elasticsearch.common.logging.ESLogger eSLogger46 = mongoDBRiverDefinition39.getlogger();
        boolean boolean47 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(eSLogger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(eSLogger46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet5 = builder0.getexcludeFields();
        java.lang.String str6 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "skip_initial_import" + "'", str45, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1000 + "'", int47 == 1000);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str50 = mongoDBRiverDefinition39.getIndexName();
        boolean boolean51 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        boolean boolean52 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.elasticsearch.river.RiverSettings riverSettings2 = null;
        org.elasticsearch.script.ScriptService scriptService3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("servers", "hi!", riverSettings2, scriptService3);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchNullPointerException; message: No settings specified");
        } catch (org.elasticsearch.ElasticsearchNullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        builder7.setscriptType("user");
        builder7.statisticsTypeName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder16.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        java.lang.String str26 = builder21.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.skipInitialImport(true);
        boolean boolean29 = builder28.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.indexName("credentials");
        java.lang.String str38 = builder37.mongoAdminUser;
        java.lang.String[] strArray67 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet68);
        builder33.includeFields = strSet68;
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet68);
        builder7.excludeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder0.includeFields((java.util.Set<java.lang.String>) strSet68);
        builder74.socketTimeout = 30000;
        boolean boolean77 = builder74.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder74.mongoSecondaryReadPreference(false);
        builder79.settypeName("initial_timestamp");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(false);
        java.lang.String str14 = builder0.mongoDb;
        java.lang.String str15 = builder0.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        builder0.setmongoCollection("flush_interval");
        boolean boolean8 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("throttle_size");
        java.lang.String str11 = builder0.getmongoAdminUser();
        org.bson.types.Binary binary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.initialTimestamp(binary12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        java.lang.String str14 = builder13.getmongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder13.setmongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.statisticsIndexName("secondary_read_preference");
        builder18.statisticsIndexName = "script_type";
        builder18.mongoAdminUser = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.mongoAdminPassword("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("index");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript8 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript8.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj12 = docScoreSearchScript8.unwrap((java.lang.Object) docScoreNativeScriptFactory11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.isMongos((java.lang.Boolean) true);
        java.lang.String str19 = builder13.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.mongoSSLVerifyCertificate(false);
        java.lang.String str22 = builder13.riverName;
        java.lang.String str23 = builder13.scriptType;
        builder13.statisticsTypeName = "secondary_read_preference";
        builder13.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder13.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject30 = builder13.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.mongoCollectionFilter(basicDBObject30);
        int int33 = builder0.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int49 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str50 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "flush_interval" + "'", str50, "flush_interval");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "flush_interval" + "'", str51, "flush_interval");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "script_type" + "'", str52, "script_type");
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.riverName("bulk");
        int int12 = builder11.throttleSize;
        java.lang.Class<?> wildcardClass13 = builder11.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("servers");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?servers?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.getmongoAdminPassword();
        builder0.setmongoCollection("");
        boolean boolean5 = builder0.getmongoGridFS();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.mongoLocalPassword("name");
        java.util.Set<java.lang.String> strSet45 = builder44.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.storeStatistics(true);
        boolean boolean48 = builder44.advancedTransformation;
        builder44.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        java.lang.String str10 = builder8.getindexName();
        java.lang.String str11 = builder8.riverIndexName;
        java.util.Set<java.lang.String> strSet12 = builder8.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoUseSSL();
        int int47 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean48 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str49 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str50 = mongoDBRiverDefinition39.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "socket_timeout" + "'", str49, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.riverIndexName("sandbox");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder0.script("");
        java.lang.String str35 = builder34.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.includeCollection("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = builder37.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        boolean boolean6 = builder0.mongoGridFS;
        java.util.Set<java.lang.String> strSet7 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder3.mongoSecondaryReadPreference(false);
        java.lang.String str59 = builder3.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        builder38.mongoSSLVerifyCertificate = false;
        java.lang.String str46 = builder38.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder38.statisticsIndexName("password");
        boolean boolean49 = builder48.getadvancedTransformation();
        int int50 = builder48.throttleSize;
        builder48.setmongoLocalUser("password.password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        boolean boolean6 = builder0.skipInitialImport;
        builder0.riverIndexName = "connect_timeout";
        builder0.setriverIndexName("port");
        java.lang.String str11 = builder0.getmongoCollection();
        builder0.setmongoLocalUser("parent_types");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        java.lang.String str9 = builder0.getstatisticsIndexName();
        java.lang.String str10 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition11.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_requests" + "'", str12, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoDb();
        boolean boolean52 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str53 = mongoDBRiverDefinition39.getScriptType();
        java.lang.Boolean boolean54 = mongoDBRiverDefinition39.getisMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(boolean54);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        builder15.connectTimeout = 60000;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("credentials");
        builder18.setmongoCollection("initial_timestamp");
        java.lang.String str24 = builder18.getmongoCollection();
        builder18.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder18.getinitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject28 = builder18.mongoOplogFilter;
        java.lang.String str29 = builder18.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.isMongos((java.lang.Boolean) true);
        java.lang.String str36 = builder30.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.mongoSSLVerifyCertificate(false);
        builder38.setincludeCollection("import_all_collections");
        builder38.setconnectTimeout(8);
        builder38.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.advancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        builder46.mongoClientOptions = mongoClientOptions47;
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str51 = builder50.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.indexName("credentials");
        java.lang.String str54 = builder53.mongoAdminUser;
        java.lang.String[] strArray83 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder53.parentTypes((java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition89 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder88);
        java.lang.String str90 = mongoDBRiverDefinition89.getSIZE_FIELD();
        java.lang.String str91 = mongoDBRiverDefinition89.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str92 = mongoDBRiverDefinition89.getINDEX_OBJECT();
        int int93 = mongoDBRiverDefinition89.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str94 = mongoDBRiverDefinition89.getNAME_FIELD();
        java.lang.String str95 = mongoDBRiverDefinition89.getINCLUDE_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet96 = mongoDBRiverDefinition89.parentTypes;
        builder46.setincludeFields(strSet96);
        builder18.includeFields = strSet96;
        builder15.setexcludeFields(strSet96);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "initial_timestamp" + "'", str24, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp27);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "size" + "'", str90, "size");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "skip_initial_import" + "'", str91, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "index" + "'", str92, "index");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 60000 + "'", int93 == 60000);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "name" + "'", str94, "name");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "include_collection" + "'", str95, "include_collection");
        org.junit.Assert.assertNotNull(strSet96);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        java.lang.String str7 = mongoDBRiverDefinition6.getSCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition6.getRiverIndexName();
        java.lang.String str9 = mongoDBRiverDefinition6.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition6.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        java.lang.String str12 = builder11.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder11.getmongoServers();
        boolean boolean14 = builder11.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoDb("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.dropCollection(true);
        builder16.setmongoAdminUser("store_statistics");
        builder16.setmongoSSLVerifyCertificate(true);
        java.lang.String str23 = builder16.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder17.getscript();
        java.lang.String str22 = builder17.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder17.skipInitialImport(true);
        boolean boolean25 = builder24.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder29.includeFields = strSet64;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet64);
        com.mongodb.BasicDBObject basicDBObject69 = builder16.getmongoCollectionFilter();
        java.lang.String str70 = builder16.script;
        java.util.Set<java.lang.String> strSet71 = builder16.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(strSet71);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder7.script("filter");
        java.lang.String str62 = builder7.getmongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject63 = builder7.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder7.riverName("ssl_verify_certificate");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        builder62.disableIndexRefresh = true;
        builder62.setmongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        java.lang.String str45 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str48 = mongoDBRiverDefinition39.indexName;
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 30000 + "'", int43 == 30000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1000 + "'", int47 == 1000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "initial_timestamp" + "'", str50, "initial_timestamp");
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str43 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        boolean boolean46 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        int int47 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean48 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str49 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "password" + "'", str43, "password");
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "is_mongos" + "'", str49, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.isMongos((java.lang.Boolean) true);
        builder0.storeStatistics = false;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder18.mongoAdminUser;
        java.lang.String[] strArray48 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        java.lang.String str55 = mongoDBRiverDefinition54.getSIZE_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition54.getTHROTTLE_SIZE_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition54.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int58 = mongoDBRiverDefinition54.getDEFAULT_BULK_ACTIONS();
        int int59 = mongoDBRiverDefinition54.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = mongoDBRiverDefinition54.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder8.mongoServers(serverAddressList60);
        builder8.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder8.riverName("secondary_read_preference");
        boolean boolean66 = builder8.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "size" + "'", str55, "size");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "throttle_size" + "'", str56, "throttle_size");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "concurrent_bulk_requests" + "'", str57, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1000 + "'", int58 == 1000);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 60000 + "'", int59 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoCollection("localhost");
        java.lang.String str15 = builder8.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIndexName();
        boolean boolean46 = mongoDBRiverDefinition39.skipInitialImport;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        int int48 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str49 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteSizeValue47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "advanced_transformation" + "'", str49, "advanced_transformation");
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        builder0.settypeName("credentials");
        builder0.statisticsIndexName = "db";
        builder0.setthrottleSize(1000);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str50 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "advanced_transformation" + "'", str48, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "skip_initial_import" + "'", str50, "skip_initial_import");
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str48 = mongoDBRiverDefinition39.getBULK_FIELD();
        int int49 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk" + "'", str48, "bulk");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getScript();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        org.elasticsearch.common.unit.TimeValue timeValue48 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str49 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script_type" + "'", str45, "script_type");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "include_collection" + "'", str49, "include_collection");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setscript("disable_index_refresh");
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder22.mongoAdminUser;
        java.lang.String[] strArray52 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        boolean boolean59 = mongoDBRiverDefinition58.getdropCollection();
        java.util.Set<java.lang.String> strSet60 = mongoDBRiverDefinition58.getParentTypes();
        java.lang.Boolean boolean61 = mongoDBRiverDefinition58.getisMongos();
        java.lang.Boolean boolean62 = mongoDBRiverDefinition58.isMongos();
        int int63 = mongoDBRiverDefinition58.getDEFAULT_BULK_ACTIONS();
        java.lang.String str64 = mongoDBRiverDefinition58.getMongoAdminPassword();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition58.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.includeFields(strSet65);
        builder8.settypeName("db");
        builder8.mongoGridFS = false;
        builder8.riverIndexName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder8.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(boolean61);
        org.junit.Assert.assertNull(boolean62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1000 + "'", int63 == 1000);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str50 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "script" + "'", str50, "script");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "advanced_transformation" + "'", str49, "advanced_transformation");
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.includeCollection("admin");
        builder3.setindexName("filter");
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder3.mongoServers;
        java.lang.String str16 = builder3.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet8 = builder0.includeFields;
        builder0.setindexName("script");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        boolean boolean47 = mongoDBRiverDefinition46.getdropCollection();
        java.lang.String str48 = mongoDBRiverDefinition46.getNAME_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition46.getSERVERS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition46.getMongoServers();
        builder3.setmongoServers(serverAddressList50);
        builder3.isMongos = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "name" + "'", str48, "name");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "servers" + "'", str49, "servers");
        org.junit.Assert.assertNotNull(serverAddressList50);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = mongoDBRiverDefinition12.getDEFAULT_BULK_SIZE();
        java.lang.Boolean boolean14 = mongoDBRiverDefinition12.getisMongos();
        java.lang.String str15 = mongoDBRiverDefinition12.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        boolean boolean55 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp56 = builder0.getinitialTimestamp();
        builder0.storeStatistics = false;
        boolean boolean59 = builder0.getmongoGridFS();
        boolean boolean60 = builder0.skipInitialImport;
        builder0.skipInitialImport = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardTimestamp56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str43 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "localhost" + "'", str42, "localhost");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "is_mongos" + "'", str43, "is_mongos");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "password" + "'", str44, "password");
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        builder0.typeName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.mongoAdminPassword("secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder7.mongoAdminUser;
        java.lang.String[] strArray37 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str44 = mongoDBRiverDefinition43.getSIZE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition43.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition43.getINDEX_OBJECT();
        int int47 = mongoDBRiverDefinition43.getDEFAULT_SOCKET_TIMEOUT();
        int int48 = mongoDBRiverDefinition43.throttleSize;
        java.util.Set<java.lang.String> strSet49 = mongoDBRiverDefinition43.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder3.includeFields(strSet49);
        java.lang.String str51 = builder3.includeCollection;
        int int52 = builder3.connectTimeout;
        java.lang.String str53 = builder3.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder3.mongoCollection("gridfs");
        builder3.throttleSize = (byte) -1;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "size" + "'", str44, "size");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "skip_initial_import" + "'", str45, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 60000 + "'", int47 == 60000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        builder44.setmongoAdminPassword("bulk");
        java.lang.String str47 = builder44.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.scriptType("null.null");
        int int52 = builder51.getsocketTimeout();
        java.lang.String str53 = builder51.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        java.lang.String str8 = builder0.getscriptType();
        builder0.scriptType = "disable_index_refresh";
        java.util.Set<java.lang.String> strSet11 = builder0.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script.disable_dynamic" + "'", str8, "script.disable_dynamic");
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.riverIndexName("secondary_read_preference");
        builder11.scriptType = "index";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.getimportAllCollections();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.getMongoOplogFilter();
        int int50 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "throttle_size" + "'", str47, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 60000 + "'", int50 == 60000);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.isMongos((java.lang.Boolean) true);
        java.lang.String str12 = builder6.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoSSLVerifyCertificate(false);
        java.lang.String str15 = builder6.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        java.lang.String str20 = builder19.mongoAdminUser;
        java.lang.String[] strArray49 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        java.lang.String str56 = mongoDBRiverDefinition55.getSIZE_FIELD();
        boolean boolean57 = mongoDBRiverDefinition55.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = mongoDBRiverDefinition55.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder6.mongoServers(serverAddressList58);
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = builder6.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder6.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder6.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder64.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder64.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder64.riverName("admin");
        boolean boolean73 = builder72.getmongoSecondaryReadPreference();
        int int74 = builder72.getthrottleSize();
        java.util.List<com.mongodb.ServerAddress> serverAddressList75 = builder72.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder0.mongoServers(serverAddressList75);
        java.lang.String str77 = builder0.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "size" + "'", str56, "size");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serverAddressList58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(serverAddressList75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.String str46 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "user" + "'", str46, "user");
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        int int45 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str46 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getFILTER_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "bulk_timeout" + "'", str46, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "filter" + "'", str47, "filter");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.riverName("admin");
        java.lang.String str67 = builder58.getincludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "bulk_timeout" + "'", str67, "bulk_timeout");
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        builder3.setmongoDb("import_all_collections");
        builder3.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str47 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "throttle_size" + "'", str47, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.mongoClientOptions;
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "disable_index_refresh" + "'", str45, "disable_index_refresh");
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int49 = mongoDBRiverDefinition39.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition39.getMongoServers();
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = mongoDBRiverDefinition39.getMongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "skip_initial_import" + "'", str46, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "flush_interval" + "'", str47, "flush_interval");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertNotNull(serverAddressList51);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject58 = builder57.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = builder57.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.disableIndexRefresh(true);
        docScoreSearchScript0.setNextVar("is_mongos", (java.lang.Object) builder57);
        java.lang.String str65 = builder57.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder57.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk" + "'", str44, "bulk");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "skip_initial_import" + "'", str46, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str43 = mongoDBRiverDefinition39.indexName;
        java.lang.String str44 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverIndexName();
        boolean boolean46 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str47 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "credentials" + "'", str43, "credentials");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "servers" + "'", str44, "servers");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script_type" + "'", str47, "script_type");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "gridfs" + "'", str48, "gridfs");
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject9 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsIndexName("port");
        java.lang.String str14 = builder13.mongoAdminUser;
        boolean boolean15 = builder13.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder8.setmongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder8.mongoClientOptions = mongoClientOptions19;
        boolean boolean21 = builder8.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        builder12.includeFields = strSet47;
        builder12.setmongoSSLVerifyCertificate(false);
        java.lang.String str53 = builder12.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder12.socketTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoDb("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        builder7.scriptType = "script.disable_dynamic";
        boolean boolean15 = builder7.getmongoUseSSL();
        java.lang.String str16 = builder7.getmongoCollection();
        builder7.riverIndexName = "skip_initial_import";
        builder7.mongoUseSSL = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str44 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "initial_timestamp" + "'", str43, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "gridfs" + "'", str44, "gridfs");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gridfs" + "'", str45, "gridfs");
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str49 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "options" + "'", str49, "options");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "collection" + "'", str50, "collection");
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getHOST_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.isMongoUseSSL();
        boolean boolean43 = mongoDBRiverDefinition39.isImportAllCollections();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "host" + "'", str41, "host");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getTypeName();
        java.lang.String str44 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str46 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "socket_timeout" + "'", str44, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "parent_types" + "'", str46, "parent_types");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "import_all_collections" + "'", str47, "import_all_collections");
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        java.lang.String str8 = builder5.getmongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder5.mongoCollectionFilter = basicDBObject9;
        java.lang.String str11 = builder5.getmongoAdminPassword();
        boolean boolean12 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoDb("connect_timeout");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder14.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str47 = mongoDBRiverDefinition39.getFILTER_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str49 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "filter" + "'", str47, "filter");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "host" + "'", str49, "host");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder0.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.excludeFields(strSet8);
        java.lang.String str10 = builder9.mongoLocalPassword;
        boolean boolean11 = builder9.importAllCollections;
        boolean boolean12 = builder9.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder3.getscript();
        boolean boolean8 = builder3.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.script.ScriptService scriptService20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "filter", riverSettings19, scriptService20);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition21);
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.mongoGridFS(false);
        boolean boolean57 = builder56.storeStatistics;
        builder56.statisticsIndexName = "";
        builder56.setdisableIndexRefresh(false);
        builder56.isMongos = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "store_statistics" + "'", str46, "store_statistics");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "exclude_fields" + "'", str47, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk" + "'", str48, "bulk");
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.includeCollection("admin");
        builder3.setindexName("filter");
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder3.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder3.connectTimeout((int) (byte) -1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder36.throttleSize = (byte) 100;
        com.mongodb.BasicDBObject basicDBObject39 = builder36.mongoOplogFilter;
        boolean boolean40 = builder36.importAllCollections;
        int int41 = builder36.getconnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(basicDBObject39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str48 = mongoDBRiverDefinition39.getUSER_FIELD();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "user" + "'", str48, "user");
        org.junit.Assert.assertNotNull(basicDBObject49);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str48 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "skip_initial_import" + "'", str48, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        builder8.mongoLocalUser = "is_mongos";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str46 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoAdminUser();
        boolean boolean49 = mongoDBRiverDefinition39.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "host" + "'", str46, "host");
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp57 = builder0.initialTimestamp;
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.riverName("bulk_size");
        java.lang.String str62 = builder61.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(wildcardTimestamp57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl_verify_certificate" + "'", str44, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "type" + "'", str48, "type");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script" + "'", str49, "script");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bulk" + "'", str50, "bulk");
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        builder0.typeName = "script_type";
        boolean boolean7 = builder0.getmongoSecondaryReadPreference();
        java.lang.String str8 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.skipInitialImport(true);
        builder8.setscript("bulk_size");
        boolean boolean14 = builder8.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str11 = mongoDBRiverDefinition10.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.typeName;
        boolean boolean13 = mongoDBRiverDefinition10.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "advanced_transformation" + "'", str11, "advanced_transformation");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        int int18 = builder8.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript3 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript3.setNextScore(0.0f);
        java.lang.Object obj7 = docScoreSearchScript3.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField9 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript3.setNextVar("index", (java.lang.Object) parseField9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        boolean boolean14 = builder12.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder18.mongoAdminUser;
        java.lang.String[] strArray48 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet49);
        builder12.excludeFields = strSet49;
        java.lang.String str53 = builder12.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        docScoreSearchScript3.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition54);
        java.lang.String str56 = mongoDBRiverDefinition54.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean57 = mongoDBRiverDefinition54.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject58 = mongoDBRiverDefinition54.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.script.ScriptService scriptService60 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("ssl_verify_certificate", "store_statistics", riverSettings59, scriptService60);
        java.lang.String str62 = mongoDBRiverDefinition61.mongoLocalUser;
        boolean boolean63 = mongoDBRiverDefinition61.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 1 + "'", obj7, 1);
        org.junit.Assert.assertNotNull(parseField9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "advanced_transformation" + "'", str56, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("local");
        builder11.setskipInitialImport(false);
        builder11.setmongoAdminUser("sandbox");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        java.lang.String str12 = builder0.getstatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject13 = builder0.getmongoOplogFilter();
        builder0.setstatisticsTypeName("collection");
        builder0.setskipInitialImport(true);
        java.lang.String str18 = builder0.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.storeStatistics(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        boolean boolean50 = mongoDBRiverDefinition39.importAllCollections;
        boolean boolean51 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean52 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str53 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str55 = mongoDBRiverDefinition39.getRiverName();
        boolean boolean56 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str57 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "script" + "'", str53, "script");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "include_collection" + "'", str57, "include_collection");
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        builder0.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoLocalUser("collection");
        java.util.Set<java.lang.String> strSet20 = builder19.excludeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder19.mongoServers;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(serverAddressList21);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str48 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "concurrent_bulk_requests" + "'", str44, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "store_statistics" + "'", str48, "store_statistics");
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str52 = mongoDBRiverDefinition39.script;
        int int53 = mongoDBRiverDefinition39.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminUser;
        java.lang.String str48 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "skip_initial_import" + "'", str48, "skip_initial_import");
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        builder0.isMongos = true;
        java.lang.String str10 = builder0.includeCollection;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder0.mongoServers;
        com.mongodb.BasicDBObject basicDBObject12 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean45 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        int int46 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean47 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "include_fields" + "'", str45, "include_fields");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 30000 + "'", int46 == 30000);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoLocalUser;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str50 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardTimestamp49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoAdminUser;
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getParentTypes();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet10 = builder3.parentTypes;
        boolean boolean11 = builder3.mongoGridFS;
        builder3.setriverIndexName("admin");
        java.lang.String str14 = builder3.riverIndexName;
        builder3.dropCollection = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        builder42.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder42.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.storeStatistics(false);
        builder50.setmongoAdminPassword("bulk");
        java.lang.String str53 = builder50.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoLocalPassword("");
        docScoreSearchScript0.setNextVar("throttle_size", (java.lang.Object) "");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str58 = builder57.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject59 = null;
        builder57.setmongoCollectionFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder57.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str64 = builder63.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder63.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject67 = builder66.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder57.mongoOplogFilter(basicDBObject67);
        int int69 = builder57.throttleSize;
        java.lang.String str70 = builder57.getmongoLocalUser();
        java.lang.String str71 = builder57.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder57.mongoLocalUser("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder57.includeCollection("");
        builder57.setdisableIndexRefresh(true);
        java.lang.String str78 = builder57.mongoLocalUser;
        java.lang.Object obj79 = docScoreSearchScript0.unwrap((java.lang.Object) str78);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "type" + "'", str78, "type");
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + "type" + "'", obj79, "type");
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.elasticsearch.common.unit.TimeValue timeValue46 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertNotNull(timeValue46);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str52 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        boolean boolean53 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        java.lang.String str54 = mongoDBRiverDefinition39.typeName;
        java.lang.String str55 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger56 = mongoDBRiverDefinition39.getlogger();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "flush_interval" + "'", str52, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "credentials" + "'", str55, "credentials");
        org.junit.Assert.assertNotNull(eSLogger56);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        java.lang.String str11 = builder3.mongoLocalUser;
        java.lang.String str12 = builder3.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.statisticsTypeName = ".scripts";
        boolean boolean9 = builder6.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("filter");
        builder6.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        java.lang.String str8 = builder7.script;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        java.lang.String str8 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("db");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoOplogFilter();
        builder10.disableIndexRefresh = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        java.lang.String str6 = builder0.getmongoLocalPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoClientOptions(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        int int45 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str47 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script_type" + "'", str47, "script_type");
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean52 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.String str53 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "admin" + "'", str53, "admin");
        org.junit.Assert.assertNull(strSet54);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        java.util.Set<java.lang.String> strSet55 = builder0.getexcludeFields();
        java.lang.String str56 = builder0.riverIndexName;
        builder0.isMongos = false;
        builder0.setmongoLocalUser("hi!");
        builder0.setmongoDb("gridfs");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        java.lang.String str53 = mongoDBRiverDefinition49.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue54 = mongoDBRiverDefinition49.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition49.mongoServers;
        builder5.mongoServers = serverAddressList55;
        boolean boolean57 = builder5.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder5.advancedTransformation(false);
        org.bson.types.Binary binary60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder5.initialTimestamp(binary60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String str19 = builder10.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList62 = mongoDBRiverDefinition59.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder10.mongoServers(serverAddressList62);
        builder9.setmongoServers(serverAddressList62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder9.storeStatistics(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder9.mongoClientOptions;
        java.util.Set<java.lang.String> strSet68 = builder9.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(serverAddressList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(mongoClientOptions67);
        org.junit.Assert.assertNull(strSet68);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        builder7.setriverName("password");
        java.util.Set<java.lang.String> strSet11 = builder7.getexcludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder7.mongoServers;
        builder7.statisticsTypeName = "exclude_fields";
        builder7.includeCollection = "include_collection";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        builder8.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder8.mongoLocalUser("credentials");
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder23.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.mongoLocalPassword;
        builder13.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject17 = builder13.mongoCollectionFilter;
        builder13.mongoGridFS = true;
        int int20 = builder13.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        java.lang.String str61 = mongoDBRiverDefinition60.getSIZE_FIELD();
        boolean boolean62 = mongoDBRiverDefinition60.disableIndexRefresh;
        boolean boolean63 = mongoDBRiverDefinition60.isMongoGridFS();
        java.lang.String str64 = mongoDBRiverDefinition60.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue65 = mongoDBRiverDefinition60.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList66 = mongoDBRiverDefinition60.mongoServers;
        java.lang.String str67 = mongoDBRiverDefinition60.getACTIONS_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition60.getMongoDb();
        boolean boolean69 = mongoDBRiverDefinition60.getdisableIndexRefresh();
        java.lang.String str70 = mongoDBRiverDefinition60.getSOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition60.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder13.excludeFields(strSet71);
        builder0.parentTypes = strSet71;
        java.util.Set<java.lang.String> strSet74 = builder0.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "size" + "'", str61, "size");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(serverAddressList66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "actions" + "'", str67, "actions");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "socket_timeout" + "'", str70, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(strSet74);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.scriptType;
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str47 = mongoDBRiverDefinition39.getScript();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str49 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_requests" + "'", str43, "concurrent_requests");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder5.build();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder5.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(mongoClientOptions9);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder14.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.disableIndexRefresh(true);
        builder14.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder14.advancedTransformation(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder24.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet60);
        boolean boolean64 = builder63.getdropCollection();
        builder63.setdropCollection(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoLocalUser();
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(mongoClientOptions47);
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.Boolean boolean39 = builder38.isMongos;
        builder38.socketTimeout = 0;
        builder38.dropCollection = false;
        java.util.Set<java.lang.String> strSet44 = builder38.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = null;
        builder38.mongoServers = serverAddressList45;
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = null;
        builder38.mongoServers = serverAddressList47;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int43 = builder42.getsocketTimeout();
        boolean boolean44 = builder42.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.indexName("credentials");
        java.lang.String str49 = builder48.mongoAdminUser;
        java.lang.String[] strArray78 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder48.parentTypes((java.util.Set<java.lang.String>) strSet79);
        builder42.excludeFields = strSet79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder38.parentTypes((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.mongoAdminUser(".scripts");
        java.util.Set<java.lang.String> strSet86 = builder83.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(strSet86);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.storeStatistics(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder0.getmongoLocalUser();
        boolean boolean8 = builder0.getdropCollection();
        java.lang.String str9 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoLocalUser("ssl");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.indexName;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str50 = mongoDBRiverDefinition39.statisticsIndexName;
        java.lang.String str51 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl" + "'", str47, "ssl");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 30000 + "'", int48 == 30000);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "concurrent_bulk_requests" + "'", str51, "concurrent_bulk_requests");
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.indexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isImportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "store_statistics" + "'", str43, "store_statistics");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "type" + "'", str44, "type");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.connectTimeout = 27017;
        java.lang.String str8 = builder0.riverIndexName;
        java.lang.String str9 = builder0.riverIndexName;
        builder0.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSIZE_FIELD();
        boolean boolean53 = mongoDBRiverDefinition51.disableIndexRefresh;
        java.lang.String str54 = mongoDBRiverDefinition51.getACTIONS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition51.statisticsTypeName;
        boolean boolean56 = mongoDBRiverDefinition51.isAdvancedTransformation();
        java.lang.String str57 = mongoDBRiverDefinition51.riverIndexName;
        java.lang.String str58 = mongoDBRiverDefinition51.getIS_MONGOS_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition51.mongoAdminPassword;
        java.lang.String str60 = mongoDBRiverDefinition51.getSSL_CONNECTION_FIELD();
        int int61 = mongoDBRiverDefinition51.socketTimeout;
        java.lang.String str62 = mongoDBRiverDefinition51.mongoLocalPassword;
        java.lang.String str63 = mongoDBRiverDefinition51.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList64 = mongoDBRiverDefinition51.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder0.mongoServers(serverAddressList64);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "size" + "'", str52, "size");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "is_mongos" + "'", str58, "is_mongos");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ssl" + "'", str60, "ssl");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "initial_timestamp" + "'", str62, "initial_timestamp");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(serverAddressList64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        int int18 = builder0.getsocketTimeout();
        java.lang.String str19 = builder0.statisticsIndexName;
        builder0.setmongoUseSSL(false);
        builder0.setadvancedTransformation(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str11 = builder5.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str14 = builder5.riverName;
        java.lang.String str15 = builder5.scriptType;
        builder5.statisticsTypeName = "secondary_read_preference";
        builder5.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject22 = builder5.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = null;
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory3.newScript(strMap24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        java.lang.String str30 = builder29.mongoAdminUser;
        java.lang.String[] strArray59 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        java.lang.String str66 = mongoDBRiverDefinition65.getSIZE_FIELD();
        boolean boolean67 = mongoDBRiverDefinition65.disableIndexRefresh;
        java.lang.String str68 = mongoDBRiverDefinition65.getACTIONS_FIELD();
        java.lang.String str69 = mongoDBRiverDefinition65.getACTIONS_FIELD();
        java.lang.String str70 = mongoDBRiverDefinition65.mongoAdminPassword;
        boolean boolean71 = mongoDBRiverDefinition65.isAdvancedTransformation();
        java.lang.String str72 = mongoDBRiverDefinition65.getINDEX_OBJECT();
        boolean boolean73 = mongoDBRiverDefinition65.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp74 = mongoDBRiverDefinition65.getInitialTimestamp();
        boolean boolean75 = mongoDBRiverDefinition65.getadvancedTransformation();
        boolean boolean76 = mongoDBRiverDefinition65.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition65.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript78 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "size" + "'", str66, "size");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "actions" + "'", str68, "actions");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "actions" + "'", str69, "actions");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "index" + "'", str72, "index");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(wildcardTimestamp74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(executableScript78);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        builder0.setmongoSecondaryReadPreference(true);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        builder0.mongoAdminPassword = "parent_types";
        builder0.setstoreStatistics(true);
        boolean boolean13 = builder0.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean48 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean49 = mongoDBRiverDefinition39.mongoUseSSL;
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str52 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "socket_timeout" + "'", str52, "socket_timeout");
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_requests" + "'", str42, "concurrent_requests");
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        boolean boolean12 = builder11.getdropCollection();
        java.lang.String str13 = builder11.typeName;
        java.lang.String str14 = builder11.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int16 = builder15.getsocketTimeout();
        builder15.setskipInitialImport(false);
        builder15.mongoAdminUser = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        java.lang.String str27 = builder26.mongoAdminUser;
        java.lang.String[] strArray56 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder26.parentTypes((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        boolean boolean63 = mongoDBRiverDefinition62.getdropCollection();
        java.lang.String str64 = mongoDBRiverDefinition62.getNAME_FIELD();
        java.lang.String str65 = mongoDBRiverDefinition62.getSERVERS_FIELD();
        java.lang.String str66 = mongoDBRiverDefinition62.getMongoCollection();
        java.util.Set<java.lang.String> strSet67 = mongoDBRiverDefinition62.getParentTypes();
        builder15.includeFields = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder11.parentTypes(strSet67);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "name" + "'", str64, "name");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "servers" + "'", str65, "servers");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp43 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.util.List<com.mongodb.ServerAddress> serverAddressList44 = mongoDBRiverDefinition39.getMongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNull(wildcardTimestamp43);
        org.junit.Assert.assertNotNull(serverAddressList44);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        builder3.setriverName("bulk");
        builder3.mongoSSLVerifyCertificate = true;
        builder3.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.mongoCollection("include_fields");
        builder3.setstoreStatistics(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder3.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition12.getInitialTimestamp();
        java.lang.String str15 = mongoDBRiverDefinition12.getOPTIONS_FIELD();
        boolean boolean16 = mongoDBRiverDefinition12.isDisableIndexRefresh();
        boolean boolean17 = mongoDBRiverDefinition12.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "options" + "'", str15, "options");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        java.util.Set<java.lang.String> strSet57 = builder56.getexcludeFields();
        builder56.mongoGridFS = true;
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder56.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNull(mongoClientOptions60);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.getSIZE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition45.disableIndexRefresh;
        boolean boolean48 = mongoDBRiverDefinition45.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition45.getMongoCollectionFilter();
        java.lang.String str50 = mongoDBRiverDefinition45.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition45.getMongoCollectionFilter();
        boolean boolean52 = mongoDBRiverDefinition45.mongoSSLVerifyCertificate;
        java.lang.Object obj53 = docScoreSearchScript0.unwrap((java.lang.Object) boolean52);
        docScoreSearchScript0.setNextScore((float) 60000);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext58 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "size" + "'", str46, "size");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bulk_timeout" + "'", str50, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + false + "'", obj53, false);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getFILTER_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoAdminUser;
        org.elasticsearch.common.unit.TimeValue timeValue50 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str51 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "filter" + "'", str48, "filter");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "bulk_size" + "'", str51, "bulk_size");
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        builder7.mongoUseSSL = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        java.lang.String str48 = mongoDBRiverDefinition39.getDB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "type" + "'", str45, "type");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "disable_index_refresh" + "'", str46, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "db" + "'", str48, "db");
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        int int6 = builder5.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        boolean boolean10 = builder0.getmongoUseSSL();
        builder0.typeName = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.scriptType("index");
        builder19.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject22 = builder19.getmongoCollectionFilter();
        builder19.setdisableIndexRefresh(true);
        builder19.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder27.isMongos((java.lang.Boolean) true);
        java.lang.String str33 = builder27.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.mongoSSLVerifyCertificate(false);
        java.lang.String str36 = builder35.getmongoCollection();
        java.lang.String[] strArray51 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet52);
        builder0.excludeFields = strSet52;
        boolean boolean57 = builder0.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        java.lang.String str9 = builder0.getstatisticsIndexName();
        java.lang.String str10 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition11.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_requests" + "'", str12, "concurrent_requests");
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str48 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk_size" + "'", str48, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        java.lang.String str48 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "local" + "'", str48, "local");
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        boolean boolean6 = builder0.mongoSecondaryReadPreference;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.connectTimeout((int) ' ');
        java.lang.String str11 = builder10.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.storeStatistics(true);
        int int12 = builder11.getconnectTimeout();
        java.lang.String str13 = builder11.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.riverIndexName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        java.lang.String str20 = builder19.mongoAdminUser;
        java.lang.String[] strArray49 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        java.lang.String str56 = mongoDBRiverDefinition55.getSIZE_FIELD();
        boolean boolean57 = mongoDBRiverDefinition55.disableIndexRefresh;
        java.lang.String str58 = mongoDBRiverDefinition55.getACTIONS_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition55.getMongoOplogNamespace();
        java.lang.Boolean boolean60 = mongoDBRiverDefinition55.isMongos();
        boolean boolean61 = mongoDBRiverDefinition55.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition55.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder11.parentTypes(strSet62);
        builder63.setmongoAdminPassword("ssl_verify_certificate");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "size" + "'", str56, "size");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "actions" + "'", str58, "actions");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "null.null" + "'", str59, "null.null");
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        builder0.scriptType = "ssl";
        builder0.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder0.skipInitialImport(false);
        builder0.scriptType = "size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str47 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger49 = mongoDBRiverDefinition39.getlogger();
        boolean boolean50 = mongoDBRiverDefinition39.isImportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
        org.junit.Assert.assertNotNull(eSLogger49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        java.util.Set<java.lang.String> strSet9 = builder0.getexcludeFields();
        builder0.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSIZE_FIELD();
        boolean boolean53 = mongoDBRiverDefinition51.disableIndexRefresh;
        boolean boolean54 = mongoDBRiverDefinition51.isMongoGridFS();
        int int55 = mongoDBRiverDefinition51.throttleSize;
        java.lang.String str56 = mongoDBRiverDefinition51.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition51.mongoOplogFilter;
        java.lang.String str58 = mongoDBRiverDefinition51.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition51.getBULK_TIMEOUT_FIELD();
        int int60 = mongoDBRiverDefinition51.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet61 = mongoDBRiverDefinition51.getParentTypes();
        builder0.setparentTypes(strSet61);
        java.lang.String str63 = builder0.getmongoCollection();
        builder0.setsocketTimeout(100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "size" + "'", str52, "size");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(basicDBObject57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "script" + "'", str58, "script");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "bulk_timeout" + "'", str59, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        java.lang.String str11 = builder7.statisticsIndexName;
        boolean boolean12 = builder7.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str46 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ssl_verify_certificate" + "'", str46, "ssl_verify_certificate");
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.includeFields;
        boolean boolean49 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder15.getstoreStatistics();
        java.lang.String str17 = builder15.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.indexName("size");
        java.util.Set<java.lang.String> strSet20 = builder19.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("initial_timestamp", "ssl");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?ssl?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        org.elasticsearch.common.logging.ESLogger eSLogger44 = mongoDBRiverDefinition39.getlogger();
        boolean boolean45 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str48 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str50 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(eSLogger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "advanced_transformation" + "'", str48, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "socket_timeout" + "'", str49, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bulk_size" + "'", str50, "bulk_size");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "secondary_read_preference" + "'", str51, "secondary_read_preference");
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition6.getFLUSH_INTERVAL_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition6.getGRIDFS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition6.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "flush_interval" + "'", str8, "flush_interval");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str49 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        com.mongodb.BasicDBObject basicDBObject50 = mongoDBRiverDefinition39.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "password" + "'", str49, "password");
        org.junit.Assert.assertNotNull(basicDBObject50);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.mongoUseSSL;
        builder7.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.isMongos((java.lang.Boolean) true);
        java.lang.String str17 = builder11.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.mongoSSLVerifyCertificate(false);
        java.lang.String str20 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        boolean boolean26 = builder21.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int28 = builder27.getsocketTimeout();
        boolean boolean29 = builder27.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject34 = builder33.getmongoCollectionFilter();
        builder27.setmongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder21.mongoCollectionFilter(basicDBObject34);
        builder19.setmongoCollectionFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder7.mongoCollectionFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder7.statisticsIndexName("admin");
        java.lang.String str41 = builder40.getscriptType();
        java.lang.String str42 = builder40.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean43 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean44 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition39.mongoServers;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertNotNull(byteSizeValue47);
        org.junit.Assert.assertNotNull(serverAddressList48);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.includeCollection("admin");
        builder12.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.scriptType("localhost");
        java.lang.String str17 = builder12.indexName;
        builder12.statisticsTypeName = "password.password";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "credentials" + "'", str17, "credentials");
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder28.mongoAdminUser;
        java.lang.String[] strArray58 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str65 = mongoDBRiverDefinition64.getSIZE_FIELD();
        boolean boolean66 = mongoDBRiverDefinition64.disableIndexRefresh;
        java.lang.String str67 = mongoDBRiverDefinition64.getACTIONS_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition64.getMongoOplogNamespace();
        java.lang.Boolean boolean69 = mongoDBRiverDefinition64.isMongos();
        boolean boolean70 = mongoDBRiverDefinition64.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition64.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder22.parentTypes(strSet71);
        builder72.setisMongos((java.lang.Boolean) true);
        builder72.mongoLocalUser = "initial_timestamp";
        java.lang.String str77 = builder72.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject78 = builder72.mongoOplogFilter;
        builder72.setscript("name");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "size" + "'", str65, "size");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "actions" + "'", str67, "actions");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "null.null" + "'", str68, "null.null");
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(basicDBObject78);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.statisticsTypeName("store_statistics");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.mongoCollectionFilter;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        java.util.Set<java.lang.String> strSet20 = builder0.getexcludeFields();
        java.lang.String str21 = builder0.getmongoAdminPassword();
        int int22 = builder0.getconnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean44 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoAdminUser;
        java.lang.String str46 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.getstoreStatistics();
        boolean boolean45 = mongoDBRiverDefinition39.storeStatistics;
        boolean boolean46 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str47 = mongoDBRiverDefinition39.getIncludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "skip_initial_import" + "'", str43, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        builder0.setdisableIndexRefresh(true);
        builder0.setriverName("hi!");
        builder0.mongoUseSSL = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoAdminPassword("throttle_size");
        java.lang.Boolean boolean59 = builder0.getisMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(boolean59);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str49 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getStatisticsIndexName();
        boolean boolean51 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "size" + "'", str49, "size");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        builder11.mongoDb = "";
        builder11.settypeName("type");
        int int17 = builder11.getsocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean18 = mongoDBRiverDefinition17.mongoSSLVerifyCertificate;
        java.lang.String str19 = mongoDBRiverDefinition17.mongoLocalUser;
        java.lang.String str20 = mongoDBRiverDefinition17.mongoLocalUser;
        boolean boolean21 = mongoDBRiverDefinition17.isMongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.socketTimeout(30000);
        java.lang.String str17 = builder16.riverIndexName;
        builder16.setindexName("port");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = builder33.getmongoServers();
        builder33.settypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(serverAddressList34);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoUseSSL;
        boolean boolean12 = mongoDBRiverDefinition8.isSkipInitialImport();
        java.lang.String str13 = mongoDBRiverDefinition8.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.isMongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str44 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean47 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "password" + "'", str44, "password");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoOplogFilter();
        java.lang.String str11 = builder9.gettypeName();
        builder9.typeName = "user";
        java.lang.String str14 = builder9.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.mongoLocalPassword;
        java.lang.String str17 = builder15.mongoLocalPassword;
        builder15.disableIndexRefresh = true;
        boolean boolean20 = builder15.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        java.lang.String str61 = mongoDBRiverDefinition60.getSIZE_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition60.getTHROTTLE_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition60.getParentTypes();
        builder15.setparentTypes(strSet63);
        builder9.parentTypes = strSet63;
        com.mongodb.BasicDBObject basicDBObject66 = builder9.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "size" + "'", str61, "size");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "throttle_size" + "'", str62, "throttle_size");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(basicDBObject66);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        builder0.setsocketTimeout(10);
        java.lang.String[] strArray53 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet54);
        java.lang.String str57 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.isMongos((java.lang.Boolean) false);
        boolean boolean60 = builder0.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.scriptType("bulk_timeout");
        builder31.mongoCollection = "concurrent_requests";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.storeStatistics = false;
        boolean boolean26 = builder23.getadvancedTransformation();
        builder23.setriverIndexName("script.disable_dynamic");
        int int29 = builder23.socketTimeout;
        java.lang.String str30 = builder23.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp57 = builder0.initialTimestamp;
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.disableIndexRefresh(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(wildcardTimestamp57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.script = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.scriptType("drop_collection");
        java.lang.String str15 = builder14.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoLocalUser("flush_interval");
        builder14.setstoreStatistics(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.indexName("credentials");
        java.lang.String str5 = builder1.getscript();
        boolean boolean6 = builder1.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int8 = builder7.getsocketTimeout();
        boolean boolean9 = builder7.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        builder7.setmongoOplogFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder1.mongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = riverSettings17.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = riverSettings17.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = riverSettings17.settings();
        org.elasticsearch.common.settings.Settings settings21 = riverSettings17.globalSettings();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(settings21);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition12.getInitialTimestamp();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition12.mongoServers;
        boolean boolean16 = mongoDBRiverDefinition12.isSkipInitialImport();
        java.lang.String str17 = mongoDBRiverDefinition12.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition12.getMongoLocalPassword();
        java.lang.String str19 = mongoDBRiverDefinition12.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disable_index_refresh" + "'", str17, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        builder7.mongoUseSSL = true;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        org.elasticsearch.common.logging.ESLogger eSLogger52 = mongoDBRiverDefinition39.getlogger();
        boolean boolean53 = mongoDBRiverDefinition39.storeStatistics;
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str55 = mongoDBRiverDefinition39.indexName;
        java.lang.String str56 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str57 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(eSLogger52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "credentials" + "'", str55, "credentials");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "localhost" + "'", str56, "localhost");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ssl" + "'", str57, "ssl");
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("gridfs", "import_all_collections");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?import_all_collections?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        boolean boolean15 = mongoDBRiverDefinition14.isMongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition14.getMongoOplogNamespace();
        java.lang.String str17 = mongoDBRiverDefinition14.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "localhost" + "'", str17, "localhost");
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.mongoServers;
        java.lang.String str4 = builder0.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder0.getmongoServers();
        boolean boolean6 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        java.lang.String str12 = builder7.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.skipInitialImport(true);
        boolean boolean15 = builder14.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.skipInitialImport(false);
        java.lang.Boolean boolean18 = builder17.isMongos;
        builder17.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        java.lang.String str61 = mongoDBRiverDefinition60.getSIZE_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition60.getTHROTTLE_SIZE_FIELD();
        java.lang.String str63 = mongoDBRiverDefinition60.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean64 = mongoDBRiverDefinition60.getmongoGridFS();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition60.getParentTypes();
        builder17.setincludeFields(strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder0.includeFields(strSet65);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "size" + "'", str61, "size");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "throttle_size" + "'", str62, "throttle_size");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "concurrent_bulk_requests" + "'", str63, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "is_mongos" + "'", str47, "is_mongos");
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder28.mongoAdminUser;
        java.lang.String[] strArray58 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str65 = mongoDBRiverDefinition64.getSIZE_FIELD();
        boolean boolean66 = mongoDBRiverDefinition64.disableIndexRefresh;
        java.lang.String str67 = mongoDBRiverDefinition64.getACTIONS_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition64.getMongoOplogNamespace();
        java.lang.Boolean boolean69 = mongoDBRiverDefinition64.isMongos();
        boolean boolean70 = mongoDBRiverDefinition64.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition64.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder22.parentTypes(strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoDb("parent_types");
        boolean boolean75 = builder74.getimportAllCollections();
        builder74.settypeName("script.disable_dynamic");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "size" + "'", str65, "size");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "actions" + "'", str67, "actions");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "null.null" + "'", str68, "null.null");
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp57 = builder0.initialTimestamp;
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet64 = builder63.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(wildcardTimestamp57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(strSet64);
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str48 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str51 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "import_all_collections" + "'", str48, "import_all_collections");
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.riverName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str68 = builder67.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject71 = builder70.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList72 = builder70.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder70.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet77 = builder70.parentTypes;
        boolean boolean78 = builder70.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder70.dropCollection(false);
        java.lang.String str81 = builder70.riverIndexName;
        java.util.Set<java.lang.String> strSet82 = builder70.getexcludeFields();
        builder70.setmongoAdminPassword("type");
        com.mongodb.BasicDBObject basicDBObject85 = builder70.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder66.mongoCollectionFilter(basicDBObject85);
        java.lang.String str87 = builder66.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(serverAddressList72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertNotNull(basicDBObject85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "credentials" + "'", str87, "credentials");
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        builder3.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        builder10.mongoGridFS = true;
        java.lang.String str18 = builder10.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.scriptType("index");
        builder25.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder31.mongoAdminUser;
        java.lang.String[] strArray61 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder31.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        boolean boolean68 = mongoDBRiverDefinition67.getdropCollection();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition67.getParentTypes();
        builder25.parentTypes = strSet69;
        builder10.setexcludeFields(strSet69);
        builder3.setincludeFields(strSet69);
        builder3.setmongoLocalPassword("disable_index_refresh");
        java.lang.String str75 = builder3.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str46 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean48 = mongoDBRiverDefinition39.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "advanced_transformation" + "'", str46, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.riverIndexName("host");
        builder0.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        int int45 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str46 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isImportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "bulk_timeout" + "'", str46, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoLocalUser("concurrent_bulk_requests");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript5 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript5.setNextScore(0.0f);
        docScoreSearchScript5.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        java.lang.String str54 = mongoDBRiverDefinition49.getBULK_TIMEOUT_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition49.getScriptType();
        java.lang.Object obj56 = docScoreSearchScript5.unwrap((java.lang.Object) mongoDBRiverDefinition49);
        java.lang.String str57 = mongoDBRiverDefinition49.getMongoCollection();
        boolean boolean58 = mongoDBRiverDefinition49.getstoreStatistics();
        java.util.Set<java.lang.String> strSet59 = mongoDBRiverDefinition49.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder4.parentTypes(strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder4.mongoDb("local");
        builder4.mongoAdminPassword = "servers";
        builder4.importAllCollections = false;
        java.lang.String str67 = builder4.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.getSIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition45.getTHROTTLE_SIZE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition45.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int49 = mongoDBRiverDefinition45.getDEFAULT_BULK_ACTIONS();
        java.lang.String str50 = mongoDBRiverDefinition45.getIMPORT_ALL_COLLECTIONS_FIELD();
        docScoreSearchScript0.setNextVar("", (java.lang.Object) str50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str54 = builder53.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder53.indexName("credentials");
        java.lang.String str57 = builder56.mongoAdminUser;
        java.lang.String[] strArray86 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder56.parentTypes((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder89.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition92 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder91);
        boolean boolean93 = mongoDBRiverDefinition92.getdropCollection();
        java.lang.String str94 = mongoDBRiverDefinition92.getGRIDFS_FIELD();
        java.lang.String str95 = mongoDBRiverDefinition92.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str96 = mongoDBRiverDefinition92.getPARENT_TYPES_FIELD();
        java.lang.String str97 = mongoDBRiverDefinition92.mongoLocalUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList98 = mongoDBRiverDefinition92.mongoServers;
        docScoreSearchScript0.setNextVar("user", (java.lang.Object) mongoDBRiverDefinition92);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "size" + "'", str46, "size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "throttle_size" + "'", str47, "throttle_size");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_bulk_requests" + "'", str48, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1000 + "'", int49 == 1000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "import_all_collections" + "'", str50, "import_all_collections");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "gridfs" + "'", str94, "gridfs");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ssl_verify_certificate" + "'", str95, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "parent_types" + "'", str96, "parent_types");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(serverAddressList98);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean44 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoAdminUser;
        java.lang.String str46 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "admin" + "'", str47, "admin");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.indexName = "script.disable_dynamic";
        java.lang.String str26 = builder23.getmongoLocalUser();
        builder23.setriverIndexName("flush_interval");
        java.lang.String str29 = builder23.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder66.throttleSize = (byte) 100;
        builder66.setsocketTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str72 = builder71.mongoLocalPassword;
        builder71.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject75 = builder71.mongoCollectionFilter;
        builder66.mongoOplogFilter = basicDBObject75;
        builder23.setmongoOplogFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder23.includeCollection("servers");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp80 = builder79.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(wildcardTimestamp80);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        builder0.setsocketTimeout(10);
        java.lang.String[] strArray53 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet54);
        java.lang.String str57 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.isMongos((java.lang.Boolean) false);
        java.lang.String str60 = builder0.getmongoDb();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        builder7.setriverName("password");
        builder7.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.mongoDb("script.disable_dynamic");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("", "store_statistics", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?store_statistics?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str46 = mongoDBRiverDefinition39.getRiverName();
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str48 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_requests" + "'", str48, "concurrent_requests");
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("flush_interval");
        builder0.setscript("concurrent_requests");
        builder0.setincludeCollection("concurrent_requests");
        java.lang.Boolean boolean13 = builder0.getisMongos();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        builder12.setadvancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.skipInitialImport(false);
        java.util.Set<java.lang.String> strSet19 = builder12.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder12.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder12.mongoLocalPassword("index");
        builder12.setconnectTimeout((int) '4');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        int int49 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean50 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean51 = mongoDBRiverDefinition39.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "servers" + "'", str48, "servers");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        builder8.riverName = "password";
        builder8.setmongoCollection("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        boolean boolean9 = builder7.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoUseSSL(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        builder38.mongoSSLVerifyCertificate = false;
        boolean boolean46 = builder38.dropCollection;
        boolean boolean47 = builder38.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder38.mongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        boolean boolean51 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoLocalUser("password");
        com.mongodb.BasicDBObject basicDBObject22 = builder8.getmongoCollectionFilter();
        builder8.setmongoAdminUser("servers");
        builder8.setmongoSSLVerifyCertificate(true);
        builder8.setscript("name");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder0.build();
        java.lang.String str13 = builder0.indexName;
        boolean boolean14 = builder0.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        builder0.settypeName("advanced_transformation");
        boolean boolean11 = builder0.getmongoGridFS();
        builder0.setstoreStatistics(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp57 = builder0.initialTimestamp;
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.riverIndexName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(wildcardTimestamp57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        docScoreSearchScript0.setNextScore((float) 32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = builder20.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder20.getinitialTimestamp();
        builder20.mongoLocalUser = "socket_timeout";
        java.lang.String str27 = builder20.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder20.getmongoClientOptions();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoClientOptions28);
        docScoreSearchScript0.setNextScore((float) (short) 1);
        java.lang.Class<?> wildcardClass32 = docScoreSearchScript0.getClass();
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.indexName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.socketTimeout(100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getScript();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.indexName;
        java.lang.String str49 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script_type" + "'", str45, "script_type");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gridfs" + "'", str49, "gridfs");
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition39.getMongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(serverAddressList48);
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "import_all_collections" + "'", str45, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl" + "'", str47, "ssl");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str44 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getTypeName();
        boolean boolean46 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "store_statistics" + "'", str44, "store_statistics");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        builder5.setriverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.disableIndexRefresh(false);
        builder9.setincludeCollection("type");
        builder9.setmongoDb("advanced_transformation");
        boolean boolean14 = builder9.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        boolean boolean10 = builder8.getstoreStatistics();
        builder8.socketTimeout = 0;
        java.lang.String str13 = builder8.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.indexName("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.indexName = "script.disable_dynamic";
        java.lang.String str26 = builder23.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.riverIndexName("initial_timestamp");
        java.lang.String str29 = builder28.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index" + "'", str26, "index");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject41 = builder38.mongoCollectionFilter;
        builder38.throttleSize = 1;
        java.lang.String str44 = builder38.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject48 = null;
        builder47.setmongoOplogFilter(basicDBObject48);
        int int50 = builder47.socketTimeout;
        builder47.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder47.mongoCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str56 = builder55.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder55.indexName("credentials");
        boolean boolean59 = builder55.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder60.indexName("credentials");
        java.lang.String str64 = builder60.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder60.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str68 = builder67.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.indexName("credentials");
        java.lang.String str71 = builder67.getscript();
        boolean boolean72 = builder67.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int74 = builder73.getsocketTimeout();
        boolean boolean75 = builder73.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str77 = builder76.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject80 = builder79.getmongoCollectionFilter();
        builder73.setmongoOplogFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder67.mongoCollectionFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder66.mongoOplogFilter(basicDBObject80);
        builder55.setmongoOplogFilter(basicDBObject80);
        builder47.setmongoCollectionFilter(basicDBObject80);
        java.lang.String str86 = builder47.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str88 = builder87.statisticsIndexName;
        int int89 = builder87.getthrottleSize();
        builder87.mongoGridFS = false;
        int int92 = builder87.socketTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList93 = builder87.getmongoServers();
        builder47.mongoServers = serverAddressList93;
        builder46.setmongoServers(serverAddressList93);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(serverAddressList93);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str52 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "import_all_collections" + "'", str52, "import_all_collections");
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.includeCollection("admin");
        builder12.setdisableIndexRefresh(false);
        java.lang.String str15 = builder12.mongoCollection;
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str43 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "socket_timeout" + "'", str43, "socket_timeout");
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        int int6 = builder5.connectTimeout;
        java.lang.String str7 = builder5.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        builder0.setriverName("script.disable_dynamic");
        builder0.setstatisticsIndexName("null.collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getIncludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(strSet46);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str45 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.typeName;
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "admin" + "'", str45, "admin");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        builder7.statisticsIndexName = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.statisticsIndexName("servers");
        java.lang.String str14 = builder7.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        int int17 = builder15.getthrottleSize();
        builder15.mongoGridFS = false;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder15.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder7.mongoServers(serverAddressList20);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script_type" + "'", str47, "script_type");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl_verify_certificate" + "'", str48, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "include_collection" + "'", str49, "include_collection");
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        org.elasticsearch.common.logging.ESLogger eSLogger52 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str53 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str55 = mongoDBRiverDefinition39.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(eSLogger52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "script_type" + "'", str53, "script_type");
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        java.lang.String str8 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("db");
        boolean boolean11 = builder0.getimportAllCollections();
        boolean boolean12 = builder0.dropCollection;
        builder0.setriverIndexName("flush_interval");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = builder0.build();
        int int4 = mongoDBRiverDefinition3.getThrottleSize();
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        boolean boolean8 = builder0.mongoUseSSL;
        boolean boolean9 = builder0.mongoSecondaryReadPreference;
        boolean boolean10 = builder0.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.mongoCollectionFilter;
        boolean boolean44 = mongoDBRiverDefinition39.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "advanced_transformation" + "'", str42, "advanced_transformation");
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.connectTimeout((int) (short) 10);
        builder56.scriptType = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.socketTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder56.mongoDb("advanced_transformation");
        java.lang.String str63 = builder56.getscriptType();
        builder56.indexName = "concurrent_requests";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "actions" + "'", str63, "actions");
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        java.lang.String str9 = builder0.getstatisticsIndexName();
        java.lang.String str10 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.statisticsTypeName("gridfs");
        java.lang.String str13 = builder12.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsTypeName("store_statistics");
        builder8.mongoAdminUser = "script";
        java.lang.String str15 = builder8.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        org.elasticsearch.common.logging.ESLogger eSLogger52 = mongoDBRiverDefinition39.getlogger();
        boolean boolean53 = mongoDBRiverDefinition39.storeStatistics;
        boolean boolean54 = mongoDBRiverDefinition39.getimportAllCollections();
        boolean boolean55 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        boolean boolean56 = mongoDBRiverDefinition39.isAdvancedTransformation();
        boolean boolean57 = mongoDBRiverDefinition39.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(eSLogger52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp57 = builder0.initialTimestamp;
        builder0.setmongoSecondaryReadPreference(true);
        int int60 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder0.includeCollection("bulk");
        boolean boolean63 = builder0.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(wildcardTimestamp57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp4 = builder0.getinitialTimestamp();
        builder0.mongoLocalUser = "socket_timeout";
        boolean boolean7 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject51 = builder48.mongoCollectionFilter;
        java.lang.String str52 = builder48.mongoLocalUser;
        builder48.mongoDb = "name";
        com.mongodb.BasicDBObject basicDBObject55 = builder48.mongoCollectionFilter;
        builder0.setmongoCollectionFilter(basicDBObject55);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(wildcardTimestamp4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(basicDBObject55);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str45 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "password" + "'", str43, "password");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "concurrent_bulk_requests" + "'", str45, "concurrent_bulk_requests");
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        builder0.settypeName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.disableIndexRefresh(true);
        builder14.setmongoLocalUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        int int19 = builder17.getthrottleSize();
        java.util.Set<java.lang.String> strSet20 = builder17.parentTypes;
        builder17.mongoLocalUser = "";
        boolean boolean23 = builder17.getskipInitialImport();
        builder17.setmongoAdminUser("script");
        builder17.statisticsIndexName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.isMongos((java.lang.Boolean) true);
        java.lang.String str34 = builder28.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.mongoSSLVerifyCertificate(false);
        java.lang.String str37 = builder36.getmongoCollection();
        java.lang.String[] strArray52 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet53);
        builder17.setexcludeFields((java.util.Set<java.lang.String>) strSet53);
        builder14.excludeFields = strSet53;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        builder0.setmongoSecondaryReadPreference(true);
        com.mongodb.BasicDBObject basicDBObject8 = builder0.getmongoCollectionFilter();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject19 = builder10.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int22 = builder21.getsocketTimeout();
        builder21.setskipInitialImport(false);
        boolean boolean25 = builder21.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript26 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript26.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory29 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj30 = docScoreSearchScript26.unwrap((java.lang.Object) docScoreNativeScriptFactory29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str32 = builder31.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder31.isMongos((java.lang.Boolean) true);
        java.lang.String str37 = builder31.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.mongoSSLVerifyCertificate(false);
        java.lang.String str40 = builder31.riverName;
        java.lang.String str41 = builder31.scriptType;
        builder31.statisticsTypeName = "secondary_read_preference";
        builder31.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder31.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject48 = builder31.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory29.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        builder21.mongoCollectionFilter = basicDBObject48;
        org.elasticsearch.script.ExecutableScript executableScript51 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList57 = builder55.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder55.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str63 = builder62.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject66 = builder65.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = builder65.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder65.disableIndexRefresh(true);
        builder69.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder69.storeStatistics(true);
        int int74 = builder73.getconnectTimeout();
        java.lang.String str75 = builder73.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder73.socketTimeout(10);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory78 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str80 = builder79.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder79.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder79.isMongos((java.lang.Boolean) true);
        java.lang.String str85 = builder79.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder79.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject88 = builder79.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript89 = docScoreNativeScriptFactory78.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        builder77.setmongoOplogFilter(basicDBObject88);
        builder61.mongoOplogFilter = basicDBObject88;
        org.elasticsearch.script.ExecutableScript executableScript92 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        builder0.mongoCollectionFilter = basicDBObject88;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNotNull(executableScript51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(serverAddressList57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(serverAddressList67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(executableScript89);
        org.junit.Assert.assertNotNull(executableScript92);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.script = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoLocalPassword("");
        builder12.throttleSize = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoDb("");
        builder16.setdisableIndexRefresh(false);
        java.lang.String str19 = builder16.mongoLocalPassword;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        java.lang.String str3 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoCollection("script_type.null");
        java.lang.String str6 = builder5.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalUser("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.connectTimeout((int) ' ');
        int int13 = builder12.getconnectTimeout();
        builder12.statisticsTypeName = "filter";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.getScript();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "null.null" + "'", str47, "null.null");
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp4 = builder0.getinitialTimestamp();
        builder0.mongoLocalUser = "socket_timeout";
        boolean boolean7 = builder0.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet8 = builder0.getexcludeFields();
        builder0.setmongoGridFS(false);
        boolean boolean11 = builder0.getadvancedTransformation();
        java.lang.String str12 = builder0.includeCollection;
        java.lang.String str13 = builder0.scriptType;
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(wildcardTimestamp4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.statisticsTypeName("gridfs");
        java.lang.String str13 = builder12.mongoLocalUser;
        boolean boolean14 = builder12.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        java.lang.String str10 = builder9.getmongoAdminUser();
        java.lang.String str11 = builder9.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.storeStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        java.lang.String str9 = builder0.typeName;
        java.lang.String str10 = builder0.mongoLocalUser;
        builder0.storeStatistics = true;
        java.lang.String str13 = builder0.getmongoCollection();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        com.mongodb.MongoClientOptions mongoClientOptions48 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str49 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.riverIndexName;
        int int51 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "servers" + "'", str49, "servers");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 27017 + "'", int51 == 27017);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str47 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        int int49 = mongoDBRiverDefinition39.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder3.getscript();
        boolean boolean8 = builder3.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.common.settings.Settings settings20 = riverSettings19.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = riverSettings19.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = riverSettings19.settings();
        org.elasticsearch.script.ScriptService scriptService23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("password", "user", riverSettings19, scriptService23);
        java.lang.String str25 = mongoDBRiverDefinition24.indexName;
        boolean boolean26 = mongoDBRiverDefinition24.getmongoGridFS();
        java.lang.String str27 = mongoDBRiverDefinition24.mongoAdminUser;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(settings20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "password" + "'", str25, "password");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.advancedTransformation(true);
        java.lang.String str12 = builder0.riverIndexName;
        org.bson.types.BSONTimestamp bSONTimestamp13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.initialTimestamp(bSONTimestamp13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder17.mongoAdminUser;
        java.lang.String[] strArray47 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        boolean boolean54 = mongoDBRiverDefinition53.getdropCollection();
        java.lang.String str55 = mongoDBRiverDefinition53.getNAME_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition53.getSERVERS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue57 = mongoDBRiverDefinition53.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str58 = mongoDBRiverDefinition53.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = mongoDBRiverDefinition53.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder13.mongoServers(serverAddressList59);
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        builder60.mongoClientOptions = mongoClientOptions61;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "name" + "'", str55, "name");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "servers" + "'", str56, "servers");
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        builder0.setsocketTimeout((int) (byte) 1);
        java.lang.String str11 = builder0.scriptType;
        builder0.setmongoLocalUser("initial_timestamp");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.indexName = "script.disable_dynamic";
        boolean boolean26 = builder23.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos;
        boolean boolean46 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getIncludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "exclude_fields" + "'", str48, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "collection" + "'", str49, "collection");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject44 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean45 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "credentials" + "'", str41, "credentials");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(basicDBObject44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.advancedTransformation(true);
        java.lang.String str12 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        builder3.setriverName("bulk");
        int int7 = builder3.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        builder7.scriptType = "script.disable_dynamic";
        boolean boolean15 = builder7.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject16 = builder7.getmongoCollectionFilter();
        builder7.setscriptType("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder7.statisticsIndexName(".scripts");
        builder7.setstatisticsIndexName("import_all_collections");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        java.lang.String str23 = builder22.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.importAllCollections(true);
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.dropCollection(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean51 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean52 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean53 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        int int54 = mongoDBRiverDefinition39.getThrottleSize();
        boolean boolean55 = mongoDBRiverDefinition39.isMongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        builder3.setstatisticsTypeName("bulk_timeout");
        java.lang.String str8 = builder3.includeCollection;
        java.lang.String str9 = builder3.getmongoAdminPassword();
        int int10 = builder3.getconnectTimeout();
        java.lang.String str11 = builder3.typeName;
        boolean boolean12 = builder3.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.mongoLocalPassword("advanced_transformation");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.mongoDb;
        java.util.List<com.mongodb.ServerAddress> serverAddressList44 = mongoDBRiverDefinition39.mongoServers;
        boolean boolean45 = mongoDBRiverDefinition39.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(serverAddressList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.isMongos((java.lang.Boolean) true);
        java.lang.String str22 = builder16.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoSSLVerifyCertificate(false);
        builder24.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.skipInitialImport(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = builder24.mongoServers;
        builder15.mongoServers = serverAddressList29;
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = builder15.getmongoServers();
        builder15.connectTimeout = 0;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertNotNull(serverAddressList31);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.riverName("admin");
        java.lang.String str67 = builder66.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "bulk_timeout" + "'", str67, "bulk_timeout");
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        builder0.dropCollection = true;
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.skipInitialImport(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.scriptType;
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoCollection("filter");
        builder16.statisticsTypeName = "secondary_read_preference";
        builder16.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoAdminUser("script_type.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.riverName("gridfs");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean18 = mongoDBRiverDefinition17.mongoSSLVerifyCertificate;
        java.lang.String str19 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition17.scriptType;
        java.lang.String str21 = mongoDBRiverDefinition17.getSCRIPT_FIELD();
        int int22 = mongoDBRiverDefinition17.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script" + "'", str21, "script");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 60000 + "'", int22 == 60000);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder17.getscript();
        java.lang.String str22 = builder17.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder17.skipInitialImport(true);
        boolean boolean25 = builder24.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder29.includeFields = strSet64;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder16.setdisableIndexRefresh(false);
        boolean boolean71 = builder16.mongoSecondaryReadPreference;
        boolean boolean72 = builder16.getdisableIndexRefresh();
        builder16.mongoLocalUser = "port";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.skipInitialImport = true;
        builder0.statisticsTypeName = "secondary_read_preference";
        java.lang.String str8 = builder0.statisticsTypeName;
        builder0.socketTimeout = 'a';
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setmongoDb("script.disable_dynamic");
        boolean boolean9 = builder6.getmongoSecondaryReadPreference();
        builder6.riverName = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoAdminPassword("password");
        builder13.mongoSSLVerifyCertificate = false;
        builder13.riverIndexName = "null.null";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str45 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        int int46 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "initial_timestamp" + "'", str43, "initial_timestamp");
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "bulk_timeout" + "'", str45, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 27017 + "'", int46 == 27017);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.typeName("skip_initial_import");
        int int11 = builder10.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.throttleSize((int) (byte) 10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        boolean boolean10 = builder0.getmongoUseSSL();
        java.lang.String str11 = builder0.getscriptType();
        java.lang.String str12 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.setmongoLocalPassword("concurrent_requests");
        builder0.setriverName("password");
        builder0.riverName = "local";
        builder0.setmongoGridFS(true);
        java.util.Set<java.lang.String> strSet11 = builder0.includeFields;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean47 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getExcludeFields();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNull(boolean49);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.indexName("credentials");
        java.lang.String str5 = builder4.mongoAdminUser;
        java.lang.String[] strArray34 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.lang.String str41 = mongoDBRiverDefinition40.getSIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition40.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition40.getINDEX_OBJECT();
        int int44 = mongoDBRiverDefinition40.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean45 = mongoDBRiverDefinition40.getmongoUseSSL();
        java.lang.String str46 = mongoDBRiverDefinition40.script;
        java.lang.Boolean boolean47 = mongoDBRiverDefinition40.isMongos;
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition40.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings49 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "size" + "'", str41, "size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "skip_initial_import" + "'", str42, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "index" + "'", str43, "index");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNotNull(basicDBObject48);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        boolean boolean45 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean46 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str47 = mongoDBRiverDefinition39.getTypeName();
        java.lang.String str48 = mongoDBRiverDefinition39.getDB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 30000 + "'", int43 == 30000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "db" + "'", str48, "db");
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsTypeName("store_statistics");
        builder8.mongoAdminUser = "script";
        java.lang.Boolean boolean15 = builder8.isMongos;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + true + "'", boolean15, true);
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        java.lang.String str20 = builder16.getscript();
        java.lang.String str21 = builder16.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.skipInitialImport(true);
        boolean boolean24 = builder23.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder33.getscript();
        java.lang.String str38 = builder33.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(true);
        boolean boolean41 = builder40.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str47 = builder46.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.indexName("credentials");
        java.lang.String str50 = builder49.mongoAdminUser;
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder49.parentTypes((java.util.Set<java.lang.String>) strSet80);
        builder45.includeFields = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet80);
        builder85.mongoLocalPassword = "gridfs";
        builder85.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder85.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition92 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder85);
        java.lang.String str93 = mongoDBRiverDefinition92.getOPTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "options" + "'", str93, "options");
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        boolean boolean46 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.script;
        int int48 = mongoDBRiverDefinition39.connectTimeout;
        boolean boolean49 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        builder6.statisticsIndexName = "concurrent_bulk_requests";
        builder6.advancedTransformation = false;
        boolean boolean12 = builder6.storeStatistics;
        java.lang.String str13 = builder6.scriptType;
        java.lang.String str14 = builder6.script;
        java.lang.String str15 = builder6.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.isMongos((java.lang.Boolean) false);
        builder17.importAllCollections = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoGridFS(false);
        builder5.setscript("bulk_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str47 = mongoDBRiverDefinition39.getHOST_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions48 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str49 = mongoDBRiverDefinition39.getStatisticsTypeName();
        int int50 = mongoDBRiverDefinition39.getSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "host" + "'", str47, "host");
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoLocalUser;
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str49 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        int int50 = mongoDBRiverDefinition39.getThrottleSize();
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "advanced_transformation" + "'", str49, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(strSet51);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str43 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str44 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        int int45 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "initial_timestamp" + "'", str43, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "script" + "'", str44, "script");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.statisticsIndexName("initial_timestamp");
        boolean boolean13 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.isMongos((java.lang.Boolean) true);
        builder14.setriverName("");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript22 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript22.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj26 = docScoreSearchScript22.unwrap((java.lang.Object) docScoreNativeScriptFactory25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder27.isMongos((java.lang.Boolean) true);
        java.lang.String str33 = builder27.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.mongoSSLVerifyCertificate(false);
        java.lang.String str36 = builder27.riverName;
        java.lang.String str37 = builder27.scriptType;
        builder27.statisticsTypeName = "secondary_read_preference";
        builder27.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder27.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject44 = builder27.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript45 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder14.mongoCollectionFilter(basicDBObject44);
        builder7.mongoOplogFilter = basicDBObject44;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNotNull(executableScript45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        builder0.setsocketTimeout((int) (byte) 1);
        java.lang.String str11 = builder0.scriptType;
        boolean boolean12 = builder0.getdropCollection();
        builder0.mongoLocalPassword = "script_type.null";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoAdminUser();
        boolean boolean42 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str43 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "disable_index_refresh" + "'", str43, "disable_index_refresh");
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str50 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "exclude_fields" + "'", str50, "exclude_fields");
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        java.lang.String str11 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.storeStatistics(true);
        boolean boolean14 = builder7.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        builder44.setmongoAdminPassword("bulk");
        java.lang.String str47 = builder44.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.scriptType("null.null");
        builder51.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("actions");
        builder0.storeStatistics = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.mongoCollectionFilter;
        java.lang.String str44 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "advanced_transformation" + "'", str42, "advanced_transformation");
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "socket_timeout" + "'", str44, "socket_timeout");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("db");
        java.util.Set<java.lang.String> strSet12 = builder11.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.connectTimeout(0);
        builder11.typeName = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject21 = builder20.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = builder20.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder25.getscript();
        java.lang.String str30 = builder25.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder25.skipInitialImport(true);
        boolean boolean33 = builder32.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.indexName("credentials");
        java.lang.String str42 = builder41.mongoAdminUser;
        java.lang.String[] strArray71 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.parentTypes((java.util.Set<java.lang.String>) strSet72);
        builder37.includeFields = strSet72;
        builder24.setincludeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder11.excludeFields((java.util.Set<java.lang.String>) strSet72);
        java.util.Set<java.lang.String> strSet78 = builder77.getparentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(strSet78);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.indexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        builder8.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        builder15.setscriptType("user");
        builder15.statisticsTypeName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder24.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder29.getscript();
        java.lang.String str34 = builder29.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder29.skipInitialImport(true);
        boolean boolean37 = builder36.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str43 = builder42.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.indexName("credentials");
        java.lang.String str46 = builder45.mongoAdminUser;
        java.lang.String[] strArray75 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder45.parentTypes((java.util.Set<java.lang.String>) strSet76);
        builder41.includeFields = strSet76;
        builder28.setincludeFields((java.util.Set<java.lang.String>) strSet76);
        builder15.excludeFields = strSet76;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder8.includeFields((java.util.Set<java.lang.String>) strSet76);
        builder5.setexcludeFields((java.util.Set<java.lang.String>) strSet76);
        builder5.statisticsIndexName = "parent_types";
        builder5.mongoLocalUser = "local";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.isMongos();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str44 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "index" + "'", str44, "index");
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoOplogFilter();
        java.lang.String str11 = builder9.gettypeName();
        builder9.typeName = "user";
        java.lang.String str14 = builder9.getstatisticsTypeName();
        builder9.riverIndexName = "is_mongos";
        java.lang.String str17 = builder9.getmongoDb();
        java.lang.String str18 = builder9.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str43 = mongoDBRiverDefinition39.script;
        boolean boolean44 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.scriptType("script_type");
        java.lang.String str34 = builder33.getriverName();
        builder33.setmongoCollection("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder33.skipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str44 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str45 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str48 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "localhost" + "'", str44, "localhost");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "throttle_size" + "'", str45, "throttle_size");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "admin" + "'", str46, "admin");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "collection" + "'", str48, "collection");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "store_statistics" + "'", str49, "store_statistics");
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.mongoOplogFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder11.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.includeCollection;
        java.lang.String str35 = mongoDBRiverDefinition33.getPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "port" + "'", str35, "port");
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.String str45 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str47 = mongoDBRiverDefinition39.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "include_collection" + "'", str45, "include_collection");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "localhost" + "'", str46, "localhost");
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoLocalPassword("");
        builder6.throttleSize = (short) 0;
        builder6.setsocketTimeout((int) (short) -1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj19 = null;
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", obj19);
        docScoreSearchScript0.setNextScore((float) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.getmongoCollectionFilter();
        boolean boolean28 = builder26.getimportAllCollections();
        java.util.Set<java.lang.String> strSet29 = builder26.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        java.lang.String str70 = mongoDBRiverDefinition69.getSIZE_FIELD();
        boolean boolean71 = mongoDBRiverDefinition69.disableIndexRefresh;
        java.lang.String str72 = mongoDBRiverDefinition69.getACTIONS_FIELD();
        java.lang.String str73 = mongoDBRiverDefinition69.getMongoOplogNamespace();
        java.lang.Boolean boolean74 = mongoDBRiverDefinition69.isMongos();
        boolean boolean75 = mongoDBRiverDefinition69.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet76 = mongoDBRiverDefinition69.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder26.parentTypes(strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder26.mongoGridFS(false);
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder26.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder26.disableIndexRefresh(true);
        java.lang.Object obj83 = docScoreSearchScript0.unwrap((java.lang.Object) builder82);
        java.lang.String str84 = builder82.mongoDb;
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "size" + "'", str70, "size");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "actions" + "'", str72, "actions");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "null.null" + "'", str73, "null.null");
        org.junit.Assert.assertNull(boolean74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(mongoClientOptions80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_requests" + "'", str48, "concurrent_requests");
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        boolean boolean50 = mongoDBRiverDefinition47.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition47.getMongoCollectionFilter();
        java.lang.String str52 = mongoDBRiverDefinition47.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition47.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        java.util.Map<java.lang.String, java.lang.Object> strMap55 = riverSettings54.settings();
        org.elasticsearch.common.settings.Settings settings56 = riverSettings54.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = riverSettings54.settings();
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource(strMap57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "bulk_timeout" + "'", str52, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str52 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "secondary_read_preference" + "'", str52, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ssl_verify_certificate" + "'", str53, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "servers" + "'", str54, "servers");
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        boolean boolean16 = builder0.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str13 = mongoDBRiverDefinition12.getBULK_FIELD();
        int int14 = mongoDBRiverDefinition12.getDEFAULT_BULK_ACTIONS();
        java.lang.String str15 = mongoDBRiverDefinition12.getSSL_CONNECTION_FIELD();
        int int16 = mongoDBRiverDefinition12.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl" + "'", str15, "ssl");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 60000 + "'", int16 == 60000);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str44 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "password" + "'", str44, "password");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "concurrent_bulk_requests" + "'", str45, "concurrent_bulk_requests");
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        java.lang.String str13 = builder12.getriverName();
        boolean boolean14 = builder12.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoClientOptions(mongoClientOptions15);
        builder16.indexName = "localhost";
        java.util.Set<java.lang.String> strSet19 = builder16.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        builder7.statisticsIndexName = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.statisticsIndexName("servers");
        java.lang.Boolean boolean14 = builder7.getisMongos();
        java.util.Set<java.lang.String> strSet15 = builder7.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        java.lang.String str20 = builder19.mongoAdminUser;
        java.lang.String[] strArray49 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        java.lang.String str56 = mongoDBRiverDefinition55.getSIZE_FIELD();
        boolean boolean57 = mongoDBRiverDefinition55.disableIndexRefresh;
        java.lang.String str58 = mongoDBRiverDefinition55.getACTIONS_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition55.getMongoOplogNamespace();
        java.lang.String str60 = mongoDBRiverDefinition55.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str61 = mongoDBRiverDefinition55.getScript();
        int int62 = mongoDBRiverDefinition55.getConnectTimeout();
        java.lang.String str63 = mongoDBRiverDefinition55.riverName;
        java.lang.String str64 = mongoDBRiverDefinition55.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition55.getParentTypes();
        builder7.setexcludeFields(strSet65);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "size" + "'", str56, "size");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "actions" + "'", str58, "actions");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "null.null" + "'", str59, "null.null");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "import_all_collections" + "'", str60, "import_all_collections");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "secondary_read_preference" + "'", str64, "secondary_read_preference");
        org.junit.Assert.assertNotNull(strSet65);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str48 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "servers" + "'", str45, "servers");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 60000 + "'", int47 == 60000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disable_index_refresh" + "'", str48, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "localhost" + "'", str49, "localhost");
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        java.lang.String str20 = builder19.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        java.lang.String str26 = builder21.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.indexName("index");
        builder30.setmongoAdminPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder36.mongoAdminUser;
        java.lang.String[] strArray66 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder36.parentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        java.lang.String str73 = mongoDBRiverDefinition72.getSIZE_FIELD();
        boolean boolean74 = mongoDBRiverDefinition72.disableIndexRefresh;
        java.lang.String str75 = mongoDBRiverDefinition72.getACTIONS_FIELD();
        java.lang.String str76 = mongoDBRiverDefinition72.statisticsTypeName;
        boolean boolean77 = mongoDBRiverDefinition72.isAdvancedTransformation();
        java.lang.String str78 = mongoDBRiverDefinition72.riverIndexName;
        java.lang.String str79 = mongoDBRiverDefinition72.getIS_MONGOS_FIELD();
        java.lang.String str80 = mongoDBRiverDefinition72.mongoAdminPassword;
        java.lang.String str81 = mongoDBRiverDefinition72.getSSL_CONNECTION_FIELD();
        java.lang.String str82 = mongoDBRiverDefinition72.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet83 = mongoDBRiverDefinition72.parentTypes;
        builder30.setincludeFields(strSet83);
        builder30.importAllCollections = false;
        java.util.Set<java.lang.String> strSet87 = builder30.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder19.excludeFields(strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder88.mongoAdminPassword("credentials");
        boolean boolean91 = builder90.mongoSSLVerifyCertificate;
        java.lang.String str92 = builder90.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "size" + "'", str73, "size");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "actions" + "'", str75, "actions");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "is_mongos" + "'", str79, "is_mongos");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ssl" + "'", str81, "ssl");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "concurrent_requests" + "'", str82, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoClientOptions(mongoClientOptions8);
        java.lang.String str10 = builder9.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (byte) 10);
        com.mongodb.BasicDBObject basicDBObject9 = builder0.getmongoOplogFilter();
        java.lang.String str10 = builder0.script;
        builder0.importAllCollections = false;
        boolean boolean13 = builder0.getmongoUseSSL();
        java.lang.String str14 = builder0.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.storeStatistics(true);
        boolean boolean12 = builder11.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.isMongos((java.lang.Boolean) false);
        builder14.mongoAdminPassword = "import_all_collections";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.getisMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(boolean47);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.storeStatistics(true);
        builder3.statisticsIndexName = "script.disable_dynamic";
        int int6 = builder3.socketTimeout;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.riverName("admin");
        builder58.throttleSize = 1;
        com.mongodb.BasicDBObject basicDBObject69 = builder58.getmongoOplogFilter();
        java.lang.String str70 = builder58.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(basicDBObject69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "disable_index_refresh" + "'", str70, "disable_index_refresh");
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverName("collection");
        java.lang.String str15 = builder14.getindexName();
        builder14.mongoDb = "import_all_collections";
        java.lang.String str18 = builder14.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        int int21 = builder19.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoLocalUser("concurrent_bulk_requests");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript24 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript24.setNextScore(0.0f);
        docScoreSearchScript24.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder32.mongoAdminUser;
        java.lang.String[] strArray62 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        java.lang.String str69 = mongoDBRiverDefinition68.getSIZE_FIELD();
        boolean boolean70 = mongoDBRiverDefinition68.disableIndexRefresh;
        boolean boolean71 = mongoDBRiverDefinition68.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject72 = mongoDBRiverDefinition68.getMongoCollectionFilter();
        java.lang.String str73 = mongoDBRiverDefinition68.getBULK_TIMEOUT_FIELD();
        java.lang.String str74 = mongoDBRiverDefinition68.getScriptType();
        java.lang.Object obj75 = docScoreSearchScript24.unwrap((java.lang.Object) mongoDBRiverDefinition68);
        java.lang.String str76 = mongoDBRiverDefinition68.getMongoCollection();
        boolean boolean77 = mongoDBRiverDefinition68.getstoreStatistics();
        java.util.Set<java.lang.String> strSet78 = mongoDBRiverDefinition68.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder23.parentTypes(strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder14.parentTypes(strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str82 = builder81.statisticsIndexName;
        int int83 = builder81.getthrottleSize();
        java.util.Set<java.lang.String> strSet84 = builder81.parentTypes;
        builder81.mongoLocalUser = "";
        builder81.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder81.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder90.riverName("bulk");
        com.mongodb.MongoClientOptions mongoClientOptions93 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder92.mongoClientOptions(mongoClientOptions93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder94.mongoDb("concurrent_requests");
        java.util.List<com.mongodb.ServerAddress> serverAddressList97 = builder96.getmongoServers();
        builder80.mongoServers = serverAddressList97;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "size" + "'", str69, "size");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "bulk_timeout" + "'", str73, "bulk_timeout");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(serverAddressList97);
    }
}

