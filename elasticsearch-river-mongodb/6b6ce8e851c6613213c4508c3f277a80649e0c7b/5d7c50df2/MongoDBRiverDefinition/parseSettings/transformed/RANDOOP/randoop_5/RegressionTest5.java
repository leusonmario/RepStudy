import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("db");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder9.mongoClientOptions = mongoClientOptions12;
        int int14 = builder9.connectTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder9.mongoServers;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        boolean boolean10 = builder7.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder14.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.mongoServers(serverAddressList16);
        java.util.Set<java.lang.String> strSet18 = builder17.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = builder17.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        java.lang.Boolean boolean11 = builder7.isMongos;
        java.lang.String str12 = builder7.typeName;
        builder7.setstatisticsTypeName("socket_timeout");
        java.lang.String str15 = builder7.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "socket_timeout" + "'", str15, "socket_timeout");
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = mongoDBRiverDefinition42.mongoSSLVerifyCertificate;
        java.lang.String str44 = mongoDBRiverDefinition42.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition42.getScriptType();
        boolean boolean46 = mongoDBRiverDefinition42.mongoSecondaryReadPreference;
        int int47 = mongoDBRiverDefinition42.getDEFAULT_BULK_ACTIONS();
        java.lang.String str48 = mongoDBRiverDefinition42.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "initial_timestamp" + "'", str44, "initial_timestamp");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1000 + "'", int47 == 1000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "advanced_transformation" + "'", str48, "advanced_transformation");
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        java.lang.String str9 = builder7.getmongoLocalPassword();
        java.lang.String str10 = builder7.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str12 = mongoDBRiverDefinition11.getDROP_COLLECTION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition11.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition11.getimportAllCollections();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getParentTypes();
        java.lang.String str16 = mongoDBRiverDefinition11.getDEFAULT_DB_HOST();
        java.lang.String str17 = mongoDBRiverDefinition11.getRiverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "import_all_collections" + "'", str13, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "localhost" + "'", str16, "localhost");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder12.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.disableIndexRefresh(true);
        builder12.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.advancedTransformation(true);
        java.lang.String[] strArray57 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder22.parentTypes = strSet58;
        builder0.excludeFields = strSet58;
        java.util.Set<java.lang.String> strSet62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.parentTypes(strSet62);
        builder0.setriverIndexName("bulk");
        builder0.setscript("exclude_fields");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        builder0.setmongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.indexName("script.default_lang");
        builder0.mongoLocalPassword = "bulk_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.skipInitialImport(false);
        boolean boolean10 = builder9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setscript("disable_index_refresh");
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.scriptType("initial_timestamp");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getTypeName();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "skip_initial_import" + "'", str49, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str13 = mongoDBRiverDefinition12.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getRiverIndexName();
        java.lang.String str15 = mongoDBRiverDefinition12.getBULK_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition12.getPARENT_TYPES_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue17 = mongoDBRiverDefinition12.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str18 = mongoDBRiverDefinition12.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondary_read_preference" + "'", str13, "secondary_read_preference");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk" + "'", str15, "bulk");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "parent_types" + "'", str16, "parent_types");
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder17.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(true);
        builder21.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder28.mongoAdminUser;
        java.lang.String[] strArray58 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str65 = mongoDBRiverDefinition64.getSIZE_FIELD();
        int int66 = mongoDBRiverDefinition64.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str67 = mongoDBRiverDefinition64.getStatisticsTypeName();
        boolean boolean68 = mongoDBRiverDefinition64.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition64.getIncludeFields();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition64.getParentTypes();
        builder21.setexcludeFields(strSet70);
        builder13.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str75 = builder74.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder74.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder74.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.dropCollection(false);
        boolean boolean82 = builder81.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder81.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str85 = builder84.mongoLocalPassword;
        builder84.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject88 = builder84.mongoCollectionFilter;
        builder81.mongoOplogFilter = basicDBObject88;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder13.mongoOplogFilter(basicDBObject88);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "size" + "'", str65, "size");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 30000 + "'", int66 == 30000);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(mongoClientOptions83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.lang.String str9 = builder0.includeCollection;
        java.util.Set<java.lang.String> strSet10 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder0.getinitialTimestamp();
        java.lang.String str12 = builder0.indexName;
        boolean boolean13 = builder0.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.initialTimestamp;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoGridFS();
        boolean boolean47 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        boolean boolean5 = builder3.mongoGridFS;
        boolean boolean6 = builder3.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "skip_initial_import", "name", "size", "script.disable_dynamic", "bulk", "actions", "flush_interval", "script", "filter", "concurrent_requests", "parent_types", "bulk_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet20);
        builder0.riverName = "port";
        boolean boolean25 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.riverName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.typeName("size");
        boolean boolean30 = builder0.mongoUseSSL;
        boolean boolean31 = builder0.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(true);
        builder13.statisticsTypeName = "include_collection";
        builder13.typeName = "script.default_lang";
        java.lang.String str18 = builder13.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        builder0.setsocketTimeout(10);
        java.lang.String[] strArray53 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet54);
        java.lang.String str57 = builder0.getscript();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.riverName("local");
        boolean boolean62 = builder0.getdropCollection();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "skip_initial_import", "name", "size", "script.disable_dynamic", "bulk", "actions", "flush_interval", "script", "filter", "concurrent_requests", "parent_types", "bulk_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet20);
        builder0.riverName = "port";
        int int25 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.statisticsIndexName("script.disable_dynamic");
        builder0.skipInitialImport = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        builder0.isMongos = true;
        java.lang.String str10 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.socketTimeout(1000);
        builder0.settypeName("include_fields");
        builder0.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.indexName("script_type.null");
        builder0.socketTimeout = 1000;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        org.elasticsearch.common.logging.ESLogger eSLogger52 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str53 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions55 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(eSLogger52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "script_type" + "'", str53, "script_type");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "skip_initial_import" + "'", str54, "skip_initial_import");
        org.junit.Assert.assertNull(mongoClientOptions55);
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.riverIndexName = "bulk";
        builder12.setscriptType("");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        builder7.setscript("bulk_size");
        builder7.skipInitialImport = false;
        java.lang.String str64 = builder7.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str46 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl_verify_certificate" + "'", str44, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet42 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str43 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.isDropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "credentials" + "'", str43, "credentials");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "initial_timestamp" + "'", str44, "initial_timestamp");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.riverName("bulk");
        builder9.advancedTransformation = false;
        builder9.setmongoUseSSL(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        java.lang.String str15 = builder12.getincludeCollection();
        builder12.connectTimeout = 27017;
        builder12.setmongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder8.setmongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.disableIndexRefresh(true);
        boolean boolean19 = builder8.mongoSSLVerifyCertificate;
        java.lang.String str20 = builder8.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str44 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "store_statistics" + "'", str44, "store_statistics");
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        builder8.setconnectTimeout(8);
        builder8.setindexName("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        int int12 = builder10.getthrottleSize();
        java.util.Set<java.lang.String> strSet13 = builder10.parentTypes;
        builder10.mongoLocalUser = "";
        builder10.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        boolean boolean62 = mongoDBRiverDefinition59.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject63 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        builder10.mongoCollectionFilter = basicDBObject63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder7.mongoOplogFilter(basicDBObject63);
        java.lang.String str66 = builder7.getscript();
        boolean boolean67 = builder7.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        java.lang.String str55 = builder3.getmongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.scriptType;
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str47 = mongoDBRiverDefinition39.getScript();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str49 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition39.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_requests" + "'", str43, "concurrent_requests");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script_type" + "'", str49, "script_type");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "localhost" + "'", str50, "localhost");
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("store_statistics");
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder0.mongoClientOptions = mongoClientOptions6;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.includeCollection("actions");
        java.lang.String str10 = builder9.getstatisticsIndexName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        boolean boolean10 = builder0.getmongoUseSSL();
        builder0.typeName = "";
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder0.getmongoClientOptions();
        java.lang.String str14 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoAdminPassword("gridfs");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str50 = mongoDBRiverDefinition39.mongoCollection;
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strSet51);
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        builder8.setconnectTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.getSIZE_FIELD();
        boolean boolean54 = mongoDBRiverDefinition52.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition52.getMongoServers();
        boolean boolean56 = mongoDBRiverDefinition52.isDropCollection();
        java.lang.String str57 = mongoDBRiverDefinition52.mongoCollection;
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = mongoDBRiverDefinition52.getMongoServers();
        builder8.setmongoServers(serverAddressList58);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "size" + "'", str53, "size");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(serverAddressList58);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isDropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "skip_initial_import" + "'", str45, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        builder0.throttleSize = '#';
        builder0.setmongoLocalPassword("host");
        boolean boolean24 = builder0.mongoSSLVerifyCertificate;
        boolean boolean25 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = builder0.getinitialTimestamp();
        builder0.setimportAllCollections(true);
        builder0.dropCollection = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(wildcardTimestamp26);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("concurrent_bulk_requests", "user");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?user?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix(".scripts", "actions");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?actions?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.indexName;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.statisticsTypeName("options");
        java.lang.String str7 = builder6.mongoDb;
        java.lang.String str8 = builder6.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.statisticsIndexName;
        boolean boolean54 = mongoDBRiverDefinition51.isStoreStatistics();
        boolean boolean55 = mongoDBRiverDefinition51.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.setmongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoAdminUser("gridfs");
        builder16.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = builder16.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet20 = builder16.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        java.lang.String str26 = builder21.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.indexName("index");
        builder30.setmongoAdminPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder36.mongoAdminUser;
        java.lang.String[] strArray66 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder36.parentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        java.lang.String str73 = mongoDBRiverDefinition72.getSIZE_FIELD();
        boolean boolean74 = mongoDBRiverDefinition72.disableIndexRefresh;
        java.lang.String str75 = mongoDBRiverDefinition72.getACTIONS_FIELD();
        java.lang.String str76 = mongoDBRiverDefinition72.statisticsTypeName;
        boolean boolean77 = mongoDBRiverDefinition72.isAdvancedTransformation();
        java.lang.String str78 = mongoDBRiverDefinition72.riverIndexName;
        java.lang.String str79 = mongoDBRiverDefinition72.getIS_MONGOS_FIELD();
        java.lang.String str80 = mongoDBRiverDefinition72.mongoAdminPassword;
        java.lang.String str81 = mongoDBRiverDefinition72.getSSL_CONNECTION_FIELD();
        java.lang.String str82 = mongoDBRiverDefinition72.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet83 = mongoDBRiverDefinition72.parentTypes;
        builder30.setincludeFields(strSet83);
        builder16.setexcludeFields(strSet83);
        builder10.parentTypes = strSet83;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardTimestamp19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "size" + "'", str73, "size");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "actions" + "'", str75, "actions");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "is_mongos" + "'", str79, "is_mongos");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ssl" + "'", str81, "ssl");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "concurrent_requests" + "'", str82, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        builder0.setmongoClientOptions(mongoClientOptions17);
        builder0.setstatisticsIndexName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = builder0.build();
        java.lang.String str24 = mongoDBRiverDefinition23.getMongoAdminUser();
        boolean boolean25 = mongoDBRiverDefinition23.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.typeName("collection");
        builder7.setriverIndexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoGridFS(false);
        boolean boolean14 = builder11.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoAdminUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoAdminPassword("admin");
        org.bson.types.BSONTimestamp bSONTimestamp19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.initialTimestamp(bSONTimestamp19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        builder36.riverName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.indexName("credentials");
        builder48.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder48.build();
        boolean boolean52 = mongoDBRiverDefinition51.getstoreStatistics();
        boolean boolean53 = mongoDBRiverDefinition51.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder36.mongoCollectionFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp56 = builder55.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(wildcardTimestamp56);
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        int int44 = mongoDBRiverDefinition39.getConnectTimeout();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str46 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIncludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 60000 + "'", int45 == 60000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "skip_initial_import" + "'", str46, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.setmongoDb("is_mongos");
        builder0.setconnectTimeout((int) ' ');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        builder0.setisMongos((java.lang.Boolean) true);
        builder0.setconnectTimeout(27017);
        builder0.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str19 = builder0.mongoAdminPassword;
        java.lang.String str20 = builder0.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str45 = mongoDBRiverDefinition39.riverName;
        boolean boolean46 = mongoDBRiverDefinition39.isMongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "null.null" + "'", str44, "null.null");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder3.getscript();
        boolean boolean8 = builder3.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.common.settings.Settings settings20 = riverSettings19.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = riverSettings19.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = riverSettings19.settings();
        org.elasticsearch.script.ScriptService scriptService23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("password", "user", riverSettings19, scriptService23);
        java.lang.String str25 = mongoDBRiverDefinition24.getBULK_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition24.getIS_MONGOS_FIELD();
        boolean boolean27 = mongoDBRiverDefinition24.dropCollection;
        java.lang.String str28 = mongoDBRiverDefinition24.getMongoCollection();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(settings20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bulk" + "'", str25, "bulk");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "is_mongos" + "'", str26, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "password" + "'", str28, "password");
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoCollection("localhost");
        builder8.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.statisticsTypeName("actions");
        builder8.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        builder7.setscript("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.throttleSize((-1));
        boolean boolean12 = builder11.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str51 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "skip_initial_import" + "'", str51, "skip_initial_import");
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setmongoDb("script.disable_dynamic");
        boolean boolean9 = builder6.getmongoSecondaryReadPreference();
        boolean boolean10 = builder6.skipInitialImport;
        builder6.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.riverIndexName("script_type");
        java.lang.String str15 = builder6.getmongoCollection();
        java.lang.String str16 = builder6.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script_type" + "'", str16, "script_type");
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.Set<java.lang.String> strSet54 = builder0.getexcludeFields();
        java.lang.String str55 = builder0.getriverName();
        java.util.Set<java.lang.String> strSet56 = builder0.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strSet56);
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.isMongos();
        int int48 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str49 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_size" + "'", str49, "bulk_size");
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setstoreStatistics(true);
        builder5.riverIndexName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoSSLVerifyCertificate(true);
        builder13.setincludeCollection("flush_interval");
        java.lang.String str16 = builder13.typeName;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(mongoClientOptions17);
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.indexName = "script.disable_dynamic";
        java.lang.String str26 = builder23.getscriptType();
        builder23.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index" + "'", str26, "index");
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getPORT_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str48 = mongoDBRiverDefinition39.getIndexName();
        int int49 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "port" + "'", str46, "port");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder9.getmongoServers();
        builder0.mongoServers = serverAddressList11;
        builder0.setmongoLocalPassword("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(serverAddressList11);
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.script;
        boolean boolean48 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        builder0.isMongos = true;
        java.lang.String str10 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.socketTimeout(1000);
        builder12.socketTimeout = (-1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder22.mongoAdminUser;
        java.lang.String[] strArray52 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        java.lang.String str59 = mongoDBRiverDefinition58.getSIZE_FIELD();
        java.lang.String str60 = mongoDBRiverDefinition58.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str61 = mongoDBRiverDefinition58.getINDEX_OBJECT();
        int int62 = mongoDBRiverDefinition58.getDEFAULT_SOCKET_TIMEOUT();
        int int63 = mongoDBRiverDefinition58.throttleSize;
        java.util.Set<java.lang.String> strSet64 = mongoDBRiverDefinition58.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder18.includeFields(strSet64);
        builder12.setparentTypes(strSet64);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "size" + "'", str59, "size");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "skip_initial_import" + "'", str60, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "index" + "'", str61, "index");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 60000 + "'", int62 == 60000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str44 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.getScript();
        java.lang.String str47 = mongoDBRiverDefinition39.getScriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "store_statistics" + "'", str44, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        builder16.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.scriptType("index");
        builder25.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder31.mongoAdminUser;
        java.lang.String[] strArray61 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder31.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        boolean boolean68 = mongoDBRiverDefinition67.getdropCollection();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition67.getParentTypes();
        builder25.parentTypes = strSet69;
        builder16.setparentTypes(strSet69);
        java.lang.String str72 = builder16.scriptType;
        builder16.setmongoAdminUser("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean52 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str53 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str54 = mongoDBRiverDefinition39.getMongoAdminUser();
        int int55 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        int int56 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str57 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ssl" + "'", str57, "ssl");
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        int int44 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str45 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str46 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "localhost" + "'", str45, "localhost");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "socket_timeout" + "'", str46, "socket_timeout");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("bulk_size", "password");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?password?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoCollection();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean45 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean46 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str47 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str49 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "store_statistics" + "'", str47, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "parent_types" + "'", str49, "parent_types");
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int49 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str50 = mongoDBRiverDefinition39.mongoLocalPassword;
        int int51 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "initial_timestamp" + "'", str50, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 27017 + "'", int51 == 27017);
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str45 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getFILTER_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "flush_interval" + "'", str46, "flush_interval");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "secondary_read_preference" + "'", str47, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "filter" + "'", str48, "filter");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        java.lang.String str6 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoDb();
        java.util.Set<java.lang.String> strSet42 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str43 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "is_mongos" + "'", str43, "is_mongos");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str47 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "flush_interval" + "'", str47, "flush_interval");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "host" + "'", str48, "host");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "options" + "'", str49, "options");
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder7.advancedTransformation(true);
        builder7.importAllCollections = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        java.lang.String str13 = builder7.mongoLocalUser;
        builder7.includeCollection = "bulk_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.isMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean51 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str52 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoAdminUser();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str48 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str49 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "localhost" + "'", str48, "localhost");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script_type" + "'", str49, "script_type");
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        builder3.setmongoUseSSL(false);
        builder3.setindexName("exclude_fields");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 27017 + "'", int48 == 27017);
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        java.lang.String str11 = builder7.statisticsIndexName;
        boolean boolean12 = builder7.getmongoUseSSL();
        boolean boolean13 = builder7.advancedTransformation;
        int int14 = builder7.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        builder0.setmongoLocalPassword("sandbox");
        boolean boolean58 = builder0.getimportAllCollections();
        boolean boolean59 = builder0.getmongoSSLVerifyCertificate();
        builder0.statisticsIndexName = "local";
        boolean boolean62 = builder0.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean48 = mongoDBRiverDefinition39.mongoUseSSL;
        boolean boolean49 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp4 = builder0.getinitialTimestamp();
        builder0.mongoLocalUser = "socket_timeout";
        boolean boolean7 = builder0.getadvancedTransformation();
        builder0.setsocketTimeout(10);
        builder0.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(wildcardTimestamp4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str46 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.indexName;
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "exclude_fields" + "'", str46, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        boolean boolean45 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getParentTypes();
        int int47 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions49 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertNull(mongoClientOptions49);
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        int int47 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject50 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean51 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "local" + "'", str49, "local");
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        boolean boolean43 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str45 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean54 = mongoDBRiverDefinition51.isMongoGridFS();
        java.lang.String str55 = mongoDBRiverDefinition51.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition51.getADMIN_DB_FIELD();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "advanced_transformation" + "'", str53, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "initial_timestamp" + "'", str55, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "admin" + "'", str56, "admin");
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.riverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        builder8.scriptType = "bulk";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        boolean boolean45 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        java.lang.String str47 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bulk" + "'", str47, "bulk");
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.statisticsTypeName = "secondary_read_preference";
        java.lang.String str6 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.mongoLocalPassword;
        builder7.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject11 = builder7.mongoCollectionFilter;
        builder7.mongoGridFS = true;
        int int14 = builder7.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder18.mongoAdminUser;
        java.lang.String[] strArray48 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        java.lang.String str55 = mongoDBRiverDefinition54.getSIZE_FIELD();
        boolean boolean56 = mongoDBRiverDefinition54.disableIndexRefresh;
        boolean boolean57 = mongoDBRiverDefinition54.isMongoGridFS();
        java.lang.String str58 = mongoDBRiverDefinition54.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue59 = mongoDBRiverDefinition54.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = mongoDBRiverDefinition54.mongoServers;
        java.lang.String str61 = mongoDBRiverDefinition54.getACTIONS_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition54.getMongoDb();
        boolean boolean63 = mongoDBRiverDefinition54.getdisableIndexRefresh();
        java.lang.String str64 = mongoDBRiverDefinition54.getSOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition54.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder7.excludeFields(strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder0.excludeFields(strSet65);
        builder0.includeCollection = "port";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "size" + "'", str55, "size");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "actions" + "'", str61, "actions");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "socket_timeout" + "'", str64, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        java.lang.String str11 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.dropCollection(false);
        builder0.setmongoGridFS(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoAdminPassword();
        int int45 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bulk" + "'", str47, "bulk");
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger49 = mongoDBRiverDefinition39.getlogger();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_bulk_requests" + "'", str48, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(eSLogger49);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        builder0.setsocketTimeout((int) '4');
        builder0.mongoSSLVerifyCertificate = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str50 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean52 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean53 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "parent_types" + "'", str50, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str43 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "bulk_size" + "'", str43, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoSecondaryReadPreference(true);
        java.lang.String str14 = builder13.getmongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        java.lang.String str9 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        builder13.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject16 = builder13.mongoOplogFilter;
        boolean boolean17 = builder13.mongoSSLVerifyCertificate;
        builder13.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.isMongos((java.lang.Boolean) true);
        builder20.mongoGridFS = true;
        java.lang.String str28 = builder20.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder29.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder29.scriptType("index");
        builder35.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.indexName("credentials");
        java.lang.String str42 = builder41.mongoAdminUser;
        java.lang.String[] strArray71 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.parentTypes((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        boolean boolean78 = mongoDBRiverDefinition77.getdropCollection();
        java.util.Set<java.lang.String> strSet79 = mongoDBRiverDefinition77.getParentTypes();
        builder35.parentTypes = strSet79;
        builder20.setexcludeFields(strSet79);
        builder13.setincludeFields(strSet79);
        java.util.List<com.mongodb.ServerAddress> serverAddressList83 = builder13.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder0.mongoServers(serverAddressList83);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(serverAddressList83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("concurrent_bulk_requests", "db");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?db?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.statisticsIndexName("initial_timestamp");
        boolean boolean13 = builder12.getmongoSSLVerifyCertificate();
        boolean boolean14 = builder12.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.typeName;
        int int46 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 30000 + "'", int46 == 30000);
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition51.mongoCollectionFilter;
        boolean boolean54 = mongoDBRiverDefinition51.getstoreStatistics();
        boolean boolean55 = mongoDBRiverDefinition51.isDropCollection();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.riverName;
        java.lang.String str43 = mongoDBRiverDefinition39.mongoLocalUser;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(wildcardTimestamp44);
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str46 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.Class<?> wildcardClass47 = mongoDBRiverDefinition39.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoCollection("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoDb("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        boolean boolean48 = mongoDBRiverDefinition47.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition47.mongoOplogFilter;
        boolean boolean50 = mongoDBRiverDefinition47.getdropCollection();
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition47.getExcludeFields();
        java.lang.String str52 = mongoDBRiverDefinition47.getMongoDb();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition47.getParentTypes();
        builder0.setincludeFields(strSet53);
        boolean boolean55 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setmongoDb("script.disable_dynamic");
        boolean boolean9 = builder6.getmongoSecondaryReadPreference();
        boolean boolean10 = builder6.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoClientOptions(mongoClientOptions11);
        java.lang.String str13 = builder6.getindexName();
        builder6.script = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int8 = builder7.getsocketTimeout();
        boolean boolean9 = builder7.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.advancedTransformation(false);
        java.lang.String str12 = builder7.riverName;
        java.lang.String str13 = builder7.getstatisticsTypeName();
        builder7.setmongoCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.scriptType("script_type");
        docScoreSearchScript0.setNextVar("sandbox", (java.lang.Object) "script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject24 = builder23.getmongoCollectionFilter();
        java.lang.String str25 = builder23.getmongoAdminUser();
        builder23.statisticsTypeName = "is_mongos";
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder23);
        docScoreSearchScript0.setNextScore((float) 30000);
        org.apache.lucene.search.Scorer scorer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        builder0.setmongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.indexName("script.default_lang");
        java.lang.String str6 = builder5.getscript();
        boolean boolean7 = builder5.importAllCollections;
        java.util.Set<java.lang.String> strSet8 = builder5.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        builder7.scriptType = "script.disable_dynamic";
        boolean boolean15 = builder7.getmongoUseSSL();
        java.lang.String str16 = builder7.getmongoCollection();
        builder7.riverIndexName = "skip_initial_import";
        boolean boolean19 = builder7.skipInitialImport;
        java.lang.String str20 = builder7.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.setmongoCollectionFilter(basicDBObject8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.mongoOplogFilter(basicDBObject16);
        int int18 = builder6.throttleSize;
        java.lang.String str19 = builder6.getmongoLocalUser();
        int int20 = builder6.getsocketTimeout();
        int int21 = builder6.socketTimeout;
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) builder6);
        builder6.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.connectTimeout = 27017;
        java.lang.String str8 = builder0.riverIndexName;
        boolean boolean9 = builder0.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str46 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "name" + "'", str46, "name");
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.disableIndexRefresh(false);
        builder14.statisticsTypeName = "admin";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        java.util.Set<java.lang.String> strSet7 = builder0.getexcludeFields();
        java.lang.String str8 = builder0.indexName;
        boolean boolean9 = builder0.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoAdminUser;
        java.lang.String str49 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str51 = mongoDBRiverDefinition39.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ssl_verify_certificate" + "'", str49, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.getSIZE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition45.disableIndexRefresh;
        boolean boolean48 = mongoDBRiverDefinition45.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition45.getMongoCollectionFilter();
        java.lang.String str50 = mongoDBRiverDefinition45.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition45.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "" + "'", obj4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "size" + "'", str46, "size");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bulk_timeout" + "'", str50, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject51);
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str12 = mongoDBRiverDefinition8.getMongoCollection();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.connectTimeout((int) (byte) -1);
        builder11.disableIndexRefresh = true;
        boolean boolean14 = builder11.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.mongoOplogFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder11.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.getBULK_SIZE_FIELD();
        java.lang.String str35 = mongoDBRiverDefinition33.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str36 = mongoDBRiverDefinition33.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "bulk_size" + "'", str34, "bulk_size");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "concurrent_bulk_requests" + "'", str35, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "script.disable_dynamic" + "'", str36, "script.disable_dynamic");
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        builder0.setstatisticsIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder0.mongoUseSSL(false);
        builder0.advancedTransformation = false;
        boolean boolean63 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str47 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isMongoGridFS();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition39.mongoCollectionFilter;
        java.lang.String str52 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "collection" + "'", str47, "collection");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "bulk" + "'", str52, "bulk");
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        builder3.mongoCollection = "null.null";
        boolean boolean13 = builder3.getskipInitialImport();
        builder3.mongoGridFS = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str50 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str51 = mongoDBRiverDefinition39.getUSER_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "user" + "'", str51, "user");
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean52 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str53 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "exclude_fields" + "'", str53, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "store_statistics" + "'", str54, "store_statistics");
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str47 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.initialTimestamp;
        int int49 = mongoDBRiverDefinition39.getSocketTimeout();
        org.elasticsearch.common.unit.TimeValue timeValue50 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str51 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean52 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "throttle_size" + "'", str47, "throttle_size");
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        com.mongodb.BasicDBObject basicDBObject55 = builder54.mongoCollectionFilter;
        builder54.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.throttleSize((int) (short) 0);
        builder59.setmongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        builder12.includeFields = strSet47;
        builder12.setsocketTimeout(27017);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str46 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "advanced_transformation" + "'", str46, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        java.lang.String str38 = builder3.indexName;
        builder3.socketTimeout = (byte) 10;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "credentials" + "'", str38, "credentials");
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoAdminUser;
        boolean boolean50 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str51 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "store_statistics" + "'", str51, "store_statistics");
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        java.lang.String str8 = builder5.getmongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder5.mongoCollectionFilter = basicDBObject9;
        java.lang.String str11 = builder5.getmongoAdminPassword();
        boolean boolean12 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder16.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.disableIndexRefresh(true);
        java.lang.String str23 = builder16.getstatisticsIndexName();
        int int24 = builder16.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = builder26.build();
        int int28 = mongoDBRiverDefinition27.getDEFAULT_BULK_ACTIONS();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition27.mongoCollectionFilter;
        builder5.mongoOplogFilter = basicDBObject29;
        java.lang.String str31 = builder5.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1000 + "'", int28 == 1000);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int5 = builder4.getsocketTimeout();
        boolean boolean6 = builder4.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        builder4.setmongoOplogFilter(basicDBObject11);
        builder4.throttleSize = 10;
        builder4.setsocketTimeout(10);
        java.lang.String[] strArray57 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder4.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        java.lang.String str61 = builder4.getscript();
        com.mongodb.BasicDBObject basicDBObject62 = builder4.getmongoCollectionFilter();
        builder0.mongoOplogFilter = basicDBObject62;
        builder0.setriverName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder66.indexName("credentials");
        java.lang.String str70 = builder66.getscript();
        boolean boolean71 = builder66.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int73 = builder72.getsocketTimeout();
        boolean boolean74 = builder72.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str76 = builder75.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder75.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject79 = builder78.getmongoCollectionFilter();
        builder72.setmongoOplogFilter(basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder66.mongoCollectionFilter(basicDBObject79);
        java.lang.String str82 = builder81.getincludeCollection();
        java.lang.Boolean boolean83 = builder81.getisMongos();
        com.mongodb.BasicDBObject basicDBObject84 = builder81.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.mongoOplogFilter(basicDBObject84);
        builder85.setindexName("script.default_lang");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(boolean83);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.storeStatistics;
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeValue44);
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        builder6.statisticsIndexName = "concurrent_bulk_requests";
        builder6.advancedTransformation = false;
        java.lang.String str12 = builder6.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index" + "'", str12, "index");
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.initialTimestamp;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "drop_collection" + "'", str48, "drop_collection");
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str43 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        boolean boolean46 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str47 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "password" + "'", str43, "password");
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "servers" + "'", str47, "servers");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "store_statistics" + "'", str48, "store_statistics");
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        builder3.setincludeCollection("drop_collection");
        java.util.Set<java.lang.String> strSet7 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.throttleSize((int) 'a');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean49 = mongoDBRiverDefinition39.mongoUseSSL;
        boolean boolean50 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bulk_timeout" + "'", str47, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("script_type.null");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?script_type.null?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        boolean boolean12 = builder3.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder3.getmongoClientOptions();
        builder3.riverIndexName = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.setmongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoCollectionFilter(basicDBObject22);
        builder23.setmongoDb("script");
        int int26 = builder23.getsocketTimeout();
        builder23.setstatisticsTypeName("ssl");
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = builder23.mongoServers;
        builder3.setmongoServers(serverAddressList29);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(serverAddressList29);
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.lang.String str46 = mongoDBRiverDefinition45.getSIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition45.getTHROTTLE_SIZE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition45.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int49 = mongoDBRiverDefinition45.getDEFAULT_BULK_ACTIONS();
        java.lang.String str50 = mongoDBRiverDefinition45.getIMPORT_ALL_COLLECTIONS_FIELD();
        docScoreSearchScript0.setNextVar("", (java.lang.Object) str50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.mongoLocalPassword;
        builder52.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject56 = builder52.mongoCollectionFilter;
        int int57 = builder52.getconnectTimeout();
        java.lang.Object obj58 = docScoreSearchScript0.unwrap((java.lang.Object) int57);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext59 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "size" + "'", str46, "size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "throttle_size" + "'", str47, "throttle_size");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_bulk_requests" + "'", str48, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1000 + "'", int49 == 1000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "import_all_collections" + "'", str50, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + 0 + "'", obj58, 0);
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str43 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "bulk_size" + "'", str43, "bulk_size");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.statisticsIndexName = "collection";
        java.lang.String str5 = builder0.mongoAdminUser;
        java.lang.String str6 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder14.getscript();
        boolean boolean19 = builder14.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int21 = builder20.getsocketTimeout();
        boolean boolean22 = builder20.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.getmongoCollectionFilter();
        builder20.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder13.mongoOplogFilter(basicDBObject27);
        builder30.indexName = "script.disable_dynamic";
        java.lang.String str33 = builder30.getmongoLocalUser();
        builder30.setriverIndexName("flush_interval");
        java.lang.String str36 = builder30.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.indexName("credentials");
        java.lang.String str41 = builder40.mongoAdminUser;
        java.lang.String[] strArray70 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder40.parentTypes((java.util.Set<java.lang.String>) strSet71);
        builder73.throttleSize = (byte) 100;
        builder73.setsocketTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str79 = builder78.mongoLocalPassword;
        builder78.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject82 = builder78.mongoCollectionFilter;
        builder73.mongoOplogFilter = basicDBObject82;
        builder30.setmongoOplogFilter(basicDBObject82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.mongoOplogFilter(basicDBObject82);
        int int86 = builder85.connectTimeout;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(basicDBObject82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(basicDBObject47);
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.isMongos((java.lang.Boolean) true);
        java.lang.String str13 = builder7.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.mongoSSLVerifyCertificate(false);
        java.lang.String str16 = builder7.riverName;
        boolean boolean17 = builder7.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder7.mongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet20 = null;
        builder7.setexcludeFields(strSet20);
        java.lang.String str22 = builder7.statisticsTypeName;
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder7.mongoClientOptions(mongoClientOptions23);
        java.lang.Object obj25 = docScoreSearchScript0.unwrap((java.lang.Object) builder24);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "host" + "'", obj6, "host");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "local" + "'", str42, "local");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript8 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript8.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj12 = docScoreSearchScript8.unwrap((java.lang.Object) docScoreNativeScriptFactory11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.isMongos((java.lang.Boolean) true);
        java.lang.String str19 = builder13.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.mongoSSLVerifyCertificate(false);
        java.lang.String str22 = builder13.riverName;
        java.lang.String str23 = builder13.scriptType;
        builder13.statisticsTypeName = "secondary_read_preference";
        builder13.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder13.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject30 = builder13.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.mongoCollectionFilter(basicDBObject30);
        java.lang.String str33 = builder32.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.riverName("servers");
        builder35.setmongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int56 = builder55.getsocketTimeout();
        builder55.setskipInitialImport(false);
        builder55.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder55.mongoClientOptions(mongoClientOptions61);
        builder55.setmongoCollection("index");
        builder55.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str67 = builder55.mongoAdminUser;
        java.lang.String str68 = builder55.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str70 = builder69.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder69.indexName("credentials");
        java.lang.String str73 = builder69.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder69.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str77 = builder76.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.indexName("credentials");
        java.lang.String str80 = builder76.getscript();
        boolean boolean81 = builder76.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int83 = builder82.getsocketTimeout();
        boolean boolean84 = builder82.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str86 = builder85.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder85.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject89 = builder88.getmongoCollectionFilter();
        builder82.setmongoOplogFilter(basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder76.mongoCollectionFilter(basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder75.mongoOplogFilter(basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder55.mongoCollectionFilter(basicDBObject89);
        builder3.mongoOplogFilter = basicDBObject89;
        java.lang.String str95 = builder3.getincludeCollection();
        java.lang.String str96 = builder3.getindexName();
        com.mongodb.BasicDBObject basicDBObject97 = builder3.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder3.skipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "initial_timestamp" + "'", str67, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(basicDBObject89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "credentials" + "'", str96, "credentials");
        org.junit.Assert.assertNotNull(basicDBObject97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.includeCollection("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.advancedTransformation(false);
        java.lang.String str12 = builder11.getindexName();
        builder11.isMongos = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        builder0.setmongoLocalPassword("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str60 = builder0.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList61 = builder0.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(serverAddressList61);
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        java.lang.String str61 = builder58.getmongoAdminPassword();
        java.lang.Boolean boolean62 = builder58.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str64 = builder63.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder63.indexName("credentials");
        java.lang.String str67 = builder63.getscript();
        boolean boolean68 = builder63.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int70 = builder69.getsocketTimeout();
        boolean boolean71 = builder69.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str73 = builder72.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder72.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject76 = builder75.getmongoCollectionFilter();
        builder69.setmongoOplogFilter(basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder63.mongoCollectionFilter(basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder58.mongoCollectionFilter(basicDBObject76);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + boolean62 + "' != '" + true + "'", boolean62, true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getHOST_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "host" + "'", str41, "host");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        boolean boolean44 = mongoDBRiverDefinition39.isImportAllCollections();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getScript();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        java.lang.String str53 = mongoDBRiverDefinition49.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue54 = mongoDBRiverDefinition49.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition49.mongoServers;
        builder5.mongoServers = serverAddressList55;
        boolean boolean57 = builder5.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder5.advancedTransformation(false);
        int int60 = builder5.throttleSize;
        builder5.setskipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(mongoClientOptions45);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.setskipInitialImport(true);
        builder8.mongoSecondaryReadPreference = false;
        org.bson.types.Binary binary21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder8.initialTimestamp(binary21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.storeStatistics(true);
        builder5.mongoGridFS = false;
        builder5.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        java.util.Set<java.lang.String> strSet15 = builder12.getparentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str45 = mongoDBRiverDefinition39.riverName;
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str48 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "null.null" + "'", str44, "null.null");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "import_all_collections" + "'", str49, "import_all_collections");
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        org.elasticsearch.common.settings.Settings settings2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = null;
        org.elasticsearch.river.RiverSettings riverSettings4 = new org.elasticsearch.river.RiverSettings(settings2, strMap3);
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings4.globalSettings();
        org.elasticsearch.common.settings.Settings settings7 = riverSettings4.globalSettings();
        org.elasticsearch.common.settings.Settings settings8 = riverSettings4.globalSettings();
        org.elasticsearch.script.ScriptService scriptService9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("db", "initial_timestamp", riverSettings4, scriptService9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(settings5);
        org.junit.Assert.assertNull(settings6);
        org.junit.Assert.assertNull(settings7);
        org.junit.Assert.assertNull(settings8);
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean48 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        builder0.setadvancedTransformation(true);
        builder0.connectTimeout = 0;
        builder0.indexName = "host";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        int int44 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str45 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "name" + "'", str45, "name");
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        org.elasticsearch.common.logging.ESLogger eSLogger52 = mongoDBRiverDefinition39.getlogger();
        boolean boolean53 = mongoDBRiverDefinition39.storeStatistics;
        boolean boolean54 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str55 = mongoDBRiverDefinition39.getFILTER_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition39.mongoDb;
        org.elasticsearch.common.logging.ESLogger eSLogger57 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str58 = mongoDBRiverDefinition39.getScriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(eSLogger52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "filter" + "'", str55, "filter");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(eSLogger57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        java.lang.String str23 = builder22.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.importAllCollections(true);
        builder25.setincludeCollection("port");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str46 = mongoDBRiverDefinition39.riverName;
        boolean boolean47 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "actions" + "'", str48, "actions");
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.disableIndexRefresh = false;
        java.lang.String str45 = builder0.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean48 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str49 = mongoDBRiverDefinition39.statisticsIndexName;
        java.lang.String str50 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ssl" + "'", str50, "ssl");
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.isMongos((java.lang.Boolean) true);
        com.mongodb.BasicDBObject basicDBObject45 = builder0.mongoOplogFilter;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(basicDBObject45);
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        boolean boolean10 = builder8.getstoreStatistics();
        int int11 = builder8.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoLocalUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.script("flush_interval");
        java.util.Set<java.lang.String> strSet16 = builder15.getexcludeFields();
        builder15.setsocketTimeout((int) (byte) 1);
        org.bson.types.BSONTimestamp bSONTimestamp19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.initialTimestamp(bSONTimestamp19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean41 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str42 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getTypeName();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int45 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean46 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "is_mongos" + "'", str42, "is_mongos");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        int int47 = mongoDBRiverDefinition39.getConnectTimeout();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1000 + "'", int48 == 1000);
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        builder12.riverIndexName = "script.disable_dynamic";
        builder12.riverName = "secondary_read_preference";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.bson.types.BSONTimestamp bSONTimestamp12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.initialTimestamp(bSONTimestamp12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.mongoUseSSL;
        builder7.disableIndexRefresh = false;
        int int11 = builder7.socketTimeout;
        builder7.statisticsTypeName = "store_statistics";
        builder7.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("ssl_verify_certificate");
        builder10.mongoAdminPassword = "local";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setscript("disable_index_refresh");
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        builder18.setindexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.riverIndexName("admin");
        boolean boolean23 = builder22.storeStatistics;
        builder22.mongoAdminPassword = "script_type";
        builder22.isMongos = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        builder0.setmongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.indexName("script.default_lang");
        builder5.setscript("concurrent_requests");
        java.lang.String str8 = builder5.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        int int11 = builder9.getthrottleSize();
        java.util.Set<java.lang.String> strSet12 = builder9.parentTypes;
        builder9.mongoLocalUser = "";
        builder9.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet17 = null;
        builder9.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.scriptType("index");
        builder25.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject28 = builder25.getmongoCollectionFilter();
        builder9.setmongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder30.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.scriptType("index");
        builder36.statisticsTypeName = ".scripts";
        boolean boolean39 = builder36.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.statisticsIndexName;
        java.util.Set<java.lang.String> strSet42 = builder40.getincludeFields();
        java.lang.String str43 = builder40.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.indexName("credentials");
        java.lang.String str48 = builder44.getscript();
        java.lang.String str49 = builder44.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder44.skipInitialImport(true);
        boolean boolean52 = builder51.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str58 = builder57.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.indexName("credentials");
        java.lang.String str61 = builder60.mongoAdminUser;
        java.lang.String[] strArray90 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet91 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet91, strArray90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder60.parentTypes((java.util.Set<java.lang.String>) strSet91);
        builder56.includeFields = strSet91;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder40.includeFields((java.util.Set<java.lang.String>) strSet91);
        builder36.setincludeFields((java.util.Set<java.lang.String>) strSet91);
        builder9.setincludeFields((java.util.Set<java.lang.String>) strSet91);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder5.includeFields((java.util.Set<java.lang.String>) strSet91);
        boolean boolean99 = builder5.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        java.lang.String str32 = builder31.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isImportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        java.lang.String str45 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str48 = mongoDBRiverDefinition39.indexName;
        java.lang.String str49 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 30000 + "'", int43 == 30000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1000 + "'", int47 == 1000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "parent_types" + "'", str49, "parent_types");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "name" + "'", str50, "name");
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder16.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.disableIndexRefresh(true);
        builder16.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.advancedTransformation(true);
        java.lang.String[] strArray61 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        builder26.parentTypes = strSet62;
        builder10.excludeFields = strSet62;
        boolean boolean66 = builder10.getmongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder10.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(mongoClientOptions67);
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str50 = mongoDBRiverDefinition39.getIncludeCollection();
        boolean boolean51 = mongoDBRiverDefinition39.isDropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoCollection("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoDb("bulk_size");
        builder7.setmongoDb("ssl_verify_certificate");
        java.util.Set<java.lang.String> strSet10 = builder7.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalUser("password");
        builder15.settypeName("host");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setscript("disable_index_refresh");
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        builder18.setconnectTimeout((int) (short) 1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        builder54.mongoGridFS = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject10 = builder5.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.mongoOplogFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder11.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.connectTimeout(10);
        java.util.Set<java.lang.String> strSet36 = builder32.getparentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet36);
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        boolean boolean10 = builder8.getstoreStatistics();
        int int11 = builder8.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoLocalUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.script("flush_interval");
        builder8.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder6.setmongoGridFS(false);
        java.util.Set<java.lang.String> strSet26 = builder6.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet26);
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setadvancedTransformation(false);
        boolean boolean9 = builder6.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.riverIndexName("script.disable_dynamic");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder11.setmongoClientOptions(mongoClientOptions14);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setstatisticsIndexName("db");
        boolean boolean8 = builder0.advancedTransformation;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.throttleSize((int) (short) 1);
        java.lang.Class<?> wildcardClass12 = builder11.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject10 = builder0.mongoOplogFilter;
        boolean boolean11 = builder0.importAllCollections;
        boolean boolean12 = builder0.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script_type" + "'", str42, "script_type");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        java.lang.String str14 = builder13.getmongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder13.setmongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.statisticsIndexName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoLocalPassword("bulk_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setstatisticsIndexName("db");
        builder0.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("import_all_collections");
        builder11.typeName = "port";
        builder11.setmongoUseSSL(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1000 + "'", int47 == 1000);
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str52 = mongoDBRiverDefinition39.getScript();
        boolean boolean53 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str54 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "drop_collection" + "'", str54, "drop_collection");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "actions" + "'", str55, "actions");
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("db");
        java.util.Set<java.lang.String> strSet12 = builder11.includeFields;
        java.lang.String str13 = builder11.getmongoAdminUser();
        java.lang.String str14 = builder11.typeName;
        boolean boolean15 = builder11.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "db" + "'", str13, "db");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str52 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean54 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str55 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        int int56 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "secondary_read_preference" + "'", str52, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ssl_verify_certificate" + "'", str53, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "collection" + "'", str55, "collection");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 27017 + "'", int56 == 27017);
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getScript();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean52 = mongoDBRiverDefinition39.getstoreStatistics();
        boolean boolean53 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_bulk_requests" + "'", str50, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject51 = builder48.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        builder7.mongoOplogFilter = basicDBObject51;
        java.lang.String str54 = builder7.riverIndexName;
        java.lang.String str55 = builder7.getscriptType();
        builder7.setmongoAdminPassword("script_type");
        java.util.Set<java.lang.String> strSet58 = builder7.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strSet58);
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder38.includeCollection("localhost");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder6.setmongoGridFS(false);
        java.lang.String str26 = builder6.gettypeName();
        builder6.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder6.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet31 = builder6.getincludeFields();
        java.lang.String str32 = builder6.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        builder3.mongoDb = "socket_timeout";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean48 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str49 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "null.null" + "'", str47, "null.null");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "servers" + "'", str49, "servers");
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str45 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getFILTER_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.String str50 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "flush_interval" + "'", str46, "flush_interval");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "secondary_read_preference" + "'", str47, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "filter" + "'", str48, "filter");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "include_collection" + "'", str50, "include_collection");
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int8 = builder7.getsocketTimeout();
        boolean boolean9 = builder7.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.advancedTransformation(false);
        java.lang.String str12 = builder7.riverName;
        java.lang.String str13 = builder7.getstatisticsTypeName();
        builder7.setmongoCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.scriptType("script_type");
        docScoreSearchScript0.setNextVar("sandbox", (java.lang.Object) "script_type");
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        boolean boolean13 = builder10.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoCollection("script.default_lang");
        builder9.storeStatistics = false;
        builder9.script = "include_fields";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.dropCollection(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str48 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.elasticsearch.common.logging.ESLogger eSLogger50 = mongoDBRiverDefinition39.getlogger();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "skip_initial_import" + "'", str48, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(eSLogger50);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.setdropCollection(true);
        builder7.mongoAdminUser = "credentials";
        boolean boolean13 = builder7.getmongoSecondaryReadPreference();
        boolean boolean14 = builder7.skipInitialImport;
        builder7.skipInitialImport = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.riverIndexName("disable_index_refresh");
        builder3.riverName = "bulk_size";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder3.setmongoClientOptions(mongoClientOptions6);
        builder3.riverName = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        builder7.statisticsIndexName = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.statisticsIndexName("servers");
        java.lang.Boolean boolean14 = builder7.getisMongos();
        java.util.Set<java.lang.String> strSet15 = builder7.getparentTypes();
        builder7.setsocketTimeout(0);
        java.lang.String str18 = builder7.getincludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str56 = builder55.statisticsIndexName;
        builder55.setscriptType("user");
        builder55.statisticsTypeName = "secondary_read_preference";
        boolean boolean61 = builder55.mongoSecondaryReadPreference;
        java.lang.String str62 = builder55.mongoAdminPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = builder55.getmongoServers();
        builder54.mongoServers = serverAddressList63;
        int int65 = builder54.getconnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "skip_initial_import", "name", "size", "script.disable_dynamic", "bulk", "actions", "flush_interval", "script", "filter", "concurrent_requests", "parent_types", "bulk_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet20);
        java.lang.String str23 = builder0.getmongoLocalPassword();
        builder0.setscriptType("");
        builder0.mongoLocalPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder31.mongoAdminUser;
        java.lang.String[] strArray61 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder31.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        java.lang.String str68 = mongoDBRiverDefinition67.getSIZE_FIELD();
        int int69 = mongoDBRiverDefinition67.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str70 = mongoDBRiverDefinition67.getStatisticsTypeName();
        boolean boolean71 = mongoDBRiverDefinition67.isMongoSSLVerifyCertificate();
        java.lang.String str72 = mongoDBRiverDefinition67.getHOST_FIELD();
        java.lang.String str73 = mongoDBRiverDefinition67.getIS_MONGOS_FIELD();
        com.mongodb.BasicDBObject basicDBObject74 = mongoDBRiverDefinition67.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet75 = mongoDBRiverDefinition67.parentTypes;
        builder0.excludeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder0.advancedTransformation(false);
        java.lang.String str79 = builder0.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "size" + "'", str68, "size");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 30000 + "'", int69 == 30000);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "host" + "'", str72, "host");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "is_mongos" + "'", str73, "is_mongos");
        org.junit.Assert.assertNull(basicDBObject74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        builder3.setstatisticsTypeName("bulk_timeout");
        builder3.setriverName("secondary_read_preference");
        builder3.setstatisticsIndexName("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.throttleSize((int) (short) 100);
        builder55.setindexName("host");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        org.elasticsearch.common.logging.ESLogger eSLogger52 = mongoDBRiverDefinition39.getlogger();
        boolean boolean53 = mongoDBRiverDefinition39.storeStatistics;
        int int54 = mongoDBRiverDefinition39.getThrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(eSLogger52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.script = "is_mongos";
        builder0.throttleSize = 8;
        int int13 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.statisticsTypeName("import_all_collections");
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        org.elasticsearch.common.logging.ESLogger eSLogger44 = mongoDBRiverDefinition39.getlogger();
        boolean boolean45 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str48 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(eSLogger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "admin" + "'", str48, "admin");
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.storeStatistics(true);
        boolean boolean12 = builder11.getmongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder11.mongoClientOptions;
        boolean boolean14 = builder11.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        int int15 = builder12.getconnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str50 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        boolean boolean52 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str53 = mongoDBRiverDefinition39.typeName;
        boolean boolean54 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "script" + "'", str50, "script");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = mongoDBRiverDefinition39.getInitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "initial_timestamp" + "'", str51, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp52);
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isSkipInitialImport();
        int int48 = mongoDBRiverDefinition39.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        java.lang.Boolean boolean11 = builder7.isMongos;
        java.lang.String str12 = builder7.typeName;
        builder7.setstatisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.connectTimeout(27017);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        boolean boolean45 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str46 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "servers" + "'", str46, "servers");
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        java.util.Set<java.lang.String> strSet8 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("skip_initial_import");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "options" + "'", str48, "options");
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        com.mongodb.BasicDBObject basicDBObject55 = builder54.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.connectTimeout(0);
        builder57.settypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.mongoLocalPassword("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.mongoUseSSL(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder0.mongoAdminPassword = "parent_types";
        java.lang.String str11 = builder0.getriverIndexName();
        int int12 = builder0.getconnectTimeout();
        boolean boolean13 = builder0.getmongoSSLVerifyCertificate();
        java.lang.Boolean boolean14 = builder0.isMongos;
        builder0.disableIndexRefresh = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getExcludeFields();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.initialTimestamp;
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNull(basicDBObject46);
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.String str39 = builder38.getriverName();
        boolean boolean40 = builder38.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder44.mongoAdminUser;
        java.lang.String[] strArray74 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder44.parentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        java.lang.String str81 = mongoDBRiverDefinition80.getSIZE_FIELD();
        boolean boolean82 = mongoDBRiverDefinition80.disableIndexRefresh;
        java.lang.String str83 = mongoDBRiverDefinition80.getACTIONS_FIELD();
        java.lang.String str84 = mongoDBRiverDefinition80.statisticsTypeName;
        boolean boolean85 = mongoDBRiverDefinition80.isDropCollection();
        boolean boolean86 = mongoDBRiverDefinition80.isImportAllCollections();
        java.lang.String str87 = mongoDBRiverDefinition80.scriptType;
        java.lang.String str88 = mongoDBRiverDefinition80.getCOLLECTION_FIELD();
        java.lang.String str89 = mongoDBRiverDefinition80.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean90 = mongoDBRiverDefinition80.isMongoGridFS();
        java.util.Set<java.lang.String> strSet91 = mongoDBRiverDefinition80.includeFields;
        com.mongodb.BasicDBObject basicDBObject92 = mongoDBRiverDefinition80.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder38.mongoOplogFilter(basicDBObject92);
        builder38.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "size" + "'", str81, "size");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "actions" + "'", str83, "actions");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "collection" + "'", str88, "collection");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "initial_timestamp" + "'", str89, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(strSet91);
        org.junit.Assert.assertNotNull(basicDBObject92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_requests" + "'", str47, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "localhost" + "'", str42, "localhost");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        docScoreSearchScript0.setNextScore((float) 32);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder25.mongoAdminUser;
        java.lang.String[] strArray55 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.util.Set<java.lang.String> strSet62 = builder60.getincludeFields();
        int int63 = builder60.getconnectTimeout();
        builder60.riverName = "index";
        builder60.mongoSSLVerifyCertificate = false;
        java.lang.String str68 = builder60.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder60.statisticsIndexName("password");
        boolean boolean71 = builder70.getadvancedTransformation();
        builder70.socketTimeout = 30000;
        java.lang.Object obj74 = docScoreSearchScript0.unwrap((java.lang.Object) 30000);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + 30000 + "'", obj74, 30000);
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoGridFS(false);
        builder11.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.dropCollection(false);
        builder11.socketTimeout = (byte) 10;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "flush_interval" + "'", str43, "flush_interval");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "include_fields" + "'", str44, "include_fields");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "concurrent_bulk_requests" + "'", str45, "concurrent_bulk_requests");
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("host", "connect_timeout", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?connect_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder7.mongoCollection("disable_index_refresh");
        boolean boolean61 = builder60.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int4 = builder3.getsocketTimeout();
        boolean boolean5 = builder3.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.advancedTransformation(false);
        builder3.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String str19 = builder18.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        boolean boolean25 = builder20.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int27 = builder26.getsocketTimeout();
        boolean boolean28 = builder26.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject33 = builder32.getmongoCollectionFilter();
        builder26.setmongoOplogFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder20.mongoCollectionFilter(basicDBObject33);
        builder18.setmongoCollectionFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.setmongoCollectionFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str48 = builder47.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject51 = builder50.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder41.mongoOplogFilter(basicDBObject51);
        builder40.mongoCollectionFilter = basicDBObject51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder18.mongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder3.mongoCollectionFilter(basicDBObject51);
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.script.ScriptService scriptService57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("port", "servers", riverSettings56, scriptService57);
        boolean boolean59 = mongoDBRiverDefinition58.mongoUseSSL;
        java.lang.String str60 = mongoDBRiverDefinition58.getFILTER_FIELD();
        com.mongodb.BasicDBObject basicDBObject61 = mongoDBRiverDefinition58.getMongoCollectionFilter();
        com.mongodb.MongoClientOptions mongoClientOptions62 = mongoDBRiverDefinition58.mongoClientOptions;
        java.lang.String str63 = mongoDBRiverDefinition58.getCREDENTIALS_FIELD();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "filter" + "'", str60, "filter");
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNull(mongoClientOptions62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "credentials" + "'", str63, "credentials");
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script_type" + "'", str48, "script_type");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "name" + "'", str50, "name");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder3.getscript();
        boolean boolean8 = builder3.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject16);
        java.lang.String str20 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.statisticsTypeName("bulk");
        builder22.storeStatistics = false;
        java.util.Set<java.lang.String> strSet25 = builder22.getexcludeFields();
        int int26 = builder22.getconnectTimeout();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_bulk_requests" + "'", str43, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.excludeFields;
        int int48 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int49 = mongoDBRiverDefinition39.getThrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1000 + "'", int48 == 1000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean54 = mongoDBRiverDefinition51.skipInitialImport;
        java.lang.String str55 = mongoDBRiverDefinition51.getSERVERS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue56 = mongoDBRiverDefinition51.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str57 = mongoDBRiverDefinition51.getTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp58 = mongoDBRiverDefinition51.initialTimestamp;
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "advanced_transformation" + "'", str53, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "servers" + "'", str55, "servers");
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(wildcardTimestamp58);
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        builder0.settypeName("throttle_size");
        boolean boolean14 = builder0.importAllCollections;
        builder0.advancedTransformation = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("concurrent_requests", "credentials", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?credentials?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = mongoDBRiverDefinition42.mongoSSLVerifyCertificate;
        java.lang.String str44 = mongoDBRiverDefinition42.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition42.getScriptType();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition42.includeFields;
        java.lang.String str47 = mongoDBRiverDefinition42.getFILTER_FIELD();
        boolean boolean48 = mongoDBRiverDefinition42.isDropCollection();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "initial_timestamp" + "'", str44, "initial_timestamp");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "filter" + "'", str47, "filter");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        java.lang.String str16 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.skipInitialImport(false);
        builder0.script = "type";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalUser("password");
        builder0.connectTimeout = 32;
        boolean boolean18 = builder0.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        java.util.Set<java.lang.String> strSet55 = builder0.getexcludeFields();
        java.lang.String str56 = builder0.riverIndexName;
        int int57 = builder0.getsocketTimeout();
        builder0.setscript("port");
        boolean boolean60 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.typeName("collection");
        builder7.setriverIndexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoUseSSL(false);
        builder7.setdropCollection(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.isMongos((java.lang.Boolean) true);
        builder1.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder1.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        builder1.mongoClientOptions = mongoClientOptions10;
        java.lang.String str12 = builder1.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder1.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        int int16 = builder14.getthrottleSize();
        java.util.Set<java.lang.String> strSet17 = builder14.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        builder18.throttleSize = 10;
        builder18.setsocketTimeout(10);
        java.lang.String[] strArray71 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        builder18.setparentTypes((java.util.Set<java.lang.String>) strSet72);
        java.lang.String str75 = builder18.getscript();
        com.mongodb.BasicDBObject basicDBObject76 = builder18.getmongoCollectionFilter();
        builder14.mongoOplogFilter = basicDBObject76;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder1.mongoCollectionFilter(basicDBObject76);
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject76);
        java.util.Map<java.lang.String, java.lang.Object> strMap80 = riverSettings79.settings();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap80);
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str45 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        int int48 = mongoDBRiverDefinition39.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoLocalUser("drop_collection");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        builder5.setdropCollection(false);
        builder5.setindexName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.setmongoDb("bulk_size");
        builder0.mongoSecondaryReadPreference = false;
        java.util.Set<java.lang.String> strSet11 = builder0.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        builder0.mongoSecondaryReadPreference = true;
        boolean boolean16 = builder0.storeStatistics;
        boolean boolean17 = builder0.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder10.getscript();
        java.lang.String str15 = builder10.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.indexName("index");
        builder19.setmongoAdminPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder25.mongoAdminUser;
        java.lang.String[] strArray55 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.lang.String str62 = mongoDBRiverDefinition61.getSIZE_FIELD();
        boolean boolean63 = mongoDBRiverDefinition61.disableIndexRefresh;
        java.lang.String str64 = mongoDBRiverDefinition61.getACTIONS_FIELD();
        java.lang.String str65 = mongoDBRiverDefinition61.statisticsTypeName;
        boolean boolean66 = mongoDBRiverDefinition61.isAdvancedTransformation();
        java.lang.String str67 = mongoDBRiverDefinition61.riverIndexName;
        java.lang.String str68 = mongoDBRiverDefinition61.getIS_MONGOS_FIELD();
        java.lang.String str69 = mongoDBRiverDefinition61.mongoAdminPassword;
        java.lang.String str70 = mongoDBRiverDefinition61.getSSL_CONNECTION_FIELD();
        java.lang.String str71 = mongoDBRiverDefinition61.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition61.parentTypes;
        builder19.setincludeFields(strSet72);
        builder5.setexcludeFields(strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder5.typeName("socket_timeout");
        org.bson.types.Binary binary77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.initialTimestamp(binary77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "size" + "'", str62, "size");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "actions" + "'", str64, "actions");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "is_mongos" + "'", str68, "is_mongos");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ssl" + "'", str70, "ssl");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "concurrent_requests" + "'", str71, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        builder0.setmongoLocalPassword("sandbox");
        boolean boolean58 = builder0.getimportAllCollections();
        boolean boolean59 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject60 = builder0.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(basicDBObject60);
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.setmongoCollectionFilter(basicDBObject8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.mongoOplogFilter(basicDBObject16);
        int int18 = builder6.throttleSize;
        java.lang.String str19 = builder6.getmongoLocalUser();
        int int20 = builder6.getsocketTimeout();
        int int21 = builder6.socketTimeout;
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.isMongos((java.lang.Boolean) true);
        java.lang.String str29 = builder23.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.mongoSSLVerifyCertificate(false);
        boolean boolean32 = builder31.getimportAllCollections();
        builder31.statisticsTypeName = ".scripts";
        java.lang.Object obj35 = docScoreSearchScript0.unwrap((java.lang.Object) builder31);
        builder31.mongoDb = "hi!";
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder15.getscript();
        boolean boolean20 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int22 = builder21.getsocketTimeout();
        boolean boolean23 = builder21.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder21.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder15.mongoCollectionFilter(basicDBObject28);
        builder8.setmongoCollectionFilter(basicDBObject28);
        builder8.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder8.mongoSecondaryReadPreference(true);
        java.lang.String str36 = builder35.getincludeCollection();
        java.lang.String str37 = builder35.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "import_all_collections" + "'", str36, "import_all_collections");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder0.mongoAdminPassword = "parent_types";
        java.lang.String str11 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        builder12.setskipInitialImport(false);
        builder12.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.mongoClientOptions(mongoClientOptions18);
        builder12.setmongoCollection("index");
        builder12.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str24 = builder12.mongoAdminUser;
        java.lang.String str25 = builder12.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        java.lang.String str30 = builder26.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder33.getscript();
        boolean boolean38 = builder33.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int40 = builder39.getsocketTimeout();
        boolean boolean41 = builder39.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str43 = builder42.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject46 = builder45.getmongoCollectionFilter();
        builder39.setmongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder33.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder32.mongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder12.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder0.mongoOplogFilter(basicDBObject46);
        com.mongodb.MongoClientOptions mongoClientOptions52 = null;
        builder51.setmongoClientOptions(mongoClientOptions52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder51.scriptType("credentials");
        boolean boolean56 = builder51.getmongoSSLVerifyCertificate();
        java.lang.String str57 = builder51.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "initial_timestamp" + "'", str24, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean41 = mongoDBRiverDefinition39.getimportAllCollections();
        boolean boolean42 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getRiverIndexName();
        java.lang.String str45 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "name" + "'", str43, "name");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "socket_timeout" + "'", str45, "socket_timeout");
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        boolean boolean46 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str48 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disable_index_refresh" + "'", str48, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        int int12 = builder0.socketTimeout;
        org.bson.types.BSONTimestamp bSONTimestamp13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.initialTimestamp(bSONTimestamp13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.disableIndexRefresh;
        java.lang.String str7 = builder0.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        builder0.setmongoSecondaryReadPreference(true);
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript10 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript10.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj14 = docScoreSearchScript10.unwrap((java.lang.Object) docScoreNativeScriptFactory13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.isMongos((java.lang.Boolean) true);
        java.lang.String str21 = builder15.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.mongoSSLVerifyCertificate(false);
        java.lang.String str24 = builder15.riverName;
        java.lang.String str25 = builder15.scriptType;
        builder15.statisticsTypeName = "secondary_read_preference";
        builder15.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder15.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject32 = builder15.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.isMongos((java.lang.Boolean) true);
        java.lang.String str40 = builder34.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder34.mongoSSLVerifyCertificate(false);
        builder42.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.throttleSize(10);
        builder42.script = "index";
        builder42.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str52 = mongoDBRiverDefinition51.statisticsTypeName;
        boolean boolean53 = mongoDBRiverDefinition51.getmongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition51.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript55 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        builder0.setmongoOplogFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.importAllCollections(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(executableScript55);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder8.mongoAdminUser;
        java.lang.String[] strArray38 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.util.Set<java.lang.String> strSet45 = builder43.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject46 = builder43.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = riverSettings47.settings();
        org.elasticsearch.script.ScriptService scriptService49 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script_type", "socket_timeout", riverSettings47, scriptService49);
        org.elasticsearch.script.ScriptService scriptService51 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("include_collection", "filter", riverSettings47, scriptService51);
        org.elasticsearch.common.settings.Settings settings53 = riverSettings47.globalSettings();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition50);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition52);
        org.junit.Assert.assertNull(settings53);
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder15.getscript();
        boolean boolean20 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int22 = builder21.getsocketTimeout();
        boolean boolean23 = builder21.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder21.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder15.mongoCollectionFilter(basicDBObject28);
        builder8.setmongoCollectionFilter(basicDBObject28);
        builder8.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder8.mongoSecondaryReadPreference(true);
        java.lang.String str36 = builder35.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.connectTimeout((-1));
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "import_all_collections" + "'", str36, "import_all_collections");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(mongoClientOptions39);
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        builder11.mongoDb = "";
        java.util.Set<java.lang.String> strSet15 = builder11.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.scriptType("script.disable_dynamic");
        builder17.setmongoCollection("socket_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.isStoreStatistics();
        boolean boolean45 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str46 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.typeName;
        boolean boolean49 = mongoDBRiverDefinition39.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "size" + "'", str46, "size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "db" + "'", str47, "db");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder36.throttleSize = (byte) 100;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp39 = builder36.initialTimestamp;
        java.lang.String str40 = builder36.getincludeCollection();
        org.bson.types.Binary binary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.initialTimestamp(binary41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(wildcardTimestamp39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos;
        int int47 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str49 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "import_all_collections" + "'", str45, "import_all_collections");
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 30000 + "'", int47 == 30000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "options" + "'", str49, "options");
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.setmongoAdminUser("script");
        builder0.statisticsIndexName = ".scripts";
        boolean boolean11 = builder0.importAllCollections;
        builder0.advancedTransformation = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.includeCollection("hi!");
        java.lang.String str8 = builder7.riverIndexName;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "flush_interval" + "'", str43, "flush_interval");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "host" + "'", str44, "host");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gridfs" + "'", str45, "gridfs");
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean41 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str42 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "flush_interval" + "'", str42, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "drop_collection" + "'", str44, "drop_collection");
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.setsocketTimeout((int) (short) -1);
        java.lang.String str26 = builder23.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str43 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "db" + "'", str43, "db");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "socket_timeout" + "'", str44, "socket_timeout");
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsIndexName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(true);
        builder18.setmongoSSLVerifyCertificate(true);
        java.lang.String str21 = builder18.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.lang.String str2 = builder0.gettypeName();
        boolean boolean3 = builder0.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.importAllCollections(true);
        java.lang.String str17 = builder16.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str47 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "admin" + "'", str47, "admin");
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean43 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean44 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        int int46 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.typeName("collection");
        builder7.setriverIndexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoUseSSL(false);
        builder11.riverName = "ssl";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("store_statistics");
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder0.mongoClientOptions = mongoClientOptions6;
        builder0.importAllCollections = true;
        com.mongodb.BasicDBObject basicDBObject10 = builder0.mongoOplogFilter;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        builder16.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.throttleSize(30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder21.setmongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.mongoUseSSL(true);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "skip_initial_import", "name", "size", "script.disable_dynamic", "bulk", "actions", "flush_interval", "script", "filter", "concurrent_requests", "parent_types", "bulk_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder21.setexcludeFields((java.util.Set<java.lang.String>) strSet41);
        java.lang.String str44 = builder21.getmongoLocalPassword();
        builder21.setscriptType("");
        builder21.mongoLocalPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder49.indexName("credentials");
        java.lang.String str53 = builder52.mongoAdminUser;
        java.lang.String[] strArray82 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder52.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition88 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder87);
        java.lang.String str89 = mongoDBRiverDefinition88.getSIZE_FIELD();
        int int90 = mongoDBRiverDefinition88.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str91 = mongoDBRiverDefinition88.getStatisticsTypeName();
        boolean boolean92 = mongoDBRiverDefinition88.isMongoSSLVerifyCertificate();
        java.lang.String str93 = mongoDBRiverDefinition88.getHOST_FIELD();
        java.lang.String str94 = mongoDBRiverDefinition88.getIS_MONGOS_FIELD();
        com.mongodb.BasicDBObject basicDBObject95 = mongoDBRiverDefinition88.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet96 = mongoDBRiverDefinition88.parentTypes;
        builder21.excludeFields = strSet96;
        builder16.setparentTypes(strSet96);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "size" + "'", str89, "size");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 30000 + "'", int90 == 30000);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "host" + "'", str93, "host");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "is_mongos" + "'", str94, "is_mongos");
        org.junit.Assert.assertNull(basicDBObject95);
        org.junit.Assert.assertNotNull(strSet96);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("store_statistics");
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str13 = mongoDBRiverDefinition12.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getRiverIndexName();
        java.lang.String str15 = mongoDBRiverDefinition12.getBULK_FIELD();
        int int16 = mongoDBRiverDefinition12.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondary_read_preference" + "'", str13, "secondary_read_preference");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk" + "'", str15, "bulk");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str48 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean50 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_bulk_requests" + "'", str48, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "initial_timestamp" + "'", str51, "initial_timestamp");
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.includeCollection("ssl_verify_certificate");
        java.lang.String str10 = builder5.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("exclude_fields", "hi!");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?hi!?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getHOST_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.isMongoUseSSL();
        boolean boolean43 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "host" + "'", str41, "host");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.elasticsearch.common.unit.TimeValue timeValue41 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str42 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "credentials" + "'", str42, "credentials");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        boolean boolean45 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str48 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = mongoDBRiverDefinition39.getInitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "advanced_transformation" + "'", str48, "advanced_transformation");
        org.junit.Assert.assertNull(wildcardTimestamp49);
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        builder0.setmongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.indexName("script.default_lang");
        builder5.setscript("concurrent_requests");
        java.lang.String str8 = builder5.mongoLocalPassword;
        java.lang.String str9 = builder5.mongoLocalUser;
        builder5.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.scriptType;
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str47 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_requests" + "'", str43, "concurrent_requests");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "socket_timeout" + "'", str46, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "socket_timeout" + "'", str47, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        int int44 = mongoDBRiverDefinition39.throttleSize;
        int int45 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str46 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "store_statistics" + "'", str43, "store_statistics");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "throttle_size" + "'", str46, "throttle_size");
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        int int46 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 30000 + "'", int46 == 30000);
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        builder0.isMongos = true;
        java.lang.String str10 = builder0.includeCollection;
        java.lang.String str11 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsIndexName("type");
        java.lang.String str17 = builder14.includeCollection;
        boolean boolean18 = builder14.advancedTransformation;
        boolean boolean19 = builder14.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int49 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str50 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str51 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        int int52 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean53 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str54 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "bulk_size" + "'", str51, "bulk_size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "include_fields" + "'", str54, "include_fields");
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str47 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isMongoGridFS();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str51 = mongoDBRiverDefinition39.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "collection" + "'", str47, "collection");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean44 = mongoDBRiverDefinition39.mongoGridFS;
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.getMongoServers();
        com.mongodb.MongoClientOptions mongoClientOptions46 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertNull(mongoClientOptions46);
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str43 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "is_mongos" + "'", str43, "is_mongos");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "drop_collection" + "'", str44, "drop_collection");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        boolean boolean12 = builder3.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.importAllCollections(false);
        boolean boolean15 = builder14.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("advanced_transformation");
        boolean boolean8 = builder0.getmongoSecondaryReadPreference();
        builder0.setindexName("flush_interval");
        java.lang.String str11 = builder0.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        boolean boolean9 = builder3.dropCollection;
        boolean boolean10 = builder3.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.statisticsTypeName;
        java.lang.String str19 = mongoDBRiverDefinition17.getSCRIPT_FIELD();
        boolean boolean20 = mongoDBRiverDefinition17.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("port", "user", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?user?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean47 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getExcludeFields();
        java.lang.String str49 = mongoDBRiverDefinition39.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        builder0.setsocketTimeout((int) '4');
        builder0.setskipInitialImport(false);
        builder0.setdropCollection(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.getmongoLocalPassword();
        builder0.socketTimeout = ' ';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        boolean boolean14 = builder12.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        builder12.setmongoOplogFilter(basicDBObject19);
        builder12.throttleSize = 10;
        builder12.setsocketTimeout(10);
        java.lang.String[] strArray65 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder12.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        java.lang.String str69 = builder12.getscript();
        com.mongodb.BasicDBObject basicDBObject70 = builder12.getmongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject71 = builder12.getmongoOplogFilter();
        java.util.Set<java.lang.String> strSet72 = builder12.parentTypes;
        builder0.parentTypes = strSet72;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(strSet72);
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.advancedTransformation(true);
        boolean boolean16 = builder8.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.riverIndexName = "include_fields";
        builder36.setmongoGridFS(true);
        boolean boolean43 = builder36.storeStatistics;
        builder36.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = builder36.build();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp47 = mongoDBRiverDefinition46.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition46);
        org.junit.Assert.assertNull(wildcardTimestamp47);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "advanced_transformation" + "'", str44, "advanced_transformation");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "initial_timestamp" + "'", str44, "initial_timestamp");
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.connectTimeout((int) (byte) -1);
        java.lang.String str12 = builder9.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        builder9.mongoClientOptions = mongoClientOptions13;
        java.lang.String str15 = builder9.typeName;
        builder9.script = "size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder0.getmongoServers();
        builder0.importAllCollections = false;
        builder0.setmongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        builder0.riverIndexName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.includeCollection("password");
        builder58.setsocketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = builder58.build();
        java.lang.String str62 = mongoDBRiverDefinition61.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "collection" + "'", str62, "collection");
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str47 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "servers" + "'", str47, "servers");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "name" + "'", str48, "name");
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        java.lang.String str10 = builder7.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.isMongos((java.lang.Boolean) true);
        java.lang.String str17 = builder11.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.mongoSSLVerifyCertificate(false);
        java.lang.String str20 = builder19.mongoAdminPassword;
        boolean boolean21 = builder19.getstoreStatistics();
        int int22 = builder19.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoLocalUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.script("flush_interval");
        java.util.Set<java.lang.String> strSet27 = builder26.getexcludeFields();
        builder26.setsocketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.isMongos((java.lang.Boolean) true);
        java.lang.String str36 = builder30.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.mongoSSLVerifyCertificate(false);
        builder38.setincludeCollection("import_all_collections");
        builder38.setconnectTimeout(8);
        builder38.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.advancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        builder46.mongoClientOptions = mongoClientOptions47;
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str51 = builder50.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.indexName("credentials");
        java.lang.String str54 = builder53.mongoAdminUser;
        java.lang.String[] strArray83 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder53.parentTypes((java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition89 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder88);
        java.lang.String str90 = mongoDBRiverDefinition89.getSIZE_FIELD();
        java.lang.String str91 = mongoDBRiverDefinition89.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str92 = mongoDBRiverDefinition89.getINDEX_OBJECT();
        int int93 = mongoDBRiverDefinition89.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str94 = mongoDBRiverDefinition89.getNAME_FIELD();
        java.lang.String str95 = mongoDBRiverDefinition89.getINCLUDE_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet96 = mongoDBRiverDefinition89.parentTypes;
        builder46.setincludeFields(strSet96);
        builder26.setincludeFields(strSet96);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder7.excludeFields(strSet96);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "size" + "'", str90, "size");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "skip_initial_import" + "'", str91, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "index" + "'", str92, "index");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 60000 + "'", int93 == 60000);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "name" + "'", str94, "name");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "include_collection" + "'", str95, "include_collection");
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        int int44 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean45 = mongoDBRiverDefinition39.getmongoUseSSL();
        boolean boolean46 = mongoDBRiverDefinition39.isAdvancedTransformation();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(basicDBObject47);
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder0.setmongoClientOptions(mongoClientOptions12);
        java.lang.String str14 = builder0.getmongoAdminPassword();
        java.lang.Boolean boolean15 = builder0.isMongos;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl_verify_certificate" + "'", str44, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl_verify_certificate" + "'", str48, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1000 + "'", int49 == 1000);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.connectTimeout = 27017;
        java.lang.String str8 = builder0.riverIndexName;
        java.lang.String str9 = builder0.getmongoLocalPassword();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder3.getscript();
        boolean boolean8 = builder3.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.common.settings.Settings settings20 = riverSettings19.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = riverSettings19.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = riverSettings19.settings();
        org.elasticsearch.script.ScriptService scriptService23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("password", "user", riverSettings19, scriptService23);
        org.elasticsearch.common.settings.Settings settings25 = riverSettings19.globalSettings();
        org.elasticsearch.common.settings.Settings settings26 = riverSettings19.globalSettings();
        org.elasticsearch.common.settings.Settings settings27 = riverSettings19.globalSettings();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(settings20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNull(settings25);
        org.junit.Assert.assertNull(settings26);
        org.junit.Assert.assertNull(settings27);
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.initialTimestamp;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str47 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "gridfs" + "'", str47, "gridfs");
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.apache.lucene.search.Scorer scorer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.indexName;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoOplogFilter();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean50 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "advanced_transformation" + "'", str48, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "null.null" + "'", str49, "null.null");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str44 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "password" + "'", str44, "password");
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean48 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "initial_timestamp" + "'", str49, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "collection" + "'", str50, "collection");
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        java.lang.String str12 = builder7.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.skipInitialImport(true);
        boolean boolean15 = builder14.getmongoSecondaryReadPreference();
        builder14.setriverName("password");
        builder14.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.storeStatistics(false);
        builder21.riverName = "";
        java.lang.Object obj24 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            double double25 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "" + "'", obj4, "");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "" + "'", obj24, "");
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str45 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger46 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverIndexName();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "bulk_timeout" + "'", str45, "bulk_timeout");
        org.junit.Assert.assertNotNull(eSLogger46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj19 = null;
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", obj19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource(strMap21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        int int47 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        int int50 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 30000 + "'", int50 == 30000);
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str51 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str52 = mongoDBRiverDefinition39.getPORT_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "port" + "'", str52, "port");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "options" + "'", str45, "options");
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        java.util.Set<java.lang.String> strSet8 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.indexName("index");
        java.lang.String str11 = builder10.getincludeCollection();
        boolean boolean12 = builder10.storeStatistics;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition12.getInitialTimestamp();
        java.lang.String str15 = mongoDBRiverDefinition12.getOPTIONS_FIELD();
        boolean boolean16 = mongoDBRiverDefinition12.isDisableIndexRefresh();
        boolean boolean17 = mongoDBRiverDefinition12.isSkipInitialImport();
        java.lang.String str18 = mongoDBRiverDefinition12.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "options" + "'", str15, "options");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "concurrent_bulk_requests" + "'", str18, "concurrent_bulk_requests");
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getBULK_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("user");
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        int int14 = builder12.getthrottleSize();
        java.util.Set<java.lang.String> strSet15 = builder12.parentTypes;
        builder12.mongoLocalUser = "";
        builder12.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet20 = null;
        builder12.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder22.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.scriptType("index");
        builder28.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject31 = builder28.getmongoCollectionFilter();
        builder12.setmongoCollectionFilter(basicDBObject31);
        builder0.mongoOplogFilter = basicDBObject31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.indexName("credentials");
        java.lang.String str38 = builder37.mongoAdminUser;
        java.lang.String[] strArray67 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        java.lang.String str74 = mongoDBRiverDefinition73.getSIZE_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition73.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str76 = mongoDBRiverDefinition73.getINDEX_OBJECT();
        java.lang.String str77 = mongoDBRiverDefinition73.script;
        java.lang.String str78 = mongoDBRiverDefinition73.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition73.mongoCollectionFilter;
        builder0.mongoCollectionFilter = basicDBObject79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.riverIndexName("gridfs");
        com.mongodb.BasicDBObject basicDBObject83 = builder82.mongoCollectionFilter;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "size" + "'", str74, "size");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "skip_initial_import" + "'", str75, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "index" + "'", str76, "index");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(basicDBObject83);
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = builder33.getmongoServers();
        builder33.setskipInitialImport(false);
        java.lang.String str37 = builder33.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.indexName("credentials");
        java.lang.String str42 = builder41.mongoAdminUser;
        java.lang.String[] strArray71 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.parentTypes((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        boolean boolean78 = mongoDBRiverDefinition77.getmongoSecondaryReadPreference();
        java.lang.String str79 = mongoDBRiverDefinition77.mongoAdminPassword;
        java.lang.String str80 = mongoDBRiverDefinition77.getIndexName();
        boolean boolean81 = mongoDBRiverDefinition77.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject82 = mongoDBRiverDefinition77.mongoCollectionFilter;
        builder33.mongoCollectionFilter = basicDBObject82;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "credentials" + "'", str80, "credentials");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(basicDBObject82);
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder0.getmongoServers();
        builder0.mongoLocalPassword = "store_statistics";
        builder0.isMongos = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.scriptType("size");
        java.lang.String str20 = builder8.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        boolean boolean10 = builder8.getstoreStatistics();
        int int11 = builder8.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoLocalUser("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.script("flush_interval");
        java.util.Set<java.lang.String> strSet16 = builder8.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        int int15 = mongoDBRiverDefinition14.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition14.advancedTransformation;
        java.lang.String str17 = mongoDBRiverDefinition14.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition14.getIncludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "user" + "'", str17, "user");
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str43 = mongoDBRiverDefinition39.script;
        boolean boolean44 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str46 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl_verify_certificate" + "'", str44, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "type" + "'", str48, "type");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "options" + "'", str49, "options");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "skip_initial_import", "name", "size", "script.disable_dynamic", "bulk", "actions", "flush_interval", "script", "filter", "concurrent_requests", "parent_types", "bulk_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet20);
        builder0.riverName = "port";
        int int25 = builder0.connectTimeout;
        builder0.settypeName("null.null");
        java.lang.String str28 = builder0.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean48 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        java.lang.String str45 = builder36.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("script", "store_statistics");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?store_statistics?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        boolean boolean45 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        builder0.scriptType = "ssl";
        builder0.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder0.initialTimestamp;
        builder0.setmongoLocalUser("script_type.null");
        java.util.Set<java.lang.String> strSet30 = builder0.getparentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(wildcardTimestamp27);
        org.junit.Assert.assertNull(strSet30);
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.riverIndexName = "include_fields";
        builder36.setmongoGridFS(true);
        boolean boolean43 = builder36.storeStatistics;
        builder36.riverIndexName = "ssl";
        builder36.mongoAdminPassword = "connect_timeout";
        builder36.throttleSize = 'a';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder36.dropCollection(true);
        builder51.mongoDb = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder3.getmongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject5 = builder3.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(basicDBObject5);
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp4 = builder0.getinitialTimestamp();
        builder0.mongoLocalUser = "socket_timeout";
        java.lang.String str7 = builder0.mongoAdminUser;
        builder0.includeCollection = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("bulk_timeout");
        builder0.mongoDb = "import_all_collections";
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(wildcardTimestamp4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.storeStatistics;
        int int46 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1000 + "'", int46 == 1000);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.dropCollection(false);
        boolean boolean8 = builder7.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder7.getmongoClientOptions();
        java.lang.String str10 = builder7.mongoLocalPassword;
        java.lang.String str11 = builder7.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        java.lang.String str20 = builder16.getscript();
        java.lang.String str21 = builder16.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.skipInitialImport(true);
        boolean boolean24 = builder23.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder33.getscript();
        java.lang.String str38 = builder33.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(true);
        boolean boolean41 = builder40.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str47 = builder46.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.indexName("credentials");
        java.lang.String str50 = builder49.mongoAdminUser;
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder49.parentTypes((java.util.Set<java.lang.String>) strSet80);
        builder45.includeFields = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet80);
        builder85.mongoLocalPassword = "gridfs";
        builder85.setindexName("name");
        builder85.setmongoAdminPassword("skip_initial_import");
        boolean boolean92 = builder85.skipInitialImport;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        boolean boolean44 = mongoDBRiverDefinition39.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder36.throttleSize = (byte) 100;
        com.mongodb.BasicDBObject basicDBObject39 = builder36.mongoOplogFilter;
        java.lang.String str40 = builder36.mongoDb;
        builder36.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.scriptType("options");
        boolean boolean45 = builder36.mongoSecondaryReadPreference;
        java.lang.String str46 = builder36.script;
        builder36.setincludeCollection("include_collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(basicDBObject39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.lang.String str9 = builder0.includeCollection;
        java.util.Set<java.lang.String> strSet10 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.includeCollection("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        builder7.setriverName("password");
        java.util.Set<java.lang.String> strSet11 = builder7.getexcludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder7.mongoServers;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder7.getmongoClientOptions();
        java.lang.String str14 = builder7.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "credentials" + "'", str14, "credentials");
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.skipInitialImport(true);
        builder8.setscript("bulk_size");
        java.lang.String str14 = builder8.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.connectTimeout((int) (byte) 1);
        boolean boolean17 = builder16.mongoUseSSL;
        builder16.setmongoLocalUser("ssl");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.connectTimeout(27017);
        int int44 = builder38.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.importAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.includeCollection("localhost");
        builder7.setmongoSecondaryReadPreference(false);
        java.lang.String str14 = builder7.getmongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = mongoDBRiverDefinition51.getdropCollection();
        java.lang.String str53 = mongoDBRiverDefinition51.getGRIDFS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition51.getSSL_VERIFY_CERT_FIELD();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) str54);
        java.lang.Object obj57 = null;
        docScoreSearchScript0.setNextVar("connect_timeout", obj57);
        docScoreSearchScript0.setNextScore((float) 1);
        docScoreSearchScript0.setNextScore((float) 30000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int64 = builder63.getsocketTimeout();
        builder63.setskipInitialImport(false);
        builder63.mongoAdminUser = "initial_timestamp";
        builder63.script = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder63.mongoAdminUser("user");
        java.util.Set<java.lang.String> strSet73 = builder72.getparentTypes();
        java.lang.String str74 = builder72.getstatisticsIndexName();
        java.lang.Boolean boolean75 = builder72.getisMongos();
        java.lang.Object obj76 = docScoreSearchScript0.unwrap((java.lang.Object) boolean75);
        docScoreSearchScript0.setNextScore((float) 0L);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gridfs" + "'", str53, "gridfs");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ssl_verify_certificate" + "'", str54, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "ssl_verify_certificate" + "'", obj55, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.statisticsIndexName;
        int int61 = builder59.getthrottleSize();
        java.util.Set<java.lang.String> strSet62 = builder59.parentTypes;
        builder59.mongoLocalUser = "";
        builder59.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet67 = null;
        builder59.parentTypes = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str70 = builder69.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder69.indexName("credentials");
        java.lang.String str73 = builder69.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder69.scriptType("index");
        builder75.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject78 = builder75.getmongoCollectionFilter();
        builder59.setmongoCollectionFilter(basicDBObject78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder0.mongoOplogFilter(basicDBObject78);
        boolean boolean81 = builder80.getstoreStatistics();
        builder80.setmongoCollection("size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(basicDBObject78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject41 = builder38.mongoCollectionFilter;
        builder38.throttleSize = 1;
        boolean boolean44 = builder38.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject45 = builder38.getmongoOplogFilter();
        java.util.Set<java.lang.String> strSet46 = builder38.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertNull(strSet46);
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getExcludeFields();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str45 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "localhost" + "'", str45, "localhost");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder8.mongoAdminUser;
        java.lang.String[] strArray38 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.lang.String str45 = mongoDBRiverDefinition44.getSIZE_FIELD();
        boolean boolean46 = mongoDBRiverDefinition44.disableIndexRefresh;
        boolean boolean47 = mongoDBRiverDefinition44.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition44.getMongoCollectionFilter();
        java.lang.String str49 = mongoDBRiverDefinition44.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition44.getScriptType();
        java.lang.Object obj51 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition44);
        java.lang.String str52 = mongoDBRiverDefinition44.getMongoCollection();
        boolean boolean53 = mongoDBRiverDefinition44.getstoreStatistics();
        java.lang.String str54 = mongoDBRiverDefinition44.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean55 = mongoDBRiverDefinition44.advancedTransformation;
        java.lang.String str56 = mongoDBRiverDefinition44.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "advanced_transformation" + "'", str54, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "store_statistics" + "'", str56, "store_statistics");
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean50 = mongoDBRiverDefinition39.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalUser("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.indexName("include_collection");
        java.lang.Boolean boolean18 = builder17.isMongos;
        builder17.mongoCollection = "connect_timeout";
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder17.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(serverAddressList21);
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoGridFS(false);
        builder11.setmongoAdminUser("local");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str48 = mongoDBRiverDefinition39.getRiverName();
        boolean boolean49 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str50 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "store_statistics" + "'", str50, "store_statistics");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str48 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "localhost" + "'", str48, "localhost");
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getScriptType();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.String str45 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "name" + "'", str45, "name");
        org.junit.Assert.assertNull(boolean46);
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject4 = builder0.mongoCollectionFilter;
        builder0.mongoGridFS = true;
        int int7 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        boolean boolean50 = mongoDBRiverDefinition47.isMongoGridFS();
        java.lang.String str51 = mongoDBRiverDefinition47.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue52 = mongoDBRiverDefinition47.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition47.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition47.getMongoDb();
        boolean boolean56 = mongoDBRiverDefinition47.getdisableIndexRefresh();
        java.lang.String str57 = mongoDBRiverDefinition47.getSOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition47.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.excludeFields(strSet58);
        builder59.setmongoGridFS(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "socket_timeout" + "'", str57, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean46 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str48 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getStatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "drop_collection" + "'", str48, "drop_collection");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.mongoGridFS = true;
        java.lang.String str8 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.scriptType("script.disable_dynamic");
        boolean boolean11 = builder10.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.scriptType("index");
        builder18.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject21 = builder18.getmongoCollectionFilter();
        builder18.setdisableIndexRefresh(true);
        builder18.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder26.isMongos((java.lang.Boolean) true);
        java.lang.String str32 = builder26.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder26.mongoSSLVerifyCertificate(false);
        java.lang.String str35 = builder34.getmongoCollection();
        java.lang.String[] strArray50 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder10.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getTypeName();
        org.elasticsearch.common.logging.ESLogger eSLogger50 = mongoDBRiverDefinition39.getlogger();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "servers" + "'", str48, "servers");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(eSLogger50);
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        builder3.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        builder10.mongoGridFS = true;
        java.lang.String str18 = builder10.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.scriptType("index");
        builder25.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder31.mongoAdminUser;
        java.lang.String[] strArray61 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder31.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        boolean boolean68 = mongoDBRiverDefinition67.getdropCollection();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition67.getParentTypes();
        builder25.parentTypes = strSet69;
        builder10.setexcludeFields(strSet69);
        builder3.setincludeFields(strSet69);
        java.lang.String str73 = builder3.getscript();
        int int74 = builder3.getsocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        com.mongodb.BasicDBObject basicDBObject55 = builder54.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.connectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.mongoCollection("localhost");
        builder54.mongoCollection = "flush_interval";
        builder54.setscript("drop_collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject41 = builder38.mongoCollectionFilter;
        builder38.throttleSize = 1;
        boolean boolean44 = builder38.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject45 = builder38.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder38.importAllCollections(true);
        java.lang.String str48 = builder47.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str11 = builder5.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoSSLVerifyCertificate(false);
        java.lang.String str14 = builder5.riverName;
        java.lang.String str15 = builder5.scriptType;
        builder5.statisticsTypeName = "secondary_read_preference";
        builder5.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject22 = builder5.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        java.lang.String str28 = builder24.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.scriptType("index");
        builder30.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject33 = builder30.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int36 = builder35.getsocketTimeout();
        boolean boolean37 = builder35.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.advancedTransformation(false);
        java.lang.String str40 = builder35.riverName;
        builder35.setmongoSecondaryReadPreference(true);
        com.mongodb.BasicDBObject basicDBObject43 = builder35.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject43);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(executableScript44);
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str48 = mongoDBRiverDefinition39.getStatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        int int12 = builder10.getthrottleSize();
        java.util.Set<java.lang.String> strSet13 = builder10.parentTypes;
        builder10.mongoLocalUser = "";
        builder10.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        boolean boolean62 = mongoDBRiverDefinition59.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject63 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        builder10.mongoCollectionFilter = basicDBObject63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder7.mongoOplogFilter(basicDBObject63);
        builder7.setmongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.setmongoClientOptions(mongoClientOptions7);
        builder0.setmongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("script.default_lang", "options");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?options?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.riverIndexName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.dropCollection(true);
        java.lang.String str47 = builder46.includeCollection;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        builder7.scriptType = "script.disable_dynamic";
        boolean boolean15 = builder7.getmongoUseSSL();
        java.lang.String str16 = builder7.getmongoCollection();
        builder7.riverIndexName = "skip_initial_import";
        int int19 = builder7.getthrottleSize();
        builder7.connectTimeout = 0;
        builder7.setdropCollection(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.typeName("collection");
        java.lang.String str8 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder3.mongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "collection" + "'", str8, "collection");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean41 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getUSER_FIELD();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str46 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "import_all_collections" + "'", str43, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "user" + "'", str44, "user");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 30000 + "'", int45 == 30000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "disable_index_refresh" + "'", str46, "disable_index_refresh");
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = mongoDBRiverDefinition42.mongoSSLVerifyCertificate;
        boolean boolean44 = mongoDBRiverDefinition42.getmongoSSLVerifyCertificate();
        java.lang.String str45 = mongoDBRiverDefinition42.script;
        java.lang.String str46 = mongoDBRiverDefinition42.getRiverIndexName();
        boolean boolean47 = mongoDBRiverDefinition42.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.dropCollection(false);
        builder7.setthrottleSize(100);
        boolean boolean10 = builder7.mongoSecondaryReadPreference;
        builder7.indexName = "name";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        builder0.typeName = "script_type";
        java.lang.String str7 = builder0.getscriptType();
        boolean boolean8 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminPassword(".scripts");
        builder10.statisticsIndexName = "script.default_lang";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        int int12 = builder10.getthrottleSize();
        java.util.Set<java.lang.String> strSet13 = builder10.parentTypes;
        builder10.mongoLocalUser = "";
        builder10.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        boolean boolean62 = mongoDBRiverDefinition59.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject63 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        builder10.mongoCollectionFilter = basicDBObject63;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder7.mongoOplogFilter(basicDBObject63);
        java.util.Set<java.lang.String> strSet66 = builder7.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder7.connectTimeout((int) (byte) 0);
        builder68.setstoreStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder12.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.disableIndexRefresh(true);
        builder12.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.advancedTransformation(true);
        java.lang.String[] strArray57 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder22.parentTypes = strSet58;
        builder0.excludeFields = strSet58;
        java.util.Set<java.lang.String> strSet62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.parentTypes(strSet62);
        java.lang.String str64 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder0.typeName("advanced_transformation");
        builder66.setskipInitialImport(true);
        builder66.mongoCollection = "disable_index_refresh";
        boolean boolean71 = builder66.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setadvancedTransformation(false);
        boolean boolean9 = builder6.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.riverIndexName("script.disable_dynamic");
        java.lang.String str14 = builder13.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject15 = builder13.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(basicDBObject15);
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject58 = builder57.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = builder57.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.disableIndexRefresh(true);
        docScoreSearchScript0.setNextVar("is_mongos", (java.lang.Object) builder57);
        builder57.mongoLocalPassword = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str68 = builder67.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.indexName("credentials");
        java.lang.String str71 = builder67.getscript();
        boolean boolean72 = builder67.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int74 = builder73.getsocketTimeout();
        boolean boolean75 = builder73.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str77 = builder76.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject80 = builder79.getmongoCollectionFilter();
        builder73.setmongoOplogFilter(basicDBObject80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder67.mongoCollectionFilter(basicDBObject80);
        boolean boolean83 = builder67.getmongoSecondaryReadPreference();
        boolean boolean84 = builder67.storeStatistics;
        java.lang.String str85 = builder67.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder67.mongoAdminPassword("is_mongos");
        com.mongodb.BasicDBObject basicDBObject88 = builder87.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder57.mongoOplogFilter(basicDBObject88);
        boolean boolean90 = builder89.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder89.mongoDb("actions");
        java.lang.String str93 = builder89.riverIndexName;
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        boolean boolean11 = builder3.disableIndexRefresh;
        java.lang.String str12 = builder3.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str46 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "advanced_transformation" + "'", str46, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "localhost" + "'", str48, "localhost");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ssl_verify_certificate" + "'", str50, "ssl_verify_certificate");
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverIndexName();
        java.lang.Class<?> wildcardClass44 = mongoDBRiverDefinition39.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "credentials" + "'", str41, "credentials");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        int int8 = builder0.getthrottleSize();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder0.mongoServers;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(serverAddressList9);
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.statisticsIndexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.mongoOplogFilter;
        java.lang.String str11 = builder9.getstatisticsIndexName();
        boolean boolean12 = builder9.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.isMongos((java.lang.Boolean) true);
        java.lang.String str11 = builder5.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoSSLVerifyCertificate(false);
        builder13.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.throttleSize(10);
        builder13.script = "index";
        builder13.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder13.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder13.mongoLocalUser("password");
        builder26.setskipInitialImport(false);
        java.lang.String str29 = builder26.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder26.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.indexName("credentials");
        java.lang.String str36 = builder32.getscript();
        boolean boolean37 = builder32.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet38 = builder32.parentTypes;
        builder32.settypeName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder44.mongoAdminUser;
        java.lang.String[] strArray74 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder44.parentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        java.util.Set<java.lang.String> strSet81 = builder79.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject82 = builder79.mongoCollectionFilter;
        builder32.setmongoOplogFilter(basicDBObject82);
        builder31.setmongoOplogFilter(basicDBObject82);
        builder0.mongoOplogFilter = basicDBObject82;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(strSet81);
        org.junit.Assert.assertNotNull(basicDBObject82);
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("import_all_collections", "password");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?password?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.statisticsTypeName("skip_initial_import");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.Boolean boolean48 = mongoDBRiverDefinition39.isMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(boolean48);
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.scriptType("script_type");
        java.lang.String str34 = builder33.getriverName();
        builder33.setmongoCollection("index");
        com.mongodb.BasicDBObject basicDBObject37 = builder33.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(basicDBObject37);
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("", "user", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?user?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.storeStatistics(true);
        int int12 = builder11.getconnectTimeout();
        java.lang.String str13 = builder11.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.socketTimeout(10);
        builder11.mongoGridFS = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.storeStatistics(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder7.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.isMongos((java.lang.Boolean) true);
        java.lang.String str19 = builder13.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.mongoSSLVerifyCertificate(false);
        java.lang.String str22 = builder13.riverName;
        java.lang.String str23 = builder13.scriptType;
        builder13.statisticsTypeName = "secondary_read_preference";
        builder13.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder13.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject30 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder7.mongoOplogFilter(basicDBObject30);
        boolean boolean32 = builder7.getstoreStatistics();
        builder7.script = "initial_timestamp";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        java.util.Set<java.lang.String> strSet9 = builder0.getexcludeFields();
        builder0.typeName = "local";
        java.lang.String str12 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.indexName("localhost");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos;
        boolean boolean46 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.disableIndexRefresh(false);
        builder11.mongoLocalUser = "flush_interval";
        builder11.setmongoLocalUser("ssl_verify_certificate");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.String str45 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "include_collection" + "'", str45, "include_collection");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "localhost" + "'", str46, "localhost");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_requests" + "'", str47, "concurrent_requests");
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean48 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder14.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        boolean boolean26 = builder21.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int28 = builder27.getsocketTimeout();
        boolean boolean29 = builder27.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject34 = builder33.getmongoCollectionFilter();
        builder27.setmongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder21.mongoCollectionFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder20.mongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.mongoCollectionFilter(basicDBObject34);
        boolean boolean39 = builder38.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.isMongos((java.lang.Boolean) true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.getmongoClientOptions();
        boolean boolean43 = builder41.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.dropCollection(false);
        boolean boolean8 = builder7.getskipInitialImport();
        java.lang.String str9 = builder7.getriverIndexName();
        builder7.setstatisticsIndexName("password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.indexName;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos;
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition39.mongoServers;
        int int49 = mongoDBRiverDefinition39.getSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        builder7.scriptType = "script.disable_dynamic";
        boolean boolean15 = builder7.getmongoUseSSL();
        java.lang.String str16 = builder7.getmongoCollection();
        builder7.riverIndexName = "skip_initial_import";
        boolean boolean19 = builder7.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        builder7.mongoClientOptions = mongoClientOptions20;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder8.setmongoClientOptions(mongoClientOptions15);
        java.lang.String str17 = builder8.getscript();
        builder8.setmongoUseSSL(false);
        builder8.setmongoLocalUser("secondary_read_preference");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder14.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.disableIndexRefresh(true);
        builder14.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder14.advancedTransformation(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder24.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet60);
        boolean boolean64 = builder63.getdropCollection();
        boolean boolean65 = builder63.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder0.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.excludeFields(strSet8);
        java.lang.String str10 = builder0.getstatisticsIndexName();
        builder0.setstatisticsIndexName("ssl");
        builder0.isMongos = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        builder0.setsocketTimeout(10);
        builder0.setmongoAdminPassword("servers");
        builder0.skipInitialImport = true;
        builder0.scriptType = "disable_index_refresh";
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        java.lang.String str53 = mongoDBRiverDefinition49.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue54 = mongoDBRiverDefinition49.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition49.mongoServers;
        builder5.mongoServers = serverAddressList55;
        boolean boolean57 = builder5.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder5.advancedTransformation(false);
        builder59.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder4.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder4.build();
        int int7 = mongoDBRiverDefinition6.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition6.getSOCKET_TIMEOUT();
        boolean boolean9 = mongoDBRiverDefinition6.isDisableIndexRefresh();
        boolean boolean10 = mongoDBRiverDefinition6.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean46 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.getisMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(boolean47);
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoCollection();
        boolean boolean48 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_bulk_requests" + "'", str49, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.connectTimeout((int) (byte) -1);
        java.lang.String str12 = builder9.getstatisticsTypeName();
        builder9.skipInitialImport = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getFILTER_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "filter" + "'", str47, "filter");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int43 = builder42.getsocketTimeout();
        boolean boolean44 = builder42.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.indexName("credentials");
        java.lang.String str49 = builder48.mongoAdminUser;
        java.lang.String[] strArray78 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder48.parentTypes((java.util.Set<java.lang.String>) strSet79);
        builder42.excludeFields = strSet79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder38.parentTypes((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.mongoAdminUser(".scripts");
        builder85.setriverName("options");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isStoreStatistics();
        boolean boolean50 = mongoDBRiverDefinition39.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.indexName;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str46 = mongoDBRiverDefinition39.getScriptType();
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str48 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = mongoDBRiverDefinition39.mongoServers;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "actions" + "'", str48, "actions");
        org.junit.Assert.assertNotNull(serverAddressList49);
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        builder3.setstatisticsTypeName("bulk_timeout");
        boolean boolean8 = builder3.getmongoSSLVerifyCertificate();
        java.lang.String str9 = builder3.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsIndexName("type");
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean43 = mongoDBRiverDefinition39.getdropCollection();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        com.mongodb.MongoClientOptions mongoClientOptions48 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str49 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gridfs" + "'", str49, "gridfs");
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean52 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str53 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str54 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions55 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertNull(mongoClientOptions55);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        boolean boolean46 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str47 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.getMongoOplogFilter();
        boolean boolean50 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script_type" + "'", str47, "script_type");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str49 = mongoDBRiverDefinition39.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.advancedTransformation(true);
        builder9.setmongoGridFS(false);
        builder9.setmongoUseSSL(false);
        java.lang.String str16 = builder9.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "skip_initial_import", "name", "size", "script.disable_dynamic", "bulk", "actions", "flush_interval", "script", "filter", "concurrent_requests", "parent_types", "bulk_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet20);
        builder0.riverName = "port";
        boolean boolean25 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.riverName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.importAllCollections(true);
        builder0.setdropCollection(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.indexName;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str49 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl" + "'", str47, "ssl");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 30000 + "'", int48 == 30000);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gridfs" + "'", str49, "gridfs");
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getDB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "db" + "'", str45, "db");
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(8);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp57 = builder0.initialTimestamp;
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.riverName("bulk_size");
        boolean boolean62 = builder0.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(wildcardTimestamp57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        java.lang.String str12 = builder11.getincludeCollection();
        int int13 = builder11.getsocketTimeout();
        int int14 = builder11.connectTimeout;
        builder11.advancedTransformation = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet19 = builder11.getparentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        java.lang.String str20 = builder16.getscript();
        java.lang.String str21 = builder16.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.skipInitialImport(true);
        boolean boolean24 = builder23.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder33.getscript();
        java.lang.String str38 = builder33.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(true);
        boolean boolean41 = builder40.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str47 = builder46.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.indexName("credentials");
        java.lang.String str50 = builder49.mongoAdminUser;
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder49.parentTypes((java.util.Set<java.lang.String>) strSet80);
        builder45.includeFields = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet80);
        builder0.setthrottleSize((int) (byte) -1);
        java.lang.String str88 = builder0.getmongoCollection();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "index" + "'", str88, "index");
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.mongoLocalPassword;
        boolean boolean43 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = mongoDBRiverDefinition51.getdropCollection();
        java.lang.String str53 = mongoDBRiverDefinition51.getGRIDFS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition51.getSSL_VERIFY_CERT_FIELD();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) str54);
        java.lang.Object obj57 = null;
        docScoreSearchScript0.setNextVar("connect_timeout", obj57);
        docScoreSearchScript0.setNextScore((float) 1);
        docScoreSearchScript0.setNextScore((float) (short) 0);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext63 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gridfs" + "'", str53, "gridfs");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ssl_verify_certificate" + "'", str54, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "ssl_verify_certificate" + "'", obj55, "ssl_verify_certificate");
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        builder3.setstoreStatistics(true);
        int int10 = builder3.throttleSize;
        java.lang.String str11 = builder3.statisticsTypeName;
        org.bson.types.Binary binary12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.initialTimestamp(binary12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.statisticsTypeName = ".scripts";
        builder6.dropCollection = true;
        boolean boolean11 = builder6.advancedTransformation;
        builder6.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean44 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoAdminUser;
        java.lang.String str46 = mongoDBRiverDefinition39.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str51 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script_type" + "'", str48, "script_type");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "import_all_collections" + "'", str49, "import_all_collections");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "index" + "'", str51, "index");
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str46 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "password" + "'", str43, "password");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "collection" + "'", str46, "collection");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        builder0.setmongoClientOptions(mongoClientOptions17);
        builder0.setstatisticsIndexName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.advancedTransformation(true);
        java.lang.String str23 = builder0.getmongoAdminUser();
        builder0.connectTimeout = (short) 0;
        builder0.mongoAdminPassword = "throttle_size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        int int47 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script" + "'", str49, "script");
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoLocalUser;
        org.elasticsearch.common.unit.TimeValue timeValue50 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str51 = mongoDBRiverDefinition39.riverName;
        java.lang.String str52 = mongoDBRiverDefinition39.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder8.mongoAdminUser;
        java.lang.String[] strArray38 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.lang.String str45 = mongoDBRiverDefinition44.getSIZE_FIELD();
        boolean boolean46 = mongoDBRiverDefinition44.disableIndexRefresh;
        boolean boolean47 = mongoDBRiverDefinition44.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition44.getMongoCollectionFilter();
        java.lang.String str49 = mongoDBRiverDefinition44.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition44.getScriptType();
        java.lang.Object obj51 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition44);
        java.lang.String str52 = mongoDBRiverDefinition44.statisticsTypeName;
        java.lang.String str53 = mongoDBRiverDefinition44.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition44.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "initial_timestamp" + "'", str53, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "socket_timeout" + "'", str54, "socket_timeout");
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("local", "socket_timeout", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?socket_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        builder0.isMongos = true;
        java.lang.String str10 = builder0.includeCollection;
        java.lang.String str11 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        java.lang.String str17 = builder12.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.skipInitialImport(true);
        boolean boolean20 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.typeName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        builder23.setscriptType("user");
        builder23.statisticsTypeName = "secondary_read_preference";
        java.lang.String str29 = builder23.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.mongoLocalPassword;
        builder30.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject34 = builder30.mongoCollectionFilter;
        builder30.mongoGridFS = true;
        int int37 = builder30.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.indexName("credentials");
        java.lang.String str42 = builder41.mongoAdminUser;
        java.lang.String[] strArray71 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.parentTypes((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        java.lang.String str78 = mongoDBRiverDefinition77.getSIZE_FIELD();
        boolean boolean79 = mongoDBRiverDefinition77.disableIndexRefresh;
        boolean boolean80 = mongoDBRiverDefinition77.isMongoGridFS();
        java.lang.String str81 = mongoDBRiverDefinition77.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue82 = mongoDBRiverDefinition77.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList83 = mongoDBRiverDefinition77.mongoServers;
        java.lang.String str84 = mongoDBRiverDefinition77.getACTIONS_FIELD();
        java.lang.String str85 = mongoDBRiverDefinition77.getMongoDb();
        boolean boolean86 = mongoDBRiverDefinition77.getdisableIndexRefresh();
        java.lang.String str87 = mongoDBRiverDefinition77.getSOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet88 = mongoDBRiverDefinition77.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder30.excludeFields(strSet88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder23.excludeFields(strSet88);
        builder19.parentTypes = strSet88;
        builder0.excludeFields = strSet88;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "size" + "'", str78, "size");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(serverAddressList83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "actions" + "'", str84, "actions");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "socket_timeout" + "'", str87, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("user");
        builder0.settypeName("localhost");
        java.util.Set<java.lang.String> strSet12 = builder0.getincludeFields();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder6.setmongoGridFS(false);
        java.lang.String str26 = builder6.gettypeName();
        boolean boolean27 = builder6.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str46 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "local" + "'", str42, "local");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "name" + "'", str43, "name");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "socket_timeout" + "'", str45, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "disable_index_refresh" + "'", str46, "disable_index_refresh");
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        boolean boolean8 = builder0.mongoUseSSL;
        boolean boolean9 = builder0.mongoSecondaryReadPreference;
        boolean boolean10 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.mongoLocalPassword;
        java.lang.String str10 = builder8.mongoLocalPassword;
        builder8.disableIndexRefresh = true;
        boolean boolean13 = builder8.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder17.mongoAdminUser;
        java.lang.String[] strArray47 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        java.lang.String str54 = mongoDBRiverDefinition53.getSIZE_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition53.getTHROTTLE_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition53.getParentTypes();
        builder8.setparentTypes(strSet56);
        builder7.setexcludeFields(strSet56);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "size" + "'", str54, "size");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "throttle_size" + "'", str55, "throttle_size");
        org.junit.Assert.assertNotNull(strSet56);
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.scriptType;
        java.lang.String str51 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.String str52 = mongoDBRiverDefinition46.riverName;
        java.lang.Boolean boolean53 = mongoDBRiverDefinition46.isMongos();
        java.lang.String str54 = mongoDBRiverDefinition46.getMongoLocalUser();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) str54);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "null.null" + "'", str51, "null.null");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "" + "'", obj55, "");
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        builder0.setsocketTimeout(10);
        java.lang.String[] strArray53 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet54);
        java.lang.String str57 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.isMongos((java.lang.Boolean) false);
        builder0.setdisableIndexRefresh(true);
        int int62 = builder0.throttleSize;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean52 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder12.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.disableIndexRefresh(true);
        builder12.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.advancedTransformation(true);
        java.lang.String[] strArray57 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder22.parentTypes = strSet58;
        builder0.excludeFields = strSet58;
        java.util.Set<java.lang.String> strSet62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.parentTypes(strSet62);
        java.lang.String str64 = builder0.mongoCollection;
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder0.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(mongoClientOptions65);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getScript();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getExcludeFields();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_bulk_requests" + "'", str43, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        builder9.setmongoAdminPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSIZE_FIELD();
        boolean boolean53 = mongoDBRiverDefinition51.disableIndexRefresh;
        java.lang.String str54 = mongoDBRiverDefinition51.getACTIONS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition51.statisticsTypeName;
        boolean boolean56 = mongoDBRiverDefinition51.isAdvancedTransformation();
        java.lang.String str57 = mongoDBRiverDefinition51.riverIndexName;
        java.lang.String str58 = mongoDBRiverDefinition51.getIS_MONGOS_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition51.mongoAdminPassword;
        java.lang.String str60 = mongoDBRiverDefinition51.getSSL_CONNECTION_FIELD();
        java.lang.String str61 = mongoDBRiverDefinition51.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition51.parentTypes;
        builder9.setincludeFields(strSet62);
        builder9.setskipInitialImport(true);
        builder9.mongoLocalUser = "connect_timeout";
        builder9.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "size" + "'", str52, "size");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "is_mongos" + "'", str58, "is_mongos");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ssl" + "'", str60, "ssl");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "concurrent_requests" + "'", str61, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        java.lang.String str43 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder0.importAllCollections(true);
        builder0.setmongoAdminUser("name");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "advanced_transformation" + "'", str43, "advanced_transformation");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder3.mongoSecondaryReadPreference(false);
        builder58.setmongoUseSSL(true);
        boolean boolean61 = builder58.getimportAllCollections();
        builder58.setmongoCollection("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean41 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.String str43 = mongoDBRiverDefinition39.mongoLocalPassword;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "initial_timestamp" + "'", str43, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoDb("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder11.getscript();
        java.lang.String str16 = builder11.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.skipInitialImport(true);
        boolean boolean19 = builder18.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoAdminUser("actions");
        builder23.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = builder29.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder29.disableIndexRefresh(true);
        builder33.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.isMongos((java.lang.Boolean) true);
        java.lang.String str44 = builder38.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject47 = builder38.mongoCollectionFilter;
        builder33.setmongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder23.mongoOplogFilter(basicDBObject47);
        builder7.setmongoCollectionFilter(basicDBObject47);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoDb();
        boolean boolean48 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str50 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getStatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "gridfs" + "'", str50, "gridfs");
        org.junit.Assert.assertNull(str51);
    }
}

