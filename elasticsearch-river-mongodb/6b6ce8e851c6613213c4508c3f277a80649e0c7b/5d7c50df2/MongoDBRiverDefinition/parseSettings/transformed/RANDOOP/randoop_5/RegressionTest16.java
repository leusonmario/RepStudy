import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        boolean boolean50 = mongoDBRiverDefinition39.importAllCollections;
        boolean boolean51 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean52 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str53 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getMongoAdminPassword();
        int int55 = mongoDBRiverDefinition39.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "script" + "'", str53, "script");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str47 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str49 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script_type" + "'", str49, "script_type");
        org.junit.Assert.assertNull(strSet50);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        builder6.setisMongos((java.lang.Boolean) false);
        builder6.indexName = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.storeStatistics(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder13.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.statisticsIndexName = "collection";
        java.lang.String str5 = builder0.mongoAdminUser;
        java.lang.String str6 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder14.getscript();
        boolean boolean19 = builder14.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int21 = builder20.getsocketTimeout();
        boolean boolean22 = builder20.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.getmongoCollectionFilter();
        builder20.setmongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder13.mongoOplogFilter(basicDBObject27);
        builder30.indexName = "script.disable_dynamic";
        java.lang.String str33 = builder30.getmongoLocalUser();
        builder30.setriverIndexName("flush_interval");
        java.lang.String str36 = builder30.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.indexName("credentials");
        java.lang.String str41 = builder40.mongoAdminUser;
        java.lang.String[] strArray70 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder40.parentTypes((java.util.Set<java.lang.String>) strSet71);
        builder73.throttleSize = (byte) 100;
        builder73.setsocketTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str79 = builder78.mongoLocalPassword;
        builder78.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject82 = builder78.mongoCollectionFilter;
        builder73.mongoOplogFilter = basicDBObject82;
        builder30.setmongoOplogFilter(basicDBObject82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.mongoOplogFilter(basicDBObject82);
        com.mongodb.MongoClientOptions mongoClientOptions86 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.mongoClientOptions(mongoClientOptions86);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(basicDBObject82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str46 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsIndexName;
        boolean boolean48 = mongoDBRiverDefinition39.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.getmongoGridFS();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(boolean45);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("advanced_transformation");
        boolean boolean8 = builder0.getmongoSecondaryReadPreference();
        builder0.setindexName("flush_interval");
        boolean boolean11 = builder0.mongoSSLVerifyCertificate;
        com.mongodb.BasicDBObject basicDBObject12 = builder0.mongoCollectionFilter;
        boolean boolean13 = builder0.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.isMongos((java.lang.Boolean) true);
        java.lang.String str7 = builder1.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder1.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject10 = builder1.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        builder12.setskipInitialImport(false);
        boolean boolean16 = builder12.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript17 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript17.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory20 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj21 = docScoreSearchScript17.unwrap((java.lang.Object) docScoreNativeScriptFactory20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.isMongos((java.lang.Boolean) true);
        java.lang.String str28 = builder22.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.mongoSSLVerifyCertificate(false);
        java.lang.String str31 = builder22.riverName;
        java.lang.String str32 = builder22.scriptType;
        builder22.statisticsTypeName = "secondary_read_preference";
        builder22.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder22.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject39 = builder22.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript40 = docScoreNativeScriptFactory20.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        builder12.mongoCollectionFilter = basicDBObject39;
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str44 = builder43.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.indexName("credentials");
        java.lang.String str47 = builder46.mongoAdminUser;
        java.lang.String[] strArray76 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder46.parentTypes((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder81);
        boolean boolean83 = mongoDBRiverDefinition82.getdropCollection();
        boolean boolean84 = mongoDBRiverDefinition82.getimportAllCollections();
        java.lang.String str85 = mongoDBRiverDefinition82.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str86 = mongoDBRiverDefinition82.statisticsTypeName;
        java.lang.String str87 = mongoDBRiverDefinition82.getStatisticsIndexName();
        java.lang.String str88 = mongoDBRiverDefinition82.mongoCollection;
        java.lang.String str89 = mongoDBRiverDefinition82.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject90 = mongoDBRiverDefinition82.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript91 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(executableScript40);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "initial_timestamp" + "'", str85, "initial_timestamp");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(basicDBObject90);
        org.junit.Assert.assertNotNull(executableScript91);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder0.mongoAdminPassword = "parent_types";
        java.lang.String str11 = builder0.getriverIndexName();
        int int12 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoSecondaryReadPreference(true);
        boolean boolean15 = builder14.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.storeStatistics(false);
        int int18 = builder17.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.mongoServers(serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.storeStatistics(false);
        com.mongodb.BasicDBObject basicDBObject17 = builder16.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder7.mongoCollection("disable_index_refresh");
        builder7.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = builder7.mongoServers;
        boolean boolean64 = builder7.mongoGridFS;
        org.bson.types.BSONTimestamp bSONTimestamp65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder7.initialTimestamp(bSONTimestamp65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.riverIndexName("sandbox");
        builder0.dropCollection = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.scriptType("name");
        builder13.riverIndexName = "script_type";
        java.lang.String str16 = builder13.riverName;
        builder13.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder13.script("null.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoDb("concurrent_requests");
        builder10.setscriptType("parent_types");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.riverIndexName = "include_fields";
        builder36.setmongoGridFS(true);
        boolean boolean43 = builder36.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = builder47.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder47.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder47.disableIndexRefresh(true);
        builder47.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder47.advancedTransformation(true);
        java.lang.String[] strArray92 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet93 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet93, strArray92);
        builder57.parentTypes = strSet93;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder36.parentTypes((java.util.Set<java.lang.String>) strSet93);
        builder96.disableIndexRefresh = true;
        int int99 = builder96.getconnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(serverAddressList49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverName("collection");
        java.lang.String str15 = builder14.getindexName();
        builder14.mongoDb = "import_all_collections";
        java.lang.String str18 = builder14.mongoLocalPassword;
        java.lang.String str19 = builder14.getincludeCollection();
        boolean boolean20 = builder14.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet25 = builder22.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "import_all_collections" + "'", str19, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        builder44.setmongoAdminPassword("bulk");
        java.lang.String str47 = builder44.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.statisticsTypeName("");
        java.lang.String str50 = builder44.indexName;
        boolean boolean51 = builder44.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder44.skipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoDb();
        boolean boolean52 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        int int53 = mongoDBRiverDefinition39.connectTimeout;
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition39.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        java.lang.String str59 = builder58.script;
        builder58.setsocketTimeout(97);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        builder44.setmongoAdminPassword("bulk");
        java.lang.String str47 = builder44.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.includeCollection("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder49.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition6.getFLUSH_INTERVAL_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition6.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition6.getINDEX_OBJECT();
        boolean boolean11 = mongoDBRiverDefinition6.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "flush_interval" + "'", str8, "flush_interval");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        builder0.settypeName("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int15 = builder14.getsocketTimeout();
        boolean boolean16 = builder14.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject21 = builder20.getmongoCollectionFilter();
        builder14.setmongoOplogFilter(basicDBObject21);
        builder0.mongoOplogFilter = basicDBObject21;
        builder0.mongoCollection = "import_all_collections";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(basicDBObject21);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        int int48 = mongoDBRiverDefinition39.getSocketTimeout();
        org.elasticsearch.common.unit.TimeValue timeValue49 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "import_all_collections" + "'", str45, "import_all_collections");
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "initial_timestamp" + "'", str47, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeValue49);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        int int47 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "include_fields" + "'", str50, "include_fields");
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder3.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.socketTimeout(32);
        builder6.skipInitialImport = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        int int46 = mongoDBRiverDefinition39.getSocketTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str48 = mongoDBRiverDefinition39.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalUser("script_type");
        builder0.indexName = "initial_timestamp";
        boolean boolean18 = builder0.importAllCollections;
        builder0.setincludeCollection("null.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getmongoGridFS();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.util.Set<java.lang.String> strSet49 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str50 = mongoDBRiverDefinition39.getMongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition39.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1000 + "'", int48 == 1000);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(basicDBObject51);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str44 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str45 = mongoDBRiverDefinition39.indexName;
        boolean boolean46 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoSecondaryReadPreference(false);
        java.lang.String str16 = builder13.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoSSLVerifyCertificate(true);
        java.lang.String str19 = builder18.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        builder3.setsocketTimeout((int) (byte) 1);
        java.util.Set<java.lang.String> strSet14 = builder3.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.scriptType;
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoCollection("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.typeName("hi!");
        boolean boolean19 = builder0.getskipInitialImport();
        builder0.riverIndexName = "ssl";
        java.lang.String str22 = builder0.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str52 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getMongoLocalUser();
        boolean boolean55 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        boolean boolean56 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "bulk" + "'", str52, "bulk");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "secondary_read_preference" + "'", str53, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str46 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getTypeName();
        boolean boolean48 = mongoDBRiverDefinition39.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "advanced_transformation" + "'", str46, "advanced_transformation");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalUser("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.indexName("include_collection");
        java.lang.Boolean boolean18 = builder17.isMongos;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        boolean boolean61 = mongoDBRiverDefinition60.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject62 = mongoDBRiverDefinition60.mongoOplogFilter;
        boolean boolean63 = mongoDBRiverDefinition60.getdropCollection();
        java.lang.String str64 = mongoDBRiverDefinition60.getScriptType();
        int int65 = mongoDBRiverDefinition60.getThrottleSize();
        com.mongodb.BasicDBObject basicDBObject66 = mongoDBRiverDefinition60.mongoCollectionFilter;
        builder20.mongoCollectionFilter = basicDBObject66;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(basicDBObject62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(basicDBObject66);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        builder0.typeName = "script_type";
        boolean boolean7 = builder0.getmongoSecondaryReadPreference();
        java.lang.String str8 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("throttle_size");
        builder0.settypeName("local");
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str45 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "store_statistics" + "'", str43, "store_statistics");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "index" + "'", str44, "index");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "local" + "'", str45, "local");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "connect_timeout" + "'", str46, "connect_timeout");
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        java.lang.String str6 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.advancedTransformation(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder7.mongoAdminUser;
        java.lang.String[] strArray37 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str44 = mongoDBRiverDefinition43.getSIZE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition43.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition43.getINDEX_OBJECT();
        int int47 = mongoDBRiverDefinition43.getDEFAULT_SOCKET_TIMEOUT();
        int int48 = mongoDBRiverDefinition43.throttleSize;
        java.util.Set<java.lang.String> strSet49 = mongoDBRiverDefinition43.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder3.includeFields(strSet49);
        java.lang.String str51 = builder3.includeCollection;
        int int52 = builder3.connectTimeout;
        java.lang.String str53 = builder3.statisticsTypeName;
        builder3.throttleSize = 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder3.isMongos((java.lang.Boolean) true);
        builder57.setincludeCollection("index");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "size" + "'", str44, "size");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "skip_initial_import" + "'", str45, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 60000 + "'", int47 == 60000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.skipInitialImport(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder8.mongoServers;
        builder8.setriverName("import_all_collections");
        builder8.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("credentials");
        java.lang.String str22 = builder21.mongoAdminUser;
        java.lang.String[] strArray51 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        java.lang.String str58 = mongoDBRiverDefinition57.getSIZE_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition57.getTHROTTLE_SIZE_FIELD();
        java.lang.String str60 = mongoDBRiverDefinition57.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int61 = mongoDBRiverDefinition57.getDEFAULT_BULK_ACTIONS();
        java.lang.String str62 = mongoDBRiverDefinition57.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = mongoDBRiverDefinition57.mongoServers;
        builder8.mongoServers = serverAddressList63;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "size" + "'", str58, "size");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "throttle_size" + "'", str59, "throttle_size");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "concurrent_bulk_requests" + "'", str60, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1000 + "'", int61 == 1000);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "script" + "'", str62, "script");
        org.junit.Assert.assertNotNull(serverAddressList63);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.riverName;
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet49 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str50 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "actions" + "'", str50, "actions");
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject50 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str51 = mongoDBRiverDefinition39.getPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_bulk_requests" + "'", str49, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(basicDBObject50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "port" + "'", str51, "port");
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.statisticsIndexName = "collection";
        java.lang.String str5 = builder0.mongoAdminUser;
        int int6 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        boolean boolean47 = mongoDBRiverDefinition46.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition46.mongoOplogFilter;
        java.lang.String str49 = mongoDBRiverDefinition46.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getScript();
        java.lang.String str51 = mongoDBRiverDefinition46.getSIZE_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition46.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition46.mongoCollectionFilter;
        builder0.mongoCollectionFilter = basicDBObject53;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script" + "'", str49, "script");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "host" + "'", str52, "host");
        org.junit.Assert.assertNotNull(basicDBObject53);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.riverIndexName("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminPassword("ssl");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.typeName("collection");
        builder3.setstatisticsIndexName("include_fields");
        java.lang.String str10 = builder3.scriptType;
        builder3.setimportAllCollections(true);
        builder3.setindexName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.riverIndexName("ssl_verify_certificate");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("credentials");
        java.lang.String str22 = builder21.mongoAdminUser;
        java.lang.String[] strArray51 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        java.lang.String str58 = mongoDBRiverDefinition57.getSIZE_FIELD();
        int int59 = mongoDBRiverDefinition57.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str60 = mongoDBRiverDefinition57.getStatisticsTypeName();
        boolean boolean61 = mongoDBRiverDefinition57.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition57.getIncludeFields();
        java.lang.String str63 = mongoDBRiverDefinition57.getCREDENTIALS_FIELD();
        boolean boolean64 = mongoDBRiverDefinition57.dropCollection;
        java.lang.String str65 = mongoDBRiverDefinition57.getUSER_FIELD();
        java.lang.String str66 = mongoDBRiverDefinition57.getMongoCollection();
        java.util.Set<java.lang.String> strSet67 = mongoDBRiverDefinition57.getParentTypes();
        builder16.includeFields = strSet67;
        builder16.mongoCollection = "size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "size" + "'", str58, "size");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 30000 + "'", int59 == 30000);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "credentials" + "'", str63, "credentials");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "user" + "'", str65, "user");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strSet67);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject4 = builder0.mongoCollectionFilter;
        builder0.importAllCollections = false;
        builder0.includeCollection = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.connectTimeout((int) '4');
        builder0.setdropCollection(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean43 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str45 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str46 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ssl" + "'", str46, "ssl");
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        java.lang.String str24 = builder23.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str47 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.mongoCollectionFilter;
        java.lang.String str50 = mongoDBRiverDefinition39.script;
        java.lang.String str51 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        boolean boolean52 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        boolean boolean53 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str54 = mongoDBRiverDefinition39.getMongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "actions" + "'", str47, "actions");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script_type" + "'", str48, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "exclude_fields" + "'", str51, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder12.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.disableIndexRefresh(true);
        builder12.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.advancedTransformation(true);
        java.lang.String[] strArray57 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder22.parentTypes = strSet58;
        builder0.excludeFields = strSet58;
        java.util.Set<java.lang.String> strSet62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.parentTypes(strSet62);
        java.lang.String str64 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder0.indexName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder0.mongoCollection("import_all_collections");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        builder0.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        java.lang.String str17 = builder8.indexName;
        java.lang.String str18 = builder8.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.mongoLocalUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.script("type");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "credentials" + "'", str17, "credentials");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.isMongos((java.lang.Boolean) true);
        java.lang.String str7 = builder1.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder1.mongoSSLVerifyCertificate(false);
        java.lang.String str10 = builder1.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        boolean boolean52 = mongoDBRiverDefinition50.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition50.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder1.mongoServers(serverAddressList53);
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = builder1.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder1.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder1.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.statisticsIndexName;
        int int62 = builder60.getthrottleSize();
        java.util.Set<java.lang.String> strSet63 = builder60.parentTypes;
        builder60.mongoLocalUser = "";
        builder60.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet68 = null;
        builder60.parentTypes = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str71 = builder70.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder70.indexName("credentials");
        java.lang.String str74 = builder70.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder70.scriptType("index");
        builder76.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject79 = builder76.getmongoCollectionFilter();
        builder60.setmongoCollectionFilter(basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder1.mongoOplogFilter(basicDBObject79);
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        java.util.Map<java.lang.String, java.lang.Object> strMap83 = riverSettings82.settings();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(strMap83);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.lang.String str46 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str47 = mongoDBRiverDefinition39.getTypeName();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.typeName("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.statisticsTypeName("port");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        builder8.mongoUseSSL = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean46 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.String str47 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str48 = mongoDBRiverDefinition39.typeName;
        java.lang.String str49 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "parent_types" + "'", str49, "parent_types");
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.mongoLocalPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int18 = builder17.getsocketTimeout();
        boolean boolean19 = builder17.mongoUseSSL;
        builder17.statisticsIndexName = "collection";
        java.lang.String str22 = builder17.mongoAdminUser;
        java.lang.String str23 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        java.util.Set<java.lang.String> strSet26 = builder24.getincludeFields();
        java.lang.String str27 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder28.getscript();
        java.lang.String str33 = builder28.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.skipInitialImport(true);
        boolean boolean36 = builder35.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder44.mongoAdminUser;
        java.lang.String[] strArray74 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder44.parentTypes((java.util.Set<java.lang.String>) strSet75);
        builder40.includeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder24.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder17.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder81.throttleSize = (short) 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder81.riverIndexName("null.null");
        java.lang.String str86 = builder85.mongoAdminPassword;
        boolean boolean87 = builder85.getdropCollection();
        com.mongodb.MongoClientOptions mongoClientOptions88 = builder85.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(mongoClientOptions88);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean54 = mongoDBRiverDefinition51.isMongoGridFS();
        java.lang.String str55 = mongoDBRiverDefinition51.getIndexName();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition51.parentTypes;
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "advanced_transformation" + "'", str53, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strSet56);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str14 = mongoDBRiverDefinition8.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject38 = builder3.getmongoCollectionFilter();
        java.lang.String str39 = builder3.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setmongoAdminUser("exclude_fields");
        builder12.settypeName("disable_index_refresh");
        builder12.mongoLocalUser = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.String str43 = mongoDBRiverDefinition42.getSIZE_FIELD();
        boolean boolean44 = mongoDBRiverDefinition42.disableIndexRefresh;
        java.lang.String str45 = mongoDBRiverDefinition42.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition42.statisticsTypeName;
        boolean boolean47 = mongoDBRiverDefinition42.isAdvancedTransformation();
        java.lang.String str48 = mongoDBRiverDefinition42.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition42.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int50 = mongoDBRiverDefinition42.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str51 = mongoDBRiverDefinition42.getScriptType();
        com.mongodb.BasicDBObject basicDBObject52 = mongoDBRiverDefinition42.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.script.ScriptService scriptService54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("admin", "script.default_lang", riverSettings53, scriptService54);
        org.elasticsearch.common.settings.Settings settings56 = riverSettings53.globalSettings();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "size" + "'", str43, "size");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "import_all_collections" + "'", str48, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "import_all_collections" + "'", str49, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 60000 + "'", int50 == 60000);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertNull(settings56);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject41 = builder38.mongoCollectionFilter;
        builder38.throttleSize = 1;
        boolean boolean44 = builder38.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject45 = builder38.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder38.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder38.statisticsTypeName("localhost");
        java.lang.String str50 = builder38.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        builder0.typeName = "script_type";
        java.lang.String str7 = builder0.getscriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = null;
        builder0.setmongoServers(serverAddressList8);
        boolean boolean10 = builder0.getstoreStatistics();
        builder0.setstatisticsIndexName("store_statistics");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        boolean boolean49 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str50 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str53 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "script_type" + "'", str50, "script_type");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "advanced_transformation" + "'", str51, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "is_mongos" + "'", str53, "is_mongos");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.riverIndexName;
        java.lang.String str10 = mongoDBRiverDefinition8.mongoLocalUser;
        boolean boolean11 = mongoDBRiverDefinition8.storeStatistics;
        boolean boolean12 = mongoDBRiverDefinition8.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.scriptType;
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject17 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        int int20 = builder18.getthrottleSize();
        java.util.Set<java.lang.String> strSet21 = builder18.parentTypes;
        builder18.mongoLocalUser = "";
        boolean boolean24 = builder18.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = builder30.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.disableIndexRefresh(true);
        builder30.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder30.advancedTransformation(true);
        java.lang.String[] strArray75 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        builder40.parentTypes = strSet76;
        builder18.excludeFields = strSet76;
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet76);
        com.mongodb.MongoClientOptions mongoClientOptions81 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.mongoClientOptions(mongoClientOptions81);
        java.util.Set<java.lang.String> strSet83 = builder82.excludeFields;
        java.lang.String str84 = builder82.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str50 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition39.getMongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "parent_types" + "'", str50, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(mongoClientOptions52);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        builder12.includeFields = strSet47;
        builder12.setmongoSSLVerifyCertificate(false);
        builder12.mongoSecondaryReadPreference = false;
        com.mongodb.BasicDBObject basicDBObject55 = builder12.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(basicDBObject55);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.isStoreStatistics();
        boolean boolean45 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str46 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.typeName;
        java.lang.String str49 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "size" + "'", str46, "size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "db" + "'", str47, "db");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "throttle_size" + "'", str49, "throttle_size");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str53 = mongoDBRiverDefinition39.getMongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "gridfs" + "'", str51, "gridfs");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoGridFS();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        org.elasticsearch.common.logging.ESLogger eSLogger47 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str48 = mongoDBRiverDefinition39.getPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(eSLogger47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "port" + "'", str48, "port");
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str47 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "collection" + "'", str47, "collection");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.mongoSSLVerifyCertificate = true;
        boolean boolean12 = builder0.mongoSecondaryReadPreference;
        builder0.dropCollection = false;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        builder42.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder42.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.storeStatistics(false);
        builder50.setmongoAdminPassword("bulk");
        java.lang.String str53 = builder50.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoLocalPassword("");
        docScoreSearchScript0.setNextVar("throttle_size", (java.lang.Object) "");
        java.lang.Object obj57 = null;
        java.lang.Object obj58 = docScoreSearchScript0.unwrap(obj57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder60.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder60.isMongos((java.lang.Boolean) true);
        java.lang.String str66 = builder60.mongoAdminPassword;
        builder60.setmongoDb("concurrent_bulk_requests");
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) builder60);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        builder0.settypeName("advanced_transformation");
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.typeName("");
        java.util.Set<java.lang.String> strSet14 = builder0.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.statisticsTypeName("local");
        builder9.riverIndexName = "filter";
        java.lang.String str12 = builder9.getincludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        boolean boolean7 = builder0.getmongoGridFS();
        builder0.setmongoAdminUser("null.null");
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        int int13 = builder11.getthrottleSize();
        java.util.Set<java.lang.String> strSet14 = builder11.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.indexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        builder19.setscriptType("user");
        builder19.statisticsTypeName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder28.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder33.getscript();
        java.lang.String str38 = builder33.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(true);
        boolean boolean41 = builder40.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str47 = builder46.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.indexName("credentials");
        java.lang.String str50 = builder49.mongoAdminUser;
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder49.parentTypes((java.util.Set<java.lang.String>) strSet80);
        builder45.includeFields = strSet80;
        builder32.setincludeFields((java.util.Set<java.lang.String>) strSet80);
        builder19.excludeFields = strSet80;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet80);
        builder0.excludeFields = strSet80;
        builder0.skipInitialImport = false;
        builder0.setstatisticsTypeName("collection");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.excludeFields;
        int int48 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.Boolean boolean50 = mongoDBRiverDefinition39.getisMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1000 + "'", int48 == 1000);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(boolean50);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("advanced_transformation");
        boolean boolean8 = builder0.getmongoSecondaryReadPreference();
        builder0.statisticsTypeName = "flush_interval";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.indexName;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos;
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str51 = mongoDBRiverDefinition39.mongoDb;
        boolean boolean52 = mongoDBRiverDefinition39.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl" + "'", str47, "ssl");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 30000 + "'", int48 == 30000);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (byte) 10);
        java.lang.String str9 = builder8.getmongoLocalUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder8.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardTimestamp10);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject58 = builder57.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = builder57.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.disableIndexRefresh(true);
        docScoreSearchScript0.setNextVar("is_mongos", (java.lang.Object) builder57);
        java.lang.String str65 = builder57.getscriptType();
        boolean boolean66 = builder57.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder57.scriptType("user");
        builder68.includeCollection = "include_fields";
        java.util.Set<java.lang.String> strSet71 = builder68.getexcludeFields();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(strSet71);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str50 = mongoDBRiverDefinition39.getIndexName();
        boolean boolean51 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str52 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "localhost" + "'", str52, "localhost");
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        java.lang.String str12 = builder11.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder11.getmongoServers();
        boolean boolean14 = builder11.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoDb("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.dropCollection(true);
        builder16.setmongoAdminUser("store_statistics");
        builder16.indexName = "ssl";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.statisticsTypeName("script_type.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.disableIndexRefresh(false);
        java.lang.Boolean boolean31 = builder30.getisMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + true + "'", boolean31, true);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        builder0.settypeName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("password");
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.typeName("include_collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.isMongos;
        boolean boolean48 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str49 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script" + "'", str49, "script");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str50 = mongoDBRiverDefinition39.getScript();
        java.lang.String str51 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        boolean boolean52 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str53 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getStatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "admin" + "'", str51, "admin");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "user" + "'", str53, "user");
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        java.lang.String str8 = builder5.getmongoAdminPassword();
        builder5.setconnectTimeout((int) (short) 0);
        boolean boolean11 = builder5.dropCollection;
        java.lang.String str12 = builder5.getmongoCollection();
        java.lang.Boolean boolean13 = builder5.getisMongos();
        builder5.setstoreStatistics(true);
        boolean boolean16 = builder5.importAllCollections;
        java.lang.String str17 = builder5.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str49 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "admin" + "'", str46, "admin");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disable_index_refresh" + "'", str47, "disable_index_refresh");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "disable_index_refresh" + "'", str49, "disable_index_refresh");
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.Boolean boolean39 = builder38.isMongos;
        builder38.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.mongoAdminPassword(".scripts");
        builder38.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder38.mongoAdminUser("credentials");
        java.lang.String str48 = builder47.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        java.util.Set<java.lang.String> strSet7 = builder0.includeFields;
        java.lang.String str8 = builder0.includeCollection;
        java.lang.String str9 = builder0.mongoAdminPassword;
        boolean boolean10 = builder0.dropCollection;
        builder0.advancedTransformation = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str45 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "bulk_size" + "'", str45, "bulk_size");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "gridfs" + "'", str46, "gridfs");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "flush_interval" + "'", str47, "flush_interval");
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        boolean boolean2 = builder0.importAllCollections;
        builder0.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.lang.String str5 = builder3.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.isMongos((java.lang.Boolean) true);
        java.lang.String str12 = builder6.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoSSLVerifyCertificate(false);
        java.lang.String str15 = builder6.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        java.lang.String str20 = builder19.mongoAdminUser;
        java.lang.String[] strArray49 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        java.lang.String str56 = mongoDBRiverDefinition55.getSIZE_FIELD();
        boolean boolean57 = mongoDBRiverDefinition55.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = mongoDBRiverDefinition55.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder6.mongoServers(serverAddressList58);
        builder3.mongoServers = serverAddressList58;
        builder3.mongoLocalPassword = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder3.mongoLocalPassword("script.default_lang");
        builder3.setdisableIndexRefresh(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "size" + "'", str56, "size");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serverAddressList58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder14.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        boolean boolean26 = builder21.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int28 = builder27.getsocketTimeout();
        boolean boolean29 = builder27.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject34 = builder33.getmongoCollectionFilter();
        builder27.setmongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder21.mongoCollectionFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder20.mongoOplogFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.mongoCollectionFilter(basicDBObject34);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(mongoClientOptions39);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("script", "include_fields", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        boolean boolean13 = builder11.importAllCollections;
        builder11.setthrottleSize((int) (byte) 1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        java.lang.String str30 = builder0.includeCollection;
        java.util.Set<java.lang.String> strSet31 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder0.mongoCollectionFilter;
        builder0.storeStatistics = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.indexName("script_type");
        builder11.importAllCollections = true;
        boolean boolean16 = builder11.getmongoSSLVerifyCertificate();
        builder11.setmongoLocalPassword("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        builder0.typeName = "script_type";
        java.lang.String str7 = builder0.getscriptType();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoClientOptions(mongoClientOptions8);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        int int37 = builder3.getconnectTimeout();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder3.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(mongoClientOptions38);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        builder0.setsocketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.isMongos((java.lang.Boolean) true);
        java.lang.String str35 = builder29.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder29.mongoSSLVerifyCertificate(false);
        java.lang.String str38 = builder29.riverName;
        java.lang.String str39 = builder29.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject44 = builder43.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = builder43.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder43.disableIndexRefresh(true);
        builder43.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder43.advancedTransformation(true);
        java.lang.String[] strArray88 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder53.parentTypes = strSet89;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet89);
        builder13.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        int int6 = builder0.connectTimeout;
        builder0.throttleSize = 32;
        java.lang.String str9 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject19 = builder10.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.mongoGridFS(false);
        builder10.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.setmongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoAdminUser("gridfs");
        builder24.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder24.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder36.mongoAdminUser;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.setmongoCollectionFilter(basicDBObject38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.indexName("credentials");
        java.lang.String str44 = builder43.mongoAdminUser;
        java.lang.String[] strArray73 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder43.parentTypes((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder78);
        java.lang.String str80 = mongoDBRiverDefinition79.getSIZE_FIELD();
        boolean boolean81 = mongoDBRiverDefinition79.disableIndexRefresh;
        boolean boolean82 = mongoDBRiverDefinition79.isMongoGridFS();
        int int83 = mongoDBRiverDefinition79.throttleSize;
        java.lang.String str84 = mongoDBRiverDefinition79.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject85 = mongoDBRiverDefinition79.mongoOplogFilter;
        java.lang.String str86 = mongoDBRiverDefinition79.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str87 = mongoDBRiverDefinition79.getBULK_TIMEOUT_FIELD();
        int int88 = mongoDBRiverDefinition79.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet89 = mongoDBRiverDefinition79.getParentTypes();
        builder36.excludeFields = strSet89;
        builder24.parentTypes = strSet89;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder10.includeFields(strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder0.includeFields(strSet89);
        builder93.mongoUseSSL = true;
        boolean boolean96 = builder93.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(mongoClientOptions32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "size" + "'", str80, "size");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(basicDBObject85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "script" + "'", str86, "script");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "bulk_timeout" + "'", str87, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str44 = mongoDBRiverDefinition39.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.getMongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(serverAddressList45);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList46 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(serverAddressList46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        com.mongodb.BasicDBObject basicDBObject50 = mongoDBRiverDefinition39.mongoCollectionFilter;
        java.lang.String str51 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str53 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "import_all_collections" + "'", str48, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gridfs" + "'", str49, "gridfs");
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "bulk_size" + "'", str51, "bulk_size");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "include_fields" + "'", str53, "include_fields");
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.isMongos();
        int int48 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str49 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "import_all_collections" + "'", str49, "import_all_collections");
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        int int18 = builder0.getsocketTimeout();
        builder0.scriptType = "parent_types";
        builder0.riverName = "bulk_size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        java.lang.String str6 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        java.lang.String str10 = builder0.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        int int48 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean49 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str50 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str52 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "drop_collection" + "'", str50, "drop_collection");
        org.junit.Assert.assertNull(basicDBObject51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "name" + "'", str52, "name");
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.elasticsearch.common.settings.Settings settings2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = null;
        org.elasticsearch.river.RiverSettings riverSettings4 = new org.elasticsearch.river.RiverSettings(settings2, strMap3);
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings4.globalSettings();
        org.elasticsearch.common.settings.Settings settings7 = riverSettings4.globalSettings();
        org.elasticsearch.common.settings.Settings settings8 = riverSettings4.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = riverSettings4.settings();
        org.elasticsearch.script.ScriptService scriptService10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("ssl", "sandbox", riverSettings4, scriptService10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(settings5);
        org.junit.Assert.assertNull(settings6);
        org.junit.Assert.assertNull(settings7);
        org.junit.Assert.assertNull(settings8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.statisticsTypeName;
        java.lang.String str19 = mongoDBRiverDefinition17.getINDEX_OBJECT();
        int int20 = mongoDBRiverDefinition17.getConnectTimeout();
        boolean boolean21 = mongoDBRiverDefinition17.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index" + "'", str19, "index");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.connectTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder38.storeStatistics(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getExcludeFields();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoAdminUser;
        java.lang.String str50 = mongoDBRiverDefinition39.getFILTER_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "filter" + "'", str50, "filter");
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        builder3.setisMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject12 = builder3.getmongoOplogFilter();
        java.lang.String str13 = builder3.getriverIndexName();
        java.util.Set<java.lang.String> strSet14 = builder3.parentTypes;
        builder3.setmongoLocalUser("localhost");
        java.lang.String str17 = builder3.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        boolean boolean6 = builder0.mongoGridFS;
        java.util.Set<java.lang.String> strSet7 = builder0.getparentTypes();
        int int8 = builder0.socketTimeout;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.throttleSize = (byte) 10;
        boolean boolean19 = builder8.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.scriptType("index");
        builder26.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder32.mongoAdminUser;
        java.lang.String[] strArray62 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        boolean boolean69 = mongoDBRiverDefinition68.getdropCollection();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition68.getParentTypes();
        builder26.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder8.excludeFields(strSet70);
        java.lang.String str73 = builder72.getmongoDb();
        builder72.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder72.includeCollection("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder72.mongoUseSSL(true);
        java.lang.String str80 = builder72.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("flush_interval");
        builder0.setisMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.advancedTransformation(false);
        java.lang.String str13 = builder0.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        builder3.disableIndexRefresh = false;
        boolean boolean7 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet8 = builder3.getparentTypes();
        boolean boolean9 = builder3.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder3.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardTimestamp10);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = mongoDBRiverDefinition51.getdropCollection();
        java.lang.String str53 = mongoDBRiverDefinition51.getGRIDFS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition51.getSSL_VERIFY_CERT_FIELD();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) str54);
        java.lang.Object obj57 = null;
        docScoreSearchScript0.setNextVar("connect_timeout", obj57);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str63 = builder62.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder62.isMongos((java.lang.Boolean) true);
        java.lang.String str68 = builder62.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder62.mongoSSLVerifyCertificate(false);
        java.lang.String str71 = builder70.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder70.mongoGridFS(true);
        java.lang.String str74 = builder73.getincludeCollection();
        int int75 = builder73.getsocketTimeout();
        int int76 = builder73.connectTimeout;
        docScoreSearchScript0.setNextVar("options", (java.lang.Object) builder73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder73.skipInitialImport(false);
        builder79.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gridfs" + "'", str53, "gridfs");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ssl_verify_certificate" + "'", str54, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "ssl_verify_certificate" + "'", obj55, "ssl_verify_certificate");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoCollection();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverName("collection");
        java.lang.String str15 = builder14.getindexName();
        builder14.mongoDb = "import_all_collections";
        java.lang.String str18 = builder14.mongoLocalPassword;
        builder14.setthrottleSize((int) (short) -1);
        java.util.Set<java.lang.String> strSet21 = builder14.getexcludeFields();
        java.lang.String str22 = builder14.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "credentials" + "'", str22, "credentials");
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean47 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str49 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script_type" + "'", str49, "script_type");
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject38 = builder3.getmongoCollectionFilter();
        java.lang.String str39 = builder3.getincludeCollection();
        builder3.socketTimeout = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder3.socketTimeout(30000);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str49 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str50 = mongoDBRiverDefinition39.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "servers" + "'", str47, "servers");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "null.null" + "'", str48, "null.null");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.getisMongos();
        boolean boolean47 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str48 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "actions" + "'", str48, "actions");
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        builder44.setmongoAdminPassword("bulk");
        java.lang.String str47 = builder44.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.scriptType("null.null");
        builder51.mongoAdminUser = "disable_index_refresh";
        boolean boolean54 = builder51.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = builder51.build();
        com.mongodb.BasicDBObject basicDBObject56 = builder51.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertNotNull(basicDBObject56);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("flush_interval");
        builder0.setisMongos((java.lang.Boolean) true);
        java.lang.String str11 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSIZE_FIELD();
        boolean boolean53 = mongoDBRiverDefinition51.disableIndexRefresh;
        java.lang.String str54 = mongoDBRiverDefinition51.getACTIONS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition51.statisticsTypeName;
        boolean boolean56 = mongoDBRiverDefinition51.isAdvancedTransformation();
        java.lang.String str57 = mongoDBRiverDefinition51.riverIndexName;
        java.lang.String str58 = mongoDBRiverDefinition51.getIS_MONGOS_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition51.mongoAdminPassword;
        java.lang.String str60 = mongoDBRiverDefinition51.getScriptType();
        int int61 = mongoDBRiverDefinition51.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition51.includeFields;
        boolean boolean63 = mongoDBRiverDefinition51.dropCollection;
        boolean boolean64 = mongoDBRiverDefinition51.isStoreStatistics();
        java.lang.String str65 = mongoDBRiverDefinition51.statisticsTypeName;
        java.lang.String str66 = mongoDBRiverDefinition51.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.Set<java.lang.String> strSet67 = mongoDBRiverDefinition51.parentTypes;
        builder0.includeFields = strSet67;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "size" + "'", str52, "size");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "is_mongos" + "'", str58, "is_mongos");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 30000 + "'", int61 == 30000);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "script" + "'", str66, "script");
        org.junit.Assert.assertNotNull(strSet67);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        boolean boolean6 = builder0.skipInitialImport;
        builder0.setmongoAdminUser("advanced_transformation");
        builder0.setstatisticsTypeName("admin");
        java.lang.String str11 = builder0.scriptType;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.throttleSize = (byte) 10;
        boolean boolean19 = builder8.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.scriptType("index");
        builder26.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder32.mongoAdminUser;
        java.lang.String[] strArray62 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        boolean boolean69 = mongoDBRiverDefinition68.getdropCollection();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition68.getParentTypes();
        builder26.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder8.excludeFields(strSet70);
        java.lang.String str73 = builder72.getmongoDb();
        builder72.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder72.includeCollection("drop_collection");
        java.lang.String str78 = builder77.getmongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        builder7.statisticsIndexName = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.storeStatistics(true);
        builder7.mongoGridFS = false;
        builder7.mongoDb = "password.password";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str43 = mongoDBRiverDefinition39.indexName;
        java.lang.String str44 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        int int45 = mongoDBRiverDefinition39.getSocketTimeout();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "credentials" + "'", str43, "credentials");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "servers" + "'", str44, "servers");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition39.getRiverName();
        com.mongodb.BasicDBObject basicDBObject52 = mongoDBRiverDefinition39.mongoOplogFilter;
        int int53 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean54 = mongoDBRiverDefinition39.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(basicDBObject52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.disableIndexRefresh(false);
        builder14.setskipInitialImport(true);
        builder14.setindexName("bulk_size");
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int23 = builder22.getsocketTimeout();
        boolean boolean24 = builder22.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.advancedTransformation(false);
        builder22.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.isMongos((java.lang.Boolean) true);
        java.lang.String str35 = builder29.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder29.mongoSSLVerifyCertificate(false);
        java.lang.String str38 = builder37.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str40 = builder39.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.indexName("credentials");
        java.lang.String str43 = builder39.getscript();
        boolean boolean44 = builder39.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int46 = builder45.getsocketTimeout();
        boolean boolean47 = builder45.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str49 = builder48.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject52 = builder51.getmongoCollectionFilter();
        builder45.setmongoOplogFilter(basicDBObject52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder39.mongoCollectionFilter(basicDBObject52);
        builder37.setmongoCollectionFilter(basicDBObject52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str57 = builder56.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder56.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject62 = null;
        builder60.setmongoCollectionFilter(basicDBObject62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder60.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder66.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject70 = builder69.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder60.mongoOplogFilter(basicDBObject70);
        builder59.mongoCollectionFilter = basicDBObject70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder37.mongoOplogFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder22.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.RiverSettings riverSettings75 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        org.elasticsearch.script.ScriptService scriptService76 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("port", "servers", riverSettings75, scriptService76);
        java.lang.String str78 = mongoDBRiverDefinition77.getStatisticsIndexName();
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition77.mongoCollectionFilter;
        builder14.mongoOplogFilter = basicDBObject79;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(basicDBObject79);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        builder0.setisMongos((java.lang.Boolean) true);
        builder0.setconnectTimeout(27017);
        builder0.throttleSize = (byte) 1;
        builder0.mongoSecondaryReadPreference = true;
        builder0.setstoreStatistics(false);
        java.lang.String str22 = builder0.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder4.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder4.build();
        boolean boolean7 = mongoDBRiverDefinition6.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition6.getPASSWORD_FIELD();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "password" + "'", str8, "password");
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "concurrent_bulk_requests" + "'", str44, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "bulk" + "'", str46, "bulk");
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        builder38.mongoSSLVerifyCertificate = false;
        boolean boolean46 = builder38.dropCollection;
        builder38.setstatisticsTypeName("actions");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.elasticsearch.common.unit.TimeValue timeValue41 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str42 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str43 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        boolean boolean45 = mongoDBRiverDefinition39.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "size" + "'", str43, "size");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "localhost" + "'", str44, "localhost");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.mongoLocalPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int18 = builder17.getsocketTimeout();
        boolean boolean19 = builder17.mongoUseSSL;
        builder17.statisticsIndexName = "collection";
        java.lang.String str22 = builder17.mongoAdminUser;
        java.lang.String str23 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        java.util.Set<java.lang.String> strSet26 = builder24.getincludeFields();
        java.lang.String str27 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder28.getscript();
        java.lang.String str33 = builder28.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.skipInitialImport(true);
        boolean boolean36 = builder35.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder44.mongoAdminUser;
        java.lang.String[] strArray74 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder44.parentTypes((java.util.Set<java.lang.String>) strSet75);
        builder40.includeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder24.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder17.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder81.throttleSize = (short) 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder81.riverIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.throttleSize((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder87.mongoAdminPassword("disable_index_refresh");
        java.lang.String str90 = builder89.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.getmongoAdminPassword();
        int int3 = builder0.socketTimeout;
        builder0.socketTimeout = 0;
        builder0.setstatisticsIndexName("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        java.lang.String str12 = builder11.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.riverName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.isMongos((java.lang.Boolean) true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = builder58.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder58.throttleSize(30000);
        boolean boolean70 = builder69.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(serverAddressList67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean46 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str47 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "password" + "'", str47, "password");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("ssl", "hi!");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?hi!?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoCollectionFilter;
        java.lang.String str12 = builder0.script;
        java.lang.String str13 = builder0.getmongoLocalUser();
        builder0.mongoLocalUser = ".scripts";
        boolean boolean16 = builder0.mongoUseSSL;
        builder0.mongoSecondaryReadPreference = false;
        builder0.setstatisticsTypeName("null.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsIndexName("type");
        builder14.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.statisticsTypeName("script.disable_dynamic");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        builder0.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoLocalUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int21 = builder20.getsocketTimeout();
        builder20.setskipInitialImport(false);
        boolean boolean24 = builder20.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript25 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript25.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory28 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj29 = docScoreSearchScript25.unwrap((java.lang.Object) docScoreNativeScriptFactory28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.isMongos((java.lang.Boolean) true);
        java.lang.String str36 = builder30.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.mongoSSLVerifyCertificate(false);
        java.lang.String str39 = builder30.riverName;
        java.lang.String str40 = builder30.scriptType;
        builder30.statisticsTypeName = "secondary_read_preference";
        builder30.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder30.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject47 = builder30.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript48 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        builder20.mongoCollectionFilter = basicDBObject47;
        builder19.mongoCollectionFilter = basicDBObject47;
        builder19.setstatisticsIndexName("drop_collection");
        builder19.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder19.mongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(executableScript48);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder8.mongoAdminUser;
        java.lang.String[] strArray38 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.lang.String str45 = mongoDBRiverDefinition44.getSIZE_FIELD();
        boolean boolean46 = mongoDBRiverDefinition44.disableIndexRefresh;
        boolean boolean47 = mongoDBRiverDefinition44.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition44.getMongoCollectionFilter();
        java.lang.String str49 = mongoDBRiverDefinition44.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition44.getScriptType();
        java.lang.Object obj51 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition44);
        java.lang.String str52 = mongoDBRiverDefinition44.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "localhost" + "'", str52, "localhost");
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.getthrottleSize();
        builder7.setmongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder7.mongoAdminPassword("skip_initial_import");
        java.util.Set<java.lang.String> strSet63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder7.excludeFields(strSet63);
        java.lang.String str65 = builder7.getmongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        builder0.setstatisticsTypeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.includeCollection("hi!");
        java.lang.String str14 = builder13.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.typeName("password.password");
        java.lang.String str17 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password.password" + "'", str17, "password.password");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str48 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disable_index_refresh" + "'", str48, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script_type" + "'", str49, "script_type");
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.dropCollection(false);
        java.lang.String str8 = builder0.riverName;
        builder0.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder0.mongoOplogFilter = basicDBObject13;
        builder0.setmongoAdminPassword("ssl");
        builder0.scriptType = "password";
        builder0.includeCollection = "size";
        org.bson.types.Binary binary21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.initialTimestamp(binary21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        java.util.Set<java.lang.String> strSet43 = builder36.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.includeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder36.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder36.statisticsIndexName("socket_timeout");
        builder36.isMongos = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder36.mongoCollection("flush_interval");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "servers" + "'", str47, "servers");
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        org.elasticsearch.common.logging.ESLogger eSLogger48 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str49 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str52 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(eSLogger48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "skip_initial_import" + "'", str49, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "admin" + "'", str50, "admin");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "initial_timestamp" + "'", str51, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "null.null" + "'", str52, "null.null");
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.typeName("bulk");
        boolean boolean11 = builder8.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject38 = builder3.getmongoCollectionFilter();
        java.lang.String str39 = builder3.getincludeCollection();
        java.lang.String str40 = builder3.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverName();
        int int48 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str51 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script" + "'", str49, "script");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "is_mongos" + "'", str51, "is_mongos");
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.Class<?> wildcardClass50 = mongoDBRiverDefinition39.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setstatisticsIndexName("db");
        builder0.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str42 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str43 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "credentials" + "'", str42, "credentials");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "user" + "'", str43, "user");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "store_statistics" + "'", str44, "store_statistics");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "throttle_size" + "'", str45, "throttle_size");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        java.lang.String str9 = builder0.statisticsTypeName;
        java.lang.String str10 = builder0.getscriptType();
        boolean boolean11 = builder0.importAllCollections;
        int int12 = builder0.connectTimeout;
        boolean boolean13 = builder0.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str46 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "host" + "'", str46, "host");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "initial_timestamp" + "'", str47, "initial_timestamp");
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str46 = mongoDBRiverDefinition39.getFILTER_FIELD();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getBULK_FIELD();
        int int49 = mongoDBRiverDefinition39.getConnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_requests" + "'", str43, "concurrent_requests");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "filter" + "'", str46, "filter");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk" + "'", str48, "bulk");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str45 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "flush_interval" + "'", str46, "flush_interval");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "secondary_read_preference" + "'", str47, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "is_mongos" + "'", str48, "is_mongos");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "initial_timestamp" + "'", str49, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bulk_size" + "'", str50, "bulk_size");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "servers" + "'", str51, "servers");
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.riverName;
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str46 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str47 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "localhost" + "'", str46, "localhost");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.script = "is_mongos";
        builder0.throttleSize = 8;
        int int13 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.statisticsTypeName("import_all_collections");
        builder15.mongoLocalUser = "concurrent_requests";
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalUser("script_type");
        builder0.indexName = "initial_timestamp";
        boolean boolean18 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("null.null");
        boolean boolean21 = builder20.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        java.lang.String str6 = builder0.getriverIndexName();
        java.lang.String str7 = builder0.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "store_statistics" + "'", str46, "store_statistics");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "exclude_fields" + "'", str47, "exclude_fields");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder10.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.socketTimeout(32);
        int int17 = builder16.getsocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.mongoLocalUser("concurrent_bulk_requests");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript5 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript5.setNextScore(0.0f);
        docScoreSearchScript5.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        java.lang.String str54 = mongoDBRiverDefinition49.getBULK_TIMEOUT_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition49.getScriptType();
        java.lang.Object obj56 = docScoreSearchScript5.unwrap((java.lang.Object) mongoDBRiverDefinition49);
        java.lang.String str57 = mongoDBRiverDefinition49.getMongoCollection();
        boolean boolean58 = mongoDBRiverDefinition49.getstoreStatistics();
        java.util.Set<java.lang.String> strSet59 = mongoDBRiverDefinition49.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder4.parentTypes(strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoDb("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bulk_timeout" + "'", str54, "bulk_timeout");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.riverName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str68 = builder67.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject71 = builder70.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList72 = builder70.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder70.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet77 = builder70.parentTypes;
        boolean boolean78 = builder70.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder70.dropCollection(false);
        java.lang.String str81 = builder70.riverIndexName;
        java.util.Set<java.lang.String> strSet82 = builder70.getexcludeFields();
        builder70.setmongoAdminPassword("type");
        com.mongodb.BasicDBObject basicDBObject85 = builder70.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder66.mongoCollectionFilter(basicDBObject85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.indexName("gridfs");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(serverAddressList72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertNotNull(basicDBObject85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder4.getriverIndexName();
        builder4.mongoLocalUser = "script";
        java.lang.String str8 = builder4.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoAdminPassword("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.lang.String str56 = mongoDBRiverDefinition50.getCREDENTIALS_FIELD();
        boolean boolean57 = mongoDBRiverDefinition50.dropCollection;
        java.lang.String str58 = mongoDBRiverDefinition50.getSTORE_STATISTICS_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition50.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = mongoDBRiverDefinition50.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder10.mongoServers(serverAddressList60);
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        builder10.setmongoClientOptions(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "credentials" + "'", str56, "credentials");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "store_statistics" + "'", str58, "store_statistics");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "disable_index_refresh" + "'", str59, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        java.lang.String str20 = builder0.getmongoLocalUser();
        builder0.includeCollection = "bulk";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.storeStatistics(true);
        boolean boolean25 = builder0.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        int int15 = mongoDBRiverDefinition14.getConnectTimeout();
        int int16 = mongoDBRiverDefinition14.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (byte) 10);
        java.lang.String str9 = builder8.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoLocalPassword("host");
        boolean boolean12 = builder8.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoUseSSL(false);
        builder14.scriptType = "script.default_lang";
        java.lang.String str17 = builder14.getmongoAdminPassword();
        java.lang.String str18 = builder14.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        builder0.settypeName("throttle_size");
        builder0.setindexName("secondary_read_preference");
        java.lang.String str16 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.connectTimeout((int) (byte) 1);
        boolean boolean19 = builder18.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.throttleSize((-1));
        builder21.setscriptType("script");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        builder5.setriverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.disableIndexRefresh(false);
        builder9.setincludeCollection("type");
        builder9.setmongoDb("advanced_transformation");
        java.lang.String str14 = builder9.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        builder17.setscriptType("user");
        builder17.statisticsTypeName = "secondary_read_preference";
        java.lang.String str23 = builder17.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.mongoLocalPassword;
        builder24.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject28 = builder24.mongoCollectionFilter;
        builder24.mongoGridFS = true;
        int int31 = builder24.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.indexName("credentials");
        java.lang.String str36 = builder35.mongoAdminUser;
        java.lang.String[] strArray65 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder70);
        java.lang.String str72 = mongoDBRiverDefinition71.getSIZE_FIELD();
        boolean boolean73 = mongoDBRiverDefinition71.disableIndexRefresh;
        boolean boolean74 = mongoDBRiverDefinition71.isMongoGridFS();
        java.lang.String str75 = mongoDBRiverDefinition71.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue76 = mongoDBRiverDefinition71.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList77 = mongoDBRiverDefinition71.mongoServers;
        java.lang.String str78 = mongoDBRiverDefinition71.getACTIONS_FIELD();
        java.lang.String str79 = mongoDBRiverDefinition71.getMongoDb();
        boolean boolean80 = mongoDBRiverDefinition71.getdisableIndexRefresh();
        java.lang.String str81 = mongoDBRiverDefinition71.getSOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet82 = mongoDBRiverDefinition71.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder24.excludeFields(strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder17.excludeFields(strSet82);
        builder9.setincludeFields(strSet82);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "size" + "'", str72, "size");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertNotNull(serverAddressList77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "actions" + "'", str78, "actions");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "socket_timeout" + "'", str81, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder0.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.excludeFields(strSet8);
        java.lang.String str10 = builder9.mongoLocalPassword;
        java.lang.String str11 = builder9.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.disableIndexRefresh(false);
        java.lang.String str14 = builder9.script;
        boolean boolean15 = builder9.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index" + "'", str11, "index");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.riverName;
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str49 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "local" + "'", str49, "local");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getHOST_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str43 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "host" + "'", str41, "host");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "secondary_read_preference" + "'", str43, "secondary_read_preference");
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.scriptType("size");
        com.mongodb.BasicDBObject basicDBObject20 = builder8.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder8.isMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsIndexName("type");
        builder14.setadvancedTransformation(false);
        builder14.setriverIndexName("host");
        com.mongodb.BasicDBObject basicDBObject21 = builder14.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(basicDBObject21);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.disableIndexRefresh = false;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        java.lang.String str12 = builder7.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.skipInitialImport(true);
        boolean boolean15 = builder14.getmongoSecondaryReadPreference();
        builder14.setriverName("password");
        builder14.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.storeStatistics(false);
        builder21.riverName = "";
        java.lang.Object obj24 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        org.elasticsearch.common.settings.Settings settings25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        java.lang.String str30 = builder26.getscript();
        boolean boolean31 = builder26.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int33 = builder32.getsocketTimeout();
        boolean boolean34 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject39 = builder38.getmongoCollectionFilter();
        builder32.setmongoOplogFilter(basicDBObject39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder26.mongoCollectionFilter(basicDBObject39);
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings25, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = riverSettings42.settings();
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource(strMap43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "" + "'", obj4, "");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "" + "'", obj24, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap43);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.riverIndexName("sandbox");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder0.script("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.isMongos((java.lang.Boolean) true);
        java.lang.String str41 = builder35.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder35.mongoSSLVerifyCertificate(false);
        builder43.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.skipInitialImport(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = builder43.mongoServers;
        builder43.setriverName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str52 = builder51.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder51.indexName("credentials");
        java.lang.String str55 = builder51.getscript();
        builder51.setincludeCollection("user");
        boolean boolean58 = builder51.mongoUseSSL;
        java.lang.String str59 = builder51.getmongoAdminPassword();
        builder51.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder51.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str65 = builder64.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder64.isMongos((java.lang.Boolean) true);
        java.lang.String str70 = builder64.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder64.mongoSSLVerifyCertificate(false);
        java.lang.String str73 = builder72.getmongoCollection();
        java.lang.String[] strArray88 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder72.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        builder63.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        builder43.parentTypes = strSet89;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder0.includeFields((java.util.Set<java.lang.String>) strSet89);
        builder0.mongoAdminUser = "filter";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder0.mongoAdminPassword = "parent_types";
        java.lang.String str11 = builder0.getriverIndexName();
        int int12 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoSecondaryReadPreference(true);
        boolean boolean15 = builder14.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.includeCollection("flush_interval");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoLocalUser("drop_collection");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        builder5.setdropCollection(false);
        java.lang.String str11 = builder5.getincludeCollection();
        builder5.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoCollection("localhost");
        builder8.dropCollection = false;
        builder8.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.storeStatistics(false);
        int int21 = builder8.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder25.mongoAdminUser;
        java.lang.String[] strArray55 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.lang.String str62 = mongoDBRiverDefinition61.getSIZE_FIELD();
        int int63 = mongoDBRiverDefinition61.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str64 = mongoDBRiverDefinition61.getStatisticsTypeName();
        boolean boolean65 = mongoDBRiverDefinition61.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet66 = mongoDBRiverDefinition61.getIncludeFields();
        java.lang.String str67 = mongoDBRiverDefinition61.getCREDENTIALS_FIELD();
        boolean boolean68 = mongoDBRiverDefinition61.dropCollection;
        java.lang.String str69 = mongoDBRiverDefinition61.getSTORE_STATISTICS_FIELD();
        java.lang.String str70 = mongoDBRiverDefinition61.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean71 = mongoDBRiverDefinition61.isMongoSecondaryReadPreference();
        int int72 = mongoDBRiverDefinition61.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str73 = mongoDBRiverDefinition61.mongoLocalUser;
        boolean boolean74 = mongoDBRiverDefinition61.isMongoUseSSL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList75 = mongoDBRiverDefinition61.getMongoServers();
        builder8.setmongoServers(serverAddressList75);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "size" + "'", str62, "size");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 30000 + "'", int63 == 30000);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "credentials" + "'", str67, "credentials");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "store_statistics" + "'", str69, "store_statistics");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "disable_index_refresh" + "'", str70, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 30000 + "'", int72 == 30000);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(serverAddressList75);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        builder0.mongoGridFS = false;
        int int5 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.statisticsTypeName("concurrent_bulk_requests");
        builder9.settypeName("index");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder3.getscript();
        boolean boolean8 = builder3.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.common.settings.Settings settings20 = riverSettings19.globalSettings();
        org.elasticsearch.script.ScriptService scriptService21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("store_statistics", "script.default_lang", riverSettings19, scriptService21);
        java.lang.String str23 = mongoDBRiverDefinition22.getStatisticsIndexName();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(settings20);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean43 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) (byte) 1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder18.getmongoServers();
        builder18.setadvancedTransformation(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(serverAddressList19);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder0.getexcludeFields();
        java.lang.String str15 = builder0.getscript();
        java.lang.String str16 = builder0.getscript();
        boolean boolean17 = builder0.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "name" + "'", str15, "name");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "name" + "'", str16, "name");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder7.mongoCollection("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject61 = builder7.getmongoOplogFilter();
        boolean boolean62 = builder7.mongoSecondaryReadPreference;
        java.lang.String str63 = builder7.getmongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject64 = builder7.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(basicDBObject61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(basicDBObject64);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        java.util.Set<java.lang.String> strSet20 = builder0.getexcludeFields();
        builder0.mongoCollection = "drop_collection";
        java.util.Set<java.lang.String> strSet23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.includeFields(strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder28.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(true);
        builder32.setthrottleSize((int) (byte) 0);
        java.lang.String str35 = builder32.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int37 = builder36.getsocketTimeout();
        boolean boolean38 = builder36.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str40 = builder39.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.indexName("credentials");
        java.lang.String str43 = builder42.mongoAdminUser;
        java.lang.String[] strArray72 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder42.parentTypes((java.util.Set<java.lang.String>) strSet73);
        builder36.excludeFields = strSet73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder32.includeFields((java.util.Set<java.lang.String>) strSet73);
        builder24.includeFields = strSet73;
        builder24.setmongoCollection("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder24.mongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder82.socketTimeout(97);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "credentials" + "'", str35, "credentials");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "store_statistics" + "'", str43, "store_statistics");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "type" + "'", str44, "type");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "user" + "'", str45, "user");
        org.junit.Assert.assertNull(strSet46);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        builder0.settypeName("advanced_transformation");
        boolean boolean11 = builder0.getmongoGridFS();
        boolean boolean12 = builder0.importAllCollections;
        java.lang.String str13 = builder0.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        builder12.riverIndexName = "script.disable_dynamic";
        builder12.skipInitialImport = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.dropCollection(false);
        builder5.mongoGridFS = true;
        builder5.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.statisticsIndexName("servers");
        int int14 = builder13.getsocketTimeout();
        java.lang.String str15 = builder13.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.throttleSize(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.advancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str43 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str45 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ssl_verify_certificate" + "'", str43, "ssl_verify_certificate");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "bulk_size" + "'", str45, "bulk_size");
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet10 = builder3.parentTypes;
        boolean boolean11 = builder3.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoCollection("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.isMongos((java.lang.Boolean) true);
        java.lang.String str24 = builder18.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.mongoSSLVerifyCertificate(false);
        builder26.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.throttleSize(10);
        builder26.setmongoAdminUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder36.mongoAdminUser;
        java.lang.String[] strArray66 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder36.parentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        java.lang.String str73 = mongoDBRiverDefinition72.getSIZE_FIELD();
        java.lang.String str74 = mongoDBRiverDefinition72.getTHROTTLE_SIZE_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition72.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int76 = mongoDBRiverDefinition72.getDEFAULT_BULK_ACTIONS();
        int int77 = mongoDBRiverDefinition72.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList78 = mongoDBRiverDefinition72.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder26.mongoServers(serverAddressList78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder15.mongoServers(serverAddressList78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.mongoLocalUser("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder82.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder82.script("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "size" + "'", str73, "size");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "throttle_size" + "'", str74, "throttle_size");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "concurrent_bulk_requests" + "'", str75, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1000 + "'", int76 == 1000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 60000 + "'", int77 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("local");
        java.lang.String str12 = builder11.mongoAdminPassword;
        builder11.setstoreStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        builder38.mongoSSLVerifyCertificate = false;
        java.lang.String str46 = builder38.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder38.statisticsIndexName("password");
        boolean boolean49 = builder48.getadvancedTransformation();
        boolean boolean50 = builder48.mongoGridFS;
        org.bson.types.BSONTimestamp bSONTimestamp51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder48.initialTimestamp(bSONTimestamp51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        int int50 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoLocalUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoAdminPassword();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str47 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "collection" + "'", str47, "collection");
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        java.lang.String str14 = builder13.getmongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder13.setmongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.statisticsIndexName("secondary_read_preference");
        builder18.setmongoAdminUser("advanced_transformation");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.setmongoClientOptions(mongoClientOptions21);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoCollection("script.default_lang");
        builder7.setsocketTimeout((int) (byte) -1);
        boolean boolean12 = builder7.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("sandbox", "is_mongos");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?is_mongos?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        java.lang.String str50 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition47.mongoAdminPassword;
        boolean boolean53 = mongoDBRiverDefinition47.isAdvancedTransformation();
        java.lang.String str54 = mongoDBRiverDefinition47.getINDEX_OBJECT();
        boolean boolean55 = mongoDBRiverDefinition47.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp56 = mongoDBRiverDefinition47.getInitialTimestamp();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) wildcardTimestamp56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder59.isMongos((java.lang.Boolean) true);
        java.lang.String str65 = builder59.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder59.mongoSSLVerifyCertificate(false);
        java.lang.String str68 = builder59.riverName;
        boolean boolean69 = builder59.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder59.mongoSecondaryReadPreference(true);
        docScoreSearchScript0.setNextVar("local", (java.lang.Object) builder71);
        builder71.throttleSize = (short) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder71.storeStatistics(false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "host" + "'", obj6, "host");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "actions" + "'", str50, "actions");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "actions" + "'", str51, "actions");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "index" + "'", str54, "index");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardTimestamp56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str47 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str49 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str50 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str51 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "flush_interval" + "'", str47, "flush_interval");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "parent_types" + "'", str51, "parent_types");
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        builder8.setconnectTimeout(8);
        builder8.setdropCollection(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.getmongoClientOptions();
        builder8.advancedTransformation = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("actions");
        builder0.dropCollection = true;
        java.lang.String str13 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.statisticsTypeName("type");
        boolean boolean18 = builder15.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.riverIndexName(".scripts");
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        builder12.mongoClientOptions = mongoClientOptions13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder18.mongoAdminUser;
        java.lang.String[] strArray48 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        java.util.Set<java.lang.String> strSet55 = builder53.getincludeFields();
        int int56 = builder53.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int58 = builder57.getsocketTimeout();
        boolean boolean59 = builder57.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder60.indexName("credentials");
        java.lang.String str64 = builder63.mongoAdminUser;
        java.lang.String[] strArray93 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet94 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet94, strArray93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder63.parentTypes((java.util.Set<java.lang.String>) strSet94);
        builder57.excludeFields = strSet94;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder53.parentTypes((java.util.Set<java.lang.String>) strSet94);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet94);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setmongoUseSSL(true);
        java.lang.String str10 = builder5.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.script("");
        builder5.setthrottleSize(0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.mongoGridFS = true;
        java.lang.String str8 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.scriptType("script.disable_dynamic");
        boolean boolean11 = builder10.getmongoSecondaryReadPreference();
        builder10.mongoAdminPassword = "filter";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.dropCollection(false);
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        builder15.mongoClientOptions = mongoClientOptions16;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet8 = null;
        builder0.parentTypes = strSet8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.throttleSize((int) (short) 1);
        builder11.mongoSecondaryReadPreference = false;
        builder11.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.statisticsTypeName("bulk_timeout");
        builder11.mongoSecondaryReadPreference = true;
        java.lang.String str20 = builder11.getmongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.riverIndexName("sandbox");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder0.script("");
        java.lang.String str35 = builder34.getstatisticsIndexName();
        java.lang.String str36 = builder34.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.scriptType("name");
        builder13.riverIndexName = "script_type";
        java.lang.String str16 = builder13.riverName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder13.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        java.lang.String str6 = builder0.mongoCollection;
        java.lang.String str7 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        builder9.setmongoCollection("throttle_size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoAdminUser();
        boolean boolean42 = mongoDBRiverDefinition39.getmongoUseSSL();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.script;
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str51 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "throttle_size" + "'", str48, "throttle_size");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "include_fields" + "'", str51, "include_fields");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "initial_timestamp" + "'", str52, "initial_timestamp");
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "advanced_transformation" + "'", str44, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1000 + "'", int45 == 1000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder6.setmongoGridFS(false);
        java.lang.String str26 = builder6.gettypeName();
        builder6.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder6.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("password.password");
        builder32.setmongoCollection("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder15.getscript();
        boolean boolean20 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int22 = builder21.getsocketTimeout();
        boolean boolean23 = builder21.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder21.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder15.mongoCollectionFilter(basicDBObject28);
        builder8.setmongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject36 = builder35.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder35.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder8.mongoServers(serverAddressList37);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder8.mongoCollectionFilter = basicDBObject39;
        builder8.includeCollection = "password";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.setskipInitialImport(true);
        builder8.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        int int23 = builder21.getthrottleSize();
        java.util.Set<java.lang.String> strSet24 = builder21.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder25.getscript();
        java.lang.String str30 = builder25.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder25.skipInitialImport(true);
        boolean boolean33 = builder32.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.indexName("credentials");
        java.lang.String str42 = builder41.mongoAdminUser;
        java.lang.String[] strArray71 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.parentTypes((java.util.Set<java.lang.String>) strSet72);
        builder37.includeFields = strSet72;
        builder21.setincludeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet72);
        java.lang.String str78 = builder8.mongoLocalPassword;
        builder8.setmongoLocalUser("gridfs");
        java.util.List<com.mongodb.ServerAddress> serverAddressList81 = builder8.getmongoServers();
        java.lang.String str82 = builder8.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions83 = null;
        builder8.setmongoClientOptions(mongoClientOptions83);
        builder8.script = "filter";
        java.lang.String str87 = builder8.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(serverAddressList81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "filter" + "'", str87, "filter");
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl_verify_certificate" + "'", str44, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl_verify_certificate" + "'", str48, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "collection" + "'", str49, "collection");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoDb("");
        java.lang.Class<?> wildcardClass17 = builder14.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder15.getscript();
        boolean boolean20 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int22 = builder21.getsocketTimeout();
        boolean boolean23 = builder21.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder21.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder15.mongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder14.mongoOplogFilter(basicDBObject28);
        java.lang.String str32 = builder31.mongoAdminPassword;
        int int33 = builder31.connectTimeout;
        boolean boolean34 = builder31.advancedTransformation;
        docScoreSearchScript0.setNextVar("script.default_lang", (java.lang.Object) builder31);
        docScoreSearchScript0.setNextScore((float) 60000);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext38 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "host" + "'", obj6, "host");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.indexName;
        java.lang.String str45 = mongoDBRiverDefinition39.statisticsIndexName;
        int int46 = mongoDBRiverDefinition39.socketTimeout;
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "skip_initial_import" + "'", str43, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        builder7.setscriptType("user");
        builder7.statisticsTypeName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder16.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        java.lang.String str26 = builder21.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.skipInitialImport(true);
        boolean boolean29 = builder28.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.indexName("credentials");
        java.lang.String str38 = builder37.mongoAdminUser;
        java.lang.String[] strArray67 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet68);
        builder33.includeFields = strSet68;
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet68);
        builder7.excludeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder0.includeFields((java.util.Set<java.lang.String>) strSet68);
        boolean boolean75 = builder74.importAllCollections;
        builder74.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder74.importAllCollections(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoAdminUser("db");
        com.mongodb.BasicDBObject basicDBObject13 = builder7.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.importAllCollections(true);
        com.mongodb.BasicDBObject basicDBObject13 = builder10.mongoCollectionFilter;
        builder10.setskipInitialImport(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.statisticsTypeName = ".scripts";
        boolean boolean9 = builder6.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(false);
        boolean boolean12 = builder6.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollection("hi!");
        builder14.storeStatistics = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.skipInitialImport(true);
        builder8.setscript("bulk_size");
        java.lang.String str14 = builder8.script;
        builder8.statisticsTypeName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.scriptType("include_fields");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.mongoOplogFilter(basicDBObject19);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        java.util.Set<java.lang.String> strSet20 = builder0.getexcludeFields();
        builder0.mongoCollection = "drop_collection";
        java.util.Set<java.lang.String> strSet23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.includeFields(strSet23);
        boolean boolean25 = builder0.getstoreStatistics();
        boolean boolean26 = builder0.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.throttleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.statisticsTypeName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.socketTimeout((int) (byte) 10);
        java.lang.String str40 = builder39.statisticsTypeName;
        builder39.setmongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "localhost" + "'", str40, "localhost");
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str52 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        int int54 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.Boolean boolean55 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition39.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "type" + "'", str52, "type");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "socket_timeout" + "'", str53, "socket_timeout");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(boolean55);
        org.junit.Assert.assertNull(strSet56);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        java.lang.String str11 = builder3.mongoLocalUser;
        java.lang.String str12 = builder3.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(1);
        builder56.importAllCollections = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        java.lang.String str15 = mongoDBRiverDefinition14.riverIndexName;
        boolean boolean16 = mongoDBRiverDefinition14.isDropCollection();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition14.includeFields;
        java.lang.String str18 = mongoDBRiverDefinition14.getMongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.riverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        builder8.setmongoLocalUser("null.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverName();
        boolean boolean48 = mongoDBRiverDefinition39.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        boolean boolean50 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        boolean boolean12 = builder8.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        boolean boolean25 = builder20.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int27 = builder26.getsocketTimeout();
        boolean boolean28 = builder26.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject33 = builder32.getmongoCollectionFilter();
        builder26.setmongoOplogFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder20.mongoCollectionFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder19.mongoOplogFilter(basicDBObject33);
        builder8.setmongoOplogFilter(basicDBObject33);
        builder0.setmongoCollectionFilter(basicDBObject33);
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        builder0.setmongoClientOptions(mongoClientOptions39);
        java.lang.String str41 = builder0.getriverName();
        builder0.setmongoAdminPassword("hi!");
        java.util.Set<java.lang.String> strSet44 = builder0.includeFields;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strSet44);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        boolean boolean6 = builder0.mongoSecondaryReadPreference;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoClientOptions(mongoClientOptions7);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.typeName("password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.getriverIndexName();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalUser("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        builder14.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject17 = builder14.mongoOplogFilter;
        boolean boolean18 = builder14.mongoSSLVerifyCertificate;
        boolean boolean19 = builder14.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder22.setmongoCollectionFilter(basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        java.lang.String str30 = builder26.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.scriptType("index");
        builder32.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.indexName("credentials");
        java.lang.String str39 = builder38.mongoAdminUser;
        java.lang.String[] strArray68 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder38.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder73);
        boolean boolean75 = mongoDBRiverDefinition74.getdropCollection();
        java.util.Set<java.lang.String> strSet76 = mongoDBRiverDefinition74.getParentTypes();
        builder32.parentTypes = strSet76;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder22.parentTypes(strSet76);
        builder21.setparentTypes(strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder10.includeFields(strSet76);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder7.socketTimeout(8);
        java.lang.String str62 = builder61.script;
        builder61.setstoreStatistics(true);
        java.lang.String str65 = builder61.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        java.lang.String str6 = builder0.getmongoLocalPassword();
        builder0.setmongoUseSSL(true);
        builder0.statisticsTypeName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminUser("is_mongos");
        builder0.storeStatistics = false;
        int int15 = builder0.socketTimeout;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str46 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsIndexName;
        boolean boolean48 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str49 = mongoDBRiverDefinition39.riverName;
        java.lang.String str50 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "include_collection" + "'", str50, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder10.getscript();
        java.lang.String str15 = builder10.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.indexName("index");
        builder19.setmongoAdminPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder25.mongoAdminUser;
        java.lang.String[] strArray55 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.lang.String str62 = mongoDBRiverDefinition61.getSIZE_FIELD();
        boolean boolean63 = mongoDBRiverDefinition61.disableIndexRefresh;
        java.lang.String str64 = mongoDBRiverDefinition61.getACTIONS_FIELD();
        java.lang.String str65 = mongoDBRiverDefinition61.statisticsTypeName;
        boolean boolean66 = mongoDBRiverDefinition61.isAdvancedTransformation();
        java.lang.String str67 = mongoDBRiverDefinition61.riverIndexName;
        java.lang.String str68 = mongoDBRiverDefinition61.getIS_MONGOS_FIELD();
        java.lang.String str69 = mongoDBRiverDefinition61.mongoAdminPassword;
        java.lang.String str70 = mongoDBRiverDefinition61.getSSL_CONNECTION_FIELD();
        java.lang.String str71 = mongoDBRiverDefinition61.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition61.parentTypes;
        builder19.setincludeFields(strSet72);
        builder5.setexcludeFields(strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder5.throttleSize((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder5.mongoSecondaryReadPreference(false);
        builder5.setindexName("script_type.null");
        builder5.setriverName("flush_interval");
        int int83 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder5.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "size" + "'", str62, "size");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "actions" + "'", str64, "actions");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "is_mongos" + "'", str68, "is_mongos");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ssl" + "'", str70, "ssl");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "concurrent_requests" + "'", str71, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        java.util.Set<java.lang.String> strSet43 = builder36.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.includeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder36.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder36.mongoCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder36.skipInitialImport(false);
        boolean boolean52 = builder36.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        boolean boolean45 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getParentTypes();
        int int47 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str49 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str51 = mongoDBRiverDefinition39.getTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "admin" + "'", str49, "admin");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str48 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "flush_interval" + "'", str46, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "servers" + "'", str49, "servers");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "initial_timestamp" + "'", str50, "initial_timestamp");
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        builder0.typeName = "script_type";
        java.lang.String str7 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoUseSSL(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet8 = null;
        builder0.parentTypes = strSet8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.throttleSize((int) (short) 1);
        builder11.mongoSecondaryReadPreference = false;
        builder11.riverName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.statisticsTypeName("bulk_timeout");
        int int18 = builder11.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        builder0.typeName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.socketTimeout((int) (short) 10);
        builder0.setincludeCollection("admin");
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoLocalUser("credentials");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        builder0.setmongoClientOptions(mongoClientOptions20);
        java.lang.String str22 = builder0.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "credentials" + "'", str22, "credentials");
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean48 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.String str49 = mongoDBRiverDefinition39.getTYPE_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.isSkipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "type" + "'", str49, "type");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverIndexName("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.isMongos((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str46 = mongoDBRiverDefinition39.getIncludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoCollection("localhost");
        builder8.dropCollection = false;
        builder8.scriptType = "initial_timestamp";
        java.lang.String str19 = builder8.statisticsTypeName;
        java.lang.String str20 = builder8.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "import_all_collections" + "'", str20, "import_all_collections");
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean45 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        int int46 = mongoDBRiverDefinition39.throttleSize;
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.isMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(boolean47);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.mongoSSLVerifyCertificate;
        java.lang.String str14 = mongoDBRiverDefinition12.getTypeName();
        boolean boolean15 = mongoDBRiverDefinition12.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition12.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.statisticsIndexName;
        boolean boolean54 = mongoDBRiverDefinition51.isStoreStatistics();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition51.includeFields;
        java.lang.String str56 = mongoDBRiverDefinition51.getMongoDb();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str48 = mongoDBRiverDefinition39.getBULK_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk" + "'", str48, "bulk");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        builder3.setisMongos((java.lang.Boolean) false);
        com.mongodb.BasicDBObject basicDBObject12 = builder3.getmongoOplogFilter();
        java.lang.String str13 = builder3.getriverIndexName();
        java.util.Set<java.lang.String> strSet14 = builder3.parentTypes;
        builder3.scriptType = "script.default_lang";
        boolean boolean17 = builder3.getskipInitialImport();
        java.lang.String str18 = builder3.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        int int47 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition39.getisMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(boolean51);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.setconnectTimeout((int) (short) 1);
        builder0.scriptType = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.statisticsTypeName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        boolean boolean20 = builder18.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder21.setmongoCollectionFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.mongoAdminUser("gridfs");
        builder21.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoOplogFilter();
        java.lang.String str32 = builder30.gettypeName();
        builder30.setscriptType("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.indexName("credentials");
        java.lang.String str39 = builder38.mongoAdminUser;
        java.lang.String[] strArray68 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder38.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder73);
        java.lang.String str75 = mongoDBRiverDefinition74.getSIZE_FIELD();
        java.lang.String str76 = mongoDBRiverDefinition74.getTHROTTLE_SIZE_FIELD();
        java.lang.String str77 = mongoDBRiverDefinition74.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean78 = mongoDBRiverDefinition74.getmongoGridFS();
        java.util.Set<java.lang.String> strSet79 = mongoDBRiverDefinition74.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder30.excludeFields(strSet79);
        builder18.parentTypes = strSet79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.excludeFields(strSet79);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(basicDBObject31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "size" + "'", str75, "size");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "throttle_size" + "'", str76, "throttle_size");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "concurrent_bulk_requests" + "'", str77, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        builder0.setadvancedTransformation(true);
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        int int12 = builder10.getthrottleSize();
        java.util.Set<java.lang.String> strSet13 = builder10.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int15 = builder14.getsocketTimeout();
        boolean boolean16 = builder14.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.advancedTransformation(false);
        java.lang.String str19 = builder18.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder18.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        boolean boolean26 = builder21.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet27 = builder21.parentTypes;
        builder21.settypeName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        java.util.Set<java.lang.String> strSet70 = builder68.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject71 = builder68.mongoCollectionFilter;
        builder21.setmongoOplogFilter(basicDBObject71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder18.mongoCollectionFilter(basicDBObject71);
        builder10.setmongoOplogFilter(basicDBObject71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder0.mongoCollectionFilter(basicDBObject71);
        java.lang.String str76 = builder0.mongoDb;
        builder0.riverIndexName = "is_mongos";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str49 = mongoDBRiverDefinition39.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        java.lang.String str49 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "initial_timestamp" + "'", str47, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "connect_timeout" + "'", str48, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "name" + "'", str49, "name");
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp47 = mongoDBRiverDefinition39.initialTimestamp;
        boolean boolean48 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        int int49 = mongoDBRiverDefinition39.getConnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getStatisticsIndexName();
        org.elasticsearch.common.logging.ESLogger eSLogger46 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str47 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk" + "'", str44, "bulk");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(eSLogger46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        boolean boolean2 = builder0.importAllCollections;
        int int3 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = builder0.build();
        java.lang.String str5 = mongoDBRiverDefinition4.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean41 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str47 = mongoDBRiverDefinition39.includeCollection;
        boolean boolean48 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        boolean boolean49 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        java.lang.String str50 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str51 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean52 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str53 = mongoDBRiverDefinition39.getMongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "localhost" + "'", str50, "localhost");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "concurrent_requests" + "'", str51, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "initial_timestamp" + "'", str53, "initial_timestamp");
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue48 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        java.lang.String str49 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "is_mongos" + "'", str47, "is_mongos");
        org.junit.Assert.assertNotNull(byteSizeValue48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "parent_types" + "'", str49, "parent_types");
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str47 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.String str48 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "servers" + "'", str48, "servers");
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        builder23.setsocketTimeout((int) (short) 10);
        java.lang.String str26 = builder23.getscript();
        com.mongodb.BasicDBObject basicDBObject27 = builder23.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet28 = builder23.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNull(strSet28);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean41 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str44 = mongoDBRiverDefinition39.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.statisticsTypeName;
        java.lang.String str19 = mongoDBRiverDefinition17.getSTORE_STATISTICS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition17.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "store_statistics" + "'", str19, "store_statistics");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "exclude_fields" + "'", str20, "exclude_fields");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.mongoClientOptions(mongoClientOptions13);
        java.lang.String str15 = builder7.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.riverIndexName("connect_timeout");
        java.lang.String str18 = builder7.getmongoCollection();
        builder7.mongoUseSSL = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet10 = builder3.parentTypes;
        boolean boolean11 = builder3.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(false);
        java.lang.String str14 = builder3.riverIndexName;
        java.util.Set<java.lang.String> strSet15 = builder3.getexcludeFields();
        builder3.setmongoAdminPassword("type");
        int int18 = builder3.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        java.util.Set<java.lang.String> strSet8 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.indexName("index");
        java.lang.String str11 = builder10.getincludeCollection();
        int int12 = builder10.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.dropCollection(true);
        builder10.advancedTransformation = true;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.throttleSize = (byte) 10;
        boolean boolean19 = builder8.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.scriptType("index");
        builder26.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder32.mongoAdminUser;
        java.lang.String[] strArray62 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        boolean boolean69 = mongoDBRiverDefinition68.getdropCollection();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition68.getParentTypes();
        builder26.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder8.excludeFields(strSet70);
        java.lang.String str73 = builder72.getmongoDb();
        builder72.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder72.includeCollection("drop_collection");
        com.mongodb.MongoClientOptions mongoClientOptions78 = null;
        builder77.mongoClientOptions = mongoClientOptions78;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.lang.String str9 = builder0.includeCollection;
        builder0.indexName = "initial_timestamp";
        java.lang.String str12 = builder0.getriverName();
        boolean boolean13 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.socketTimeout((int) (short) 10);
        builder15.setsocketTimeout(27017);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        int int43 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean46 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.lang.String str47 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str48 = mongoDBRiverDefinition39.typeName;
        java.lang.String str49 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "user" + "'", str49, "user");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "password" + "'", str50, "password");
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str43 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "script" + "'", str43, "script");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "exclude_fields" + "'", str44, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.mongoGridFS(false);
        boolean boolean57 = builder56.storeStatistics;
        builder56.statisticsIndexName = "";
        builder56.setdisableIndexRefresh(false);
        builder56.mongoUseSSL = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        boolean boolean5 = builder3.mongoGridFS;
        builder3.indexName = "drop_collection";
        builder3.setstatisticsTypeName("host");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        builder5.setriverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoAdminPassword("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        int int51 = mongoDBRiverDefinition49.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str52 = mongoDBRiverDefinition49.getStatisticsTypeName();
        boolean boolean53 = mongoDBRiverDefinition49.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition49.getIncludeFields();
        java.lang.String str55 = mongoDBRiverDefinition49.getCREDENTIALS_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition49.getFLUSH_INTERVAL_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition49.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str58 = mongoDBRiverDefinition49.getIS_MONGOS_FIELD();
        java.lang.String str59 = mongoDBRiverDefinition49.getINITIAL_TIMESTAMP_FIELD();
        java.util.Set<java.lang.String> strSet60 = mongoDBRiverDefinition49.getParentTypes();
        builder5.setincludeFields(strSet60);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 30000 + "'", int51 == 30000);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "credentials" + "'", str55, "credentials");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "flush_interval" + "'", str56, "flush_interval");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "secondary_read_preference" + "'", str57, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "is_mongos" + "'", str58, "is_mongos");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "initial_timestamp" + "'", str59, "initial_timestamp");
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        java.util.Set<java.lang.String> strSet7 = builder0.includeFields;
        java.lang.String str8 = builder0.includeCollection;
        java.lang.String str9 = builder0.mongoAdminPassword;
        builder0.includeCollection = "include_fields";
        java.lang.String str12 = builder0.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        int int48 = mongoDBRiverDefinition39.getSocketTimeout();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue49);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = mongoDBRiverDefinition51.getdropCollection();
        java.lang.String str53 = mongoDBRiverDefinition51.getGRIDFS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition51.getSSL_VERIFY_CERT_FIELD();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) str54);
        java.lang.Object obj57 = null;
        docScoreSearchScript0.setNextVar("connect_timeout", obj57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder59.setmongoCollectionFilter(basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder59.mongoAdminUser("gridfs");
        builder59.setadvancedTransformation(false);
        builder59.setstatisticsTypeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder59.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.riverIndexName(".scripts");
        java.lang.Object obj73 = docScoreSearchScript0.unwrap((java.lang.Object) ".scripts");
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gridfs" + "'", str53, "gridfs");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ssl_verify_certificate" + "'", str54, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "ssl_verify_certificate" + "'", obj55, "ssl_verify_certificate");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + ".scripts" + "'", obj73, ".scripts");
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.indexName("credentials");
        java.lang.String str41 = builder37.getscript();
        java.lang.String str42 = builder37.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder37.skipInitialImport(true);
        boolean boolean45 = builder44.getmongoSecondaryReadPreference();
        builder44.setriverName("password");
        java.util.Set<java.lang.String> strSet48 = builder44.getexcludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = builder44.mongoServers;
        builder3.mongoServers = serverAddressList49;
        java.lang.String str51 = builder3.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(serverAddressList49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder0.getinitialTimestamp();
        java.lang.String str13 = builder0.riverName;
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder0.setmongoClientOptions(mongoClientOptions14);
        builder0.setstoreStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.scriptType("script_type");
        builder33.mongoAdminPassword = "sandbox";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean50 = mongoDBRiverDefinition39.getmongoUseSSL();
        boolean boolean51 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.Boolean boolean52 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str53 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "initial_timestamp" + "'", str53, "initial_timestamp");
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoLocalUser("bulk");
        builder9.setmongoDb("socket_timeout");
        builder9.mongoAdminPassword = "port";
        boolean boolean14 = builder9.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String str19 = builder10.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList62 = mongoDBRiverDefinition59.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder10.mongoServers(serverAddressList62);
        builder9.setmongoServers(serverAddressList62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder9.storeStatistics(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder9.mongoClientOptions;
        java.lang.String str68 = builder9.indexName;
        builder9.setisMongos((java.lang.Boolean) false);
        int int71 = builder9.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(serverAddressList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(mongoClientOptions67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "credentials" + "'", str68, "credentials");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str52 = mongoDBRiverDefinition39.getScript();
        boolean boolean53 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean54 = mongoDBRiverDefinition39.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoAdminUser();
        boolean boolean42 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str43 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "skip_initial_import" + "'", str43, "skip_initial_import");
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.getADVANCED_TRANSFORMATION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp54 = mongoDBRiverDefinition51.getInitialTimestamp();
        java.lang.String str55 = mongoDBRiverDefinition51.riverIndexName;
        java.lang.Boolean boolean56 = mongoDBRiverDefinition51.isMongos();
        boolean boolean57 = mongoDBRiverDefinition51.getmongoGridFS();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "advanced_transformation" + "'", str53, "advanced_transformation");
        org.junit.Assert.assertNull(wildcardTimestamp54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject38 = builder3.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder3.typeName("admin");
        java.lang.String str41 = builder3.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder3.mongoAdminUser("name");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(basicDBObject38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "admin" + "'", str41, "admin");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        boolean boolean63 = builder62.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList64 = builder62.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(serverAddressList64);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        boolean boolean6 = builder0.skipInitialImport;
        builder0.setmongoGridFS(false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        builder8.setthrottleSize((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder8.mongoLocalUser("credentials");
        builder23.setmongoUseSSL(true);
        builder23.riverIndexName = "skip_initial_import";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str44 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "exclude_fields" + "'", str44, "exclude_fields");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder0.getmongoClientOptions();
        org.bson.types.Binary binary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.initialTimestamp(binary17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        builder12.setadvancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.skipInitialImport(false);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.mongoClientOptions;
        boolean boolean20 = builder18.getmongoGridFS();
        int int21 = builder18.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.mongoCollection("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str46 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoDb;
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "actions" + "'", str44, "actions");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str42 = mongoDBRiverDefinition39.typeName;
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "parent_types" + "'", str45, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        java.lang.String str15 = builder12.getincludeCollection();
        builder12.connectTimeout = 27017;
        java.lang.String str18 = builder12.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        java.lang.String str24 = builder19.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.indexName("index");
        builder26.statisticsIndexName = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder33.isMongos((java.lang.Boolean) true);
        java.lang.String str39 = builder33.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.mongoSSLVerifyCertificate(false);
        java.lang.String str42 = builder41.getmongoCollection();
        java.lang.String[] strArray57 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str62 = builder61.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.indexName("credentials");
        java.lang.String str65 = builder61.getscript();
        builder61.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder61.mongoSSLVerifyCertificate(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList70 = builder61.mongoServers;
        builder41.setmongoServers(serverAddressList70);
        java.util.Set<java.lang.String> strSet72 = builder41.getparentTypes();
        builder26.setexcludeFields(strSet72);
        builder12.excludeFields = strSet72;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(serverAddressList70);
        org.junit.Assert.assertNotNull(strSet72);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.statisticsTypeName;
        java.lang.String str19 = mongoDBRiverDefinition17.mongoAdminPassword;
        boolean boolean20 = mongoDBRiverDefinition17.isImportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        boolean boolean45 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition39.mongoClientOptions;
        boolean boolean48 = mongoDBRiverDefinition39.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        boolean boolean10 = builder0.getmongoUseSSL();
        boolean boolean11 = builder0.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder17.getscript();
        java.lang.String str22 = builder17.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder17.skipInitialImport(true);
        boolean boolean25 = builder24.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder29.includeFields = strSet64;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder16.setdisableIndexRefresh(false);
        boolean boolean71 = builder16.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str73 = builder72.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder72.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder72.isMongos((java.lang.Boolean) true);
        builder77.setmongoSSLVerifyCertificate(true);
        java.lang.String str80 = builder77.getmongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject81 = null;
        builder77.mongoCollectionFilter = basicDBObject81;
        java.lang.String str83 = builder77.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str85 = builder84.statisticsIndexName;
        int int86 = builder84.getthrottleSize();
        java.util.Set<java.lang.String> strSet87 = builder84.parentTypes;
        builder84.mongoLocalUser = "";
        boolean boolean90 = builder84.getskipInitialImport();
        builder84.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList93 = builder84.getmongoServers();
        builder77.mongoServers = serverAddressList93;
        builder16.mongoServers = serverAddressList93;
        boolean boolean96 = builder16.mongoUseSSL;
        int int97 = builder16.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNull(strSet87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(serverAddressList93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.riverIndexName = "bulk";
        builder12.setscriptType("");
        com.mongodb.BasicDBObject basicDBObject17 = builder12.getmongoOplogFilter();
        boolean boolean18 = builder12.mongoSecondaryReadPreference;
        builder12.throttleSize = (short) 1;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setmongoDb("script.disable_dynamic");
        boolean boolean9 = builder6.getmongoSecondaryReadPreference();
        boolean boolean10 = builder6.skipInitialImport;
        java.lang.String str11 = builder6.getriverName();
        java.lang.String str12 = builder6.mongoCollection;
        boolean boolean13 = builder6.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.getriverName();
        java.lang.String str13 = builder0.getmongoLocalUser();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.Boolean boolean48 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str50 = mongoDBRiverDefinition39.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions51 = mongoDBRiverDefinition39.getMongoClientOptions();
        boolean boolean52 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        boolean boolean53 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoDb();
        boolean boolean52 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str53 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str54 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean55 = mongoDBRiverDefinition39.isMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "script" + "'", str54, "script");
        org.junit.Assert.assertNull(boolean55);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.getIncludeCollection();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getExcludeFields();
        boolean boolean48 = mongoDBRiverDefinition39.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        builder0.setstatisticsTypeName("options");
        java.lang.String str10 = builder0.getscript();
        builder0.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str52 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str55 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "gridfs" + "'", str52, "gridfs");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ssl_verify_certificate" + "'", str53, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "initial_timestamp" + "'", str55, "initial_timestamp");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        builder3.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.advancedTransformation(true);
        java.lang.String str14 = builder3.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.throttleSize(10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        java.lang.String str6 = builder0.getmongoLocalPassword();
        builder0.setmongoUseSSL(true);
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder13.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.disableIndexRefresh(true);
        builder17.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.isMongos((java.lang.Boolean) true);
        java.lang.String str28 = builder22.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject31 = builder22.mongoCollectionFilter;
        builder17.setmongoCollectionFilter(basicDBObject31);
        builder0.mongoOplogFilter = basicDBObject31;
        builder0.setadvancedTransformation(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl_verify_certificate" + "'", str44, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "flush_interval" + "'", str46, "flush_interval");
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str50 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int51 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str52 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ssl" + "'", str50, "ssl");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 60000 + "'", int51 == 60000);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "socket_timeout" + "'", str52, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "drop_collection" + "'", str53, "drop_collection");
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        builder36.throttleSize = (byte) 100;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp39 = builder36.initialTimestamp;
        java.lang.String str40 = builder36.getincludeCollection();
        builder36.advancedTransformation = false;
        builder36.connectTimeout = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder36.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder36.importAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(wildcardTimestamp39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        builder5.setriverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.connectTimeout((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoUseSSL(false);
        int int14 = builder13.throttleSize;
        boolean boolean15 = builder13.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("user");
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        int int14 = builder12.getthrottleSize();
        java.util.Set<java.lang.String> strSet15 = builder12.parentTypes;
        builder12.mongoLocalUser = "";
        builder12.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet20 = null;
        builder12.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder22.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.scriptType("index");
        builder28.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject31 = builder28.getmongoCollectionFilter();
        builder12.setmongoCollectionFilter(basicDBObject31);
        builder0.mongoOplogFilter = basicDBObject31;
        builder0.setscript(".scripts");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject31);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getmongoGridFS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition39.mongoServers;
        boolean boolean49 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str50 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "password" + "'", str50, "password");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "advanced_transformation" + "'", str51, "advanced_transformation");
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        boolean boolean46 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        int int48 = mongoDBRiverDefinition39.getSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        builder5.setmongoCollection("initial_timestamp");
        java.lang.String str11 = builder5.getmongoCollection();
        builder5.script = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        builder5.mongoOplogFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.script.ScriptService scriptService21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("bulk_timeout", "host", riverSettings20, scriptService21);
        org.elasticsearch.common.settings.Settings settings23 = riverSettings20.globalSettings();
        org.elasticsearch.script.ScriptService scriptService24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script.disable_dynamic", "actions", riverSettings20, scriptService24);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNull(settings23);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.mongoGridFS = true;
        java.lang.String str8 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.scriptType("script.disable_dynamic");
        boolean boolean11 = builder10.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminUser("admin");
        builder10.setimportAllCollections(true);
        builder10.settypeName("local");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder15.getscript();
        boolean boolean20 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int22 = builder21.getsocketTimeout();
        boolean boolean23 = builder21.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder21.setmongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder15.mongoCollectionFilter(basicDBObject28);
        builder8.setmongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject36 = builder35.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder35.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder8.mongoServers(serverAddressList37);
        java.lang.String str39 = builder38.mongoLocalUser;
        boolean boolean40 = builder38.advancedTransformation;
        java.lang.String str41 = builder38.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "import_all_collections" + "'", str41, "import_all_collections");
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) (byte) 10);
        builder8.setincludeCollection("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.connectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.dropCollection(true);
        java.lang.String str15 = builder14.statisticsIndexName;
        java.lang.String str16 = builder14.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.statisticsIndexName = "collection";
        java.lang.String str5 = builder0.getmongoLocalUser();
        builder0.storeStatistics = false;
        boolean boolean8 = builder0.getdisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder0.getmongoClientOptions();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(mongoClientOptions9);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.riverName;
        org.elasticsearch.common.logging.ESLogger eSLogger43 = mongoDBRiverDefinition39.getlogger();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos;
        boolean boolean45 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str46 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str48 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition39.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(eSLogger43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_requests" + "'", str48, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "initial_timestamp" + "'", str49, "initial_timestamp");
        org.junit.Assert.assertNull(mongoClientOptions50);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        int int6 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsTypeName("secondary_read_preference");
        java.lang.String str11 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.disableIndexRefresh(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "localhost" + "'", str11, "localhost");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoLocalUser("password");
        java.util.Set<java.lang.String> strSet22 = builder21.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder23.setmongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.mongoAdminUser("gridfs");
        builder23.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder23.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject33 = builder32.getmongoOplogFilter();
        builder32.statisticsIndexName = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.statisticsIndexName("actions");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript38 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript38.setNextScore(0.0f);
        docScoreSearchScript38.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str44 = builder43.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.indexName("credentials");
        java.lang.String str47 = builder46.mongoAdminUser;
        java.lang.String[] strArray76 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder46.parentTypes((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder81);
        java.lang.String str83 = mongoDBRiverDefinition82.getSIZE_FIELD();
        boolean boolean84 = mongoDBRiverDefinition82.disableIndexRefresh;
        boolean boolean85 = mongoDBRiverDefinition82.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject86 = mongoDBRiverDefinition82.getMongoCollectionFilter();
        java.lang.String str87 = mongoDBRiverDefinition82.getBULK_TIMEOUT_FIELD();
        java.lang.String str88 = mongoDBRiverDefinition82.getScriptType();
        java.lang.Object obj89 = docScoreSearchScript38.unwrap((java.lang.Object) mongoDBRiverDefinition82);
        java.lang.String str90 = mongoDBRiverDefinition82.getMongoCollection();
        boolean boolean91 = mongoDBRiverDefinition82.getstoreStatistics();
        java.util.Set<java.lang.String> strSet92 = mongoDBRiverDefinition82.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder37.excludeFields(strSet92);
        builder21.includeFields = strSet92;
        builder21.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "size" + "'", str83, "size");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(basicDBObject86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "bulk_timeout" + "'", str87, "bulk_timeout");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getUSER_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "user" + "'", str49, "user");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        builder12.setadvancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        java.lang.String str24 = builder19.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder28.getmongoServers();
        builder19.mongoServers = serverAddressList30;
        builder18.mongoServers = serverAddressList30;
        java.lang.String str33 = builder18.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder18.indexName("user");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.scriptType;
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        boolean boolean46 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        int int48 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "store_statistics" + "'", str42, "store_statistics");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_requests" + "'", str43, "concurrent_requests");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 60000 + "'", int48 == 60000);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "initial_timestamp" + "'", str50, "initial_timestamp");
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean48 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "throttle_size" + "'", str46, "throttle_size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index" + "'", str47, "index");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        builder38.mongoSSLVerifyCertificate = false;
        builder38.mongoSSLVerifyCertificate = true;
        boolean boolean48 = builder38.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        builder11.mongoDb = "";
        java.util.Set<java.lang.String> strSet15 = builder11.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.scriptType("script.disable_dynamic");
        builder17.indexName = "";
        builder17.includeCollection = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        int int15 = builder13.getthrottleSize();
        java.util.Set<java.lang.String> strSet16 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int18 = builder17.getsocketTimeout();
        boolean boolean19 = builder17.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject24 = builder23.getmongoCollectionFilter();
        builder17.setmongoOplogFilter(basicDBObject24);
        builder17.throttleSize = 10;
        builder17.setsocketTimeout(10);
        java.lang.String[] strArray70 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        java.lang.String str74 = builder17.getscript();
        com.mongodb.BasicDBObject basicDBObject75 = builder17.getmongoCollectionFilter();
        builder13.mongoOplogFilter = basicDBObject75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder0.mongoCollectionFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder0.connectTimeout(32);
        builder0.mongoAdminUser = "flush_interval";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        java.lang.String str6 = builder0.mongoCollection;
        java.lang.String str7 = builder0.getscript();
        boolean boolean8 = builder0.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder17.mongoAdminUser;
        java.lang.String[] strArray47 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        boolean boolean54 = mongoDBRiverDefinition53.getdropCollection();
        java.lang.String str55 = mongoDBRiverDefinition53.getNAME_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition53.getSERVERS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue57 = mongoDBRiverDefinition53.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str58 = mongoDBRiverDefinition53.getMongoDb();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = mongoDBRiverDefinition53.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder13.mongoServers(serverAddressList59);
        java.lang.String str61 = builder13.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "name" + "'", str55, "name");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "servers" + "'", str56, "servers");
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        java.util.Set<java.lang.String> strSet7 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoCollection("flush_interval");
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoClientOptions(mongoClientOptions10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        boolean boolean10 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet13 = null;
        builder0.setexcludeFields(strSet13);
        com.mongodb.BasicDBObject basicDBObject15 = builder0.mongoOplogFilter;
        java.lang.Boolean boolean16 = builder0.isMongos;
        builder0.indexName = "";
        builder0.indexName = "initial_timestamp";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.statisticsIndexName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.disableIndexRefresh(true);
        builder18.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        int int23 = builder21.getthrottleSize();
        java.util.Set<java.lang.String> strSet24 = builder21.parentTypes;
        builder21.mongoLocalUser = "";
        boolean boolean27 = builder21.getskipInitialImport();
        builder21.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder21.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str32 = builder31.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.indexName("credentials");
        java.lang.String str35 = builder34.mongoAdminUser;
        java.lang.String[] strArray64 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder34.parentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str71 = mongoDBRiverDefinition70.getSIZE_FIELD();
        java.lang.String str72 = mongoDBRiverDefinition70.getTHROTTLE_SIZE_FIELD();
        java.lang.String str73 = mongoDBRiverDefinition70.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int74 = mongoDBRiverDefinition70.getDEFAULT_BULK_ACTIONS();
        boolean boolean75 = mongoDBRiverDefinition70.isImportAllCollections();
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = mongoDBRiverDefinition70.mongoServers;
        builder21.mongoServers = serverAddressList76;
        builder18.mongoServers = serverAddressList76;
        boolean boolean79 = builder18.getskipInitialImport();
        boolean boolean80 = builder18.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "size" + "'", str71, "size");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "throttle_size" + "'", str72, "throttle_size");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "concurrent_bulk_requests" + "'", str73, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1000 + "'", int74 == 1000);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(serverAddressList76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.includeCollection("admin");
        builder12.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.riverName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        java.util.Set<java.lang.String> strSet19 = builder17.getincludeFields();
        java.lang.String str20 = builder17.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder21.getscript();
        java.lang.String str26 = builder21.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.skipInitialImport(true);
        boolean boolean29 = builder28.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.indexName("credentials");
        java.lang.String str38 = builder37.mongoAdminUser;
        java.lang.String[] strArray67 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet68);
        builder33.includeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder17.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.throttleSize((int) (short) 100);
        com.mongodb.BasicDBObject basicDBObject75 = builder72.mongoOplogFilter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList76 = builder72.getmongoServers();
        builder12.mongoServers = serverAddressList76;
        builder12.setmongoCollection("");
        builder12.setadvancedTransformation(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(basicDBObject75);
        org.junit.Assert.assertNotNull(serverAddressList76);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        builder7.setriverName("password");
        builder7.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.storeStatistics(false);
        builder7.setindexName("password");
        builder7.setmongoAdminPassword("gridfs");
        java.lang.String str19 = builder7.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean43 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getFILTER_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "filter" + "'", str47, "filter");
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        boolean boolean48 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str49 = mongoDBRiverDefinition39.statisticsIndexName;
        java.lang.String str50 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "host" + "'", str50, "host");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getStatisticsIndexName();
        org.elasticsearch.common.logging.ESLogger eSLogger46 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str47 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk" + "'", str44, "bulk");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(eSLogger46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disable_index_refresh" + "'", str47, "disable_index_refresh");
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        builder8.riverName = "password";
        boolean boolean14 = builder8.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoOplogFilter();
        java.lang.String str11 = builder9.gettypeName();
        builder9.typeName = "user";
        java.lang.String str14 = builder9.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.mongoLocalPassword;
        java.lang.String str17 = builder15.mongoLocalPassword;
        builder15.disableIndexRefresh = true;
        boolean boolean20 = builder15.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        java.lang.String str61 = mongoDBRiverDefinition60.getSIZE_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition60.getTHROTTLE_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition60.getParentTypes();
        builder15.setparentTypes(strSet63);
        builder9.parentTypes = strSet63;
        java.lang.String str66 = builder9.indexName;
        builder9.mongoGridFS = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "size" + "'", str61, "size");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "throttle_size" + "'", str62, "throttle_size");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str13 = mongoDBRiverDefinition12.getBULK_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.getUSER_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition12.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition12.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos;
        int int46 = mongoDBRiverDefinition39.getThrottleSize();
        int int47 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoLocalPassword();
        int int49 = mongoDBRiverDefinition39.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        java.lang.String str20 = builder0.getmongoLocalUser();
        builder0.setmongoSSLVerifyCertificate(true);
        int int23 = builder0.throttleSize;
        java.lang.String str24 = builder0.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.elasticsearch.common.settings.Settings settings2 = null;
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = null;
        org.elasticsearch.river.RiverSettings riverSettings4 = new org.elasticsearch.river.RiverSettings(settings2, strMap3);
        org.elasticsearch.common.settings.Settings settings5 = riverSettings4.globalSettings();
        org.elasticsearch.common.settings.Settings settings6 = riverSettings4.globalSettings();
        org.elasticsearch.script.ScriptService scriptService7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("flush_interval", "socket_timeout", riverSettings4, scriptService7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(settings5);
        org.junit.Assert.assertNull(settings6);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder10.getscript();
        boolean boolean15 = builder10.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int17 = builder16.getsocketTimeout();
        boolean boolean18 = builder16.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        builder16.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder10.mongoCollectionFilter(basicDBObject23);
        builder8.setmongoCollectionFilter(basicDBObject23);
        java.lang.String str27 = builder8.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.isMongos((java.lang.Boolean) true);
        java.lang.String str34 = builder28.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.mongoSSLVerifyCertificate(false);
        builder36.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.throttleSize(10);
        java.lang.String str41 = builder40.getriverName();
        boolean boolean42 = builder40.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.mongoClientOptions(mongoClientOptions43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.indexName("credentials");
        java.lang.String str49 = builder48.mongoAdminUser;
        java.lang.String[] strArray78 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder48.parentTypes((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition84 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder83);
        boolean boolean85 = mongoDBRiverDefinition84.getdropCollection();
        java.util.Set<java.lang.String> strSet86 = mongoDBRiverDefinition84.getParentTypes();
        builder40.setparentTypes(strSet86);
        builder8.excludeFields = strSet86;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder8.dropCollection(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str49 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        java.lang.String str51 = mongoDBRiverDefinition39.riverIndexName;
        org.elasticsearch.common.unit.TimeValue timeValue52 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "size" + "'", str49, "size");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "connect_timeout" + "'", str50, "connect_timeout");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(timeValue52);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverName("collection");
        builder14.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoLocalUser();
        java.lang.String str44 = mongoDBRiverDefinition39.getTypeName();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.getSIZE_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition52.getLOCAL_DB_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition52.getLOCAL_DB_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition52.getNAME_FIELD();
        java.util.Set<java.lang.String> strSet57 = mongoDBRiverDefinition52.getParentTypes();
        builder10.includeFields = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder10.dropCollection(false);
        java.lang.String str61 = builder60.mongoLocalUser;
        builder60.setincludeCollection("host");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "size" + "'", str53, "size");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "local" + "'", str54, "local");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "local" + "'", str55, "local");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "name" + "'", str56, "name");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.getriverIndexName();
        builder0.setstoreStatistics(true);
        java.lang.String str9 = builder0.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.skipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        java.util.Set<java.lang.String> strSet11 = builder7.includeFields;
        java.lang.String str12 = builder7.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        builder0.storeStatistics = true;
        boolean boolean32 = builder0.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.throttleSize((int) (short) 100);
        com.mongodb.BasicDBObject basicDBObject58 = builder55.mongoOplogFilter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = builder55.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder55.mongoUseSSL(false);
        builder61.setmongoAdminUser("socket_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(basicDBObject58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        boolean boolean50 = mongoDBRiverDefinition47.isMongoGridFS();
        boolean boolean51 = mongoDBRiverDefinition47.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = mongoDBRiverDefinition47.initialTimestamp;
        docScoreSearchScript0.setNextVar("admin", (java.lang.Object) wildcardTimestamp52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.isMongos((java.lang.Boolean) true);
        java.lang.String str60 = builder54.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder54.mongoSSLVerifyCertificate(false);
        boolean boolean63 = builder54.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder54.typeName("hi!");
        int int66 = builder65.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder65.disableIndexRefresh(false);
        builder65.mongoLocalUser = "flush_interval";
        java.lang.Object obj71 = docScoreSearchScript0.unwrap((java.lang.Object) builder65);
        builder65.setdisableIndexRefresh(false);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "" + "'", obj4, "");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(obj71);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder10.getscript();
        java.lang.String str15 = builder10.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.indexName("index");
        builder19.setmongoAdminPassword("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder25.mongoAdminUser;
        java.lang.String[] strArray55 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.lang.String str62 = mongoDBRiverDefinition61.getSIZE_FIELD();
        boolean boolean63 = mongoDBRiverDefinition61.disableIndexRefresh;
        java.lang.String str64 = mongoDBRiverDefinition61.getACTIONS_FIELD();
        java.lang.String str65 = mongoDBRiverDefinition61.statisticsTypeName;
        boolean boolean66 = mongoDBRiverDefinition61.isAdvancedTransformation();
        java.lang.String str67 = mongoDBRiverDefinition61.riverIndexName;
        java.lang.String str68 = mongoDBRiverDefinition61.getIS_MONGOS_FIELD();
        java.lang.String str69 = mongoDBRiverDefinition61.mongoAdminPassword;
        java.lang.String str70 = mongoDBRiverDefinition61.getSSL_CONNECTION_FIELD();
        java.lang.String str71 = mongoDBRiverDefinition61.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition61.parentTypes;
        builder19.setincludeFields(strSet72);
        builder5.setexcludeFields(strSet72);
        builder5.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder5.mongoSSLVerifyCertificate(false);
        builder78.setriverName("bulk_size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "size" + "'", str62, "size");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "actions" + "'", str64, "actions");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "is_mongos" + "'", str68, "is_mongos");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ssl" + "'", str70, "ssl");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "concurrent_requests" + "'", str71, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.riverIndexName = "include_fields";
        builder36.setmongoGridFS(true);
        java.lang.String str43 = builder36.getindexName();
        builder36.socketTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder36.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder36.disableIndexRefresh(true);
        java.lang.String str50 = builder49.includeCollection;
        builder49.setadvancedTransformation(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "credentials" + "'", str43, "credentials");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet10 = builder3.parentTypes;
        boolean boolean11 = builder3.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(false);
        java.lang.String str14 = builder3.riverIndexName;
        java.util.Set<java.lang.String> strSet15 = builder3.getexcludeFields();
        builder3.setmongoAdminPassword("type");
        com.mongodb.BasicDBObject basicDBObject18 = builder3.getmongoCollectionFilter();
        builder3.storeStatistics = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject18);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        boolean boolean46 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoLocalUser;
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsIndexName;
        boolean boolean48 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str49 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str51 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "user" + "'", str49, "user");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "actions" + "'", str51, "actions");
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.getADVANCED_TRANSFORMATION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp54 = mongoDBRiverDefinition51.getInitialTimestamp();
        java.lang.String str55 = mongoDBRiverDefinition51.riverName;
        java.lang.String str56 = mongoDBRiverDefinition51.getOPTIONS_FIELD();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "advanced_transformation" + "'", str53, "advanced_transformation");
        org.junit.Assert.assertNull(wildcardTimestamp54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "options" + "'", str56, "options");
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.mongoOplogFilter = basicDBObject26;
        builder11.scriptType = "hi!";
        java.lang.String str33 = builder11.getmongoLocalUser();
        builder11.setmongoCollection("null.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setisMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.riverName("credentials");
        builder3.setconnectTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.dropCollection(true);
        builder3.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        int int15 = builder13.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("concurrent_bulk_requests");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript18 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript18.setNextScore(0.0f);
        docScoreSearchScript18.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        java.lang.String str27 = builder26.mongoAdminUser;
        java.lang.String[] strArray56 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder26.parentTypes((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        java.lang.String str63 = mongoDBRiverDefinition62.getSIZE_FIELD();
        boolean boolean64 = mongoDBRiverDefinition62.disableIndexRefresh;
        boolean boolean65 = mongoDBRiverDefinition62.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject66 = mongoDBRiverDefinition62.getMongoCollectionFilter();
        java.lang.String str67 = mongoDBRiverDefinition62.getBULK_TIMEOUT_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition62.getScriptType();
        java.lang.Object obj69 = docScoreSearchScript18.unwrap((java.lang.Object) mongoDBRiverDefinition62);
        java.lang.String str70 = mongoDBRiverDefinition62.getMongoCollection();
        boolean boolean71 = mongoDBRiverDefinition62.getstoreStatistics();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition62.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder17.parentTypes(strSet72);
        builder12.setparentTypes(strSet72);
        builder12.setskipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "size" + "'", str63, "size");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "bulk_timeout" + "'", str67, "bulk_timeout");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        builder0.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoLocalUser("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int21 = builder20.getsocketTimeout();
        builder20.setskipInitialImport(false);
        boolean boolean24 = builder20.mongoUseSSL;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript25 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript25.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory28 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj29 = docScoreSearchScript25.unwrap((java.lang.Object) docScoreNativeScriptFactory28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.isMongos((java.lang.Boolean) true);
        java.lang.String str36 = builder30.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.mongoSSLVerifyCertificate(false);
        java.lang.String str39 = builder30.riverName;
        java.lang.String str40 = builder30.scriptType;
        builder30.statisticsTypeName = "secondary_read_preference";
        builder30.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder30.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject47 = builder30.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript48 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        builder20.mongoCollectionFilter = basicDBObject47;
        builder19.mongoCollectionFilter = basicDBObject47;
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        builder19.setmongoClientOptions(mongoClientOptions51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder19.typeName("is_mongos");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(executableScript48);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "flush_interval" + "'", str43, "flush_interval");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "host" + "'", str44, "host");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ssl" + "'", str45, "ssl");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        int int44 = mongoDBRiverDefinition39.connectTimeout;
        int int45 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str46 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1000 + "'", int45 == 1000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "flush_interval" + "'", str46, "flush_interval");
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder3.socketTimeout = (byte) 0;
        builder3.skipInitialImport = true;
        java.lang.String str12 = builder3.gettypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder3.mongoServers;
        com.mongodb.BasicDBObject basicDBObject14 = builder3.getmongoOplogFilter();
        java.util.Set<java.lang.String> strSet15 = builder3.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getScript();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str52 = mongoDBRiverDefinition39.getScript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_bulk_requests" + "'", str50, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        builder3.setriverName("bulk");
        builder3.mongoAdminUser = "script_type";
        boolean boolean9 = builder3.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.throttleSize((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str53 = mongoDBRiverDefinition39.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "initial_timestamp" + "'", str51, "initial_timestamp");
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        int int11 = builder3.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.setmongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoCollectionFilter(basicDBObject18);
        builder19.setmongoDb("script");
        int int22 = builder19.getsocketTimeout();
        builder19.setstatisticsTypeName("ssl");
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = builder19.mongoServers;
        builder3.mongoServers = serverAddressList25;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(serverAddressList25);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoLocalUser("include_fields");
        com.mongodb.BasicDBObject basicDBObject15 = builder8.mongoOplogFilter;
        builder8.setstatisticsTypeName("db");
        boolean boolean18 = builder8.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.getmongoGridFS();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(boolean45);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        int int12 = builder0.socketTimeout;
        boolean boolean13 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder17.mongoAdminUser;
        java.lang.String[] strArray47 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        java.lang.String str54 = mongoDBRiverDefinition53.getSIZE_FIELD();
        boolean boolean55 = mongoDBRiverDefinition53.disableIndexRefresh;
        java.lang.String str56 = mongoDBRiverDefinition53.getACTIONS_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition53.statisticsTypeName;
        boolean boolean58 = mongoDBRiverDefinition53.isAdvancedTransformation();
        java.lang.String str59 = mongoDBRiverDefinition53.script;
        java.lang.String str60 = mongoDBRiverDefinition53.getMongoCollection();
        java.lang.String str61 = mongoDBRiverDefinition53.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition53.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str63 = mongoDBRiverDefinition53.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet64 = mongoDBRiverDefinition53.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder0.parentTypes(strSet64);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "size" + "'", str54, "size");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "actions" + "'", str56, "actions");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "include_collection" + "'", str61, "include_collection");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "script" + "'", str62, "script");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "admin" + "'", str63, "admin");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str12 = mongoDBRiverDefinition8.getMongoCollection();
        boolean boolean13 = mongoDBRiverDefinition8.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        builder0.mongoGridFS = false;
        int int5 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.statisticsTypeName("concurrent_bulk_requests");
        builder7.typeName = "db";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.throttleSize = (byte) 10;
        boolean boolean19 = builder8.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.indexName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder8.mongoAdminUser("user");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean50 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean51 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        builder0.settypeName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.typeName("");
        java.lang.String str17 = builder14.getincludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String str19 = builder10.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList62 = mongoDBRiverDefinition59.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder10.mongoServers(serverAddressList62);
        builder9.setmongoServers(serverAddressList62);
        java.lang.String str65 = builder9.gettypeName();
        com.mongodb.BasicDBObject basicDBObject66 = builder9.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(serverAddressList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(basicDBObject66);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet8 = null;
        builder0.parentTypes = strSet8;
        builder0.isMongos = true;
        boolean boolean12 = builder0.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        builder0.setmongoClientOptions(mongoClientOptions13);
        builder0.mongoLocalPassword = "servers";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str44 = builder43.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject47 = builder46.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = builder46.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.disableIndexRefresh(true);
        builder50.setthrottleSize((int) (byte) 0);
        java.lang.String str53 = builder50.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int55 = builder54.getsocketTimeout();
        boolean boolean56 = builder54.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str58 = builder57.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.indexName("credentials");
        java.lang.String str61 = builder60.mongoAdminUser;
        java.lang.String[] strArray90 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet91 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet91, strArray90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder60.parentTypes((java.util.Set<java.lang.String>) strSet91);
        builder54.excludeFields = strSet91;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder50.includeFields((java.util.Set<java.lang.String>) strSet91);
        builder42.includeFields = strSet91;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder42.typeName("password.password");
        boolean boolean99 = builder98.dropCollection;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "credentials" + "'", str53, "credentials");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str48 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "exclude_fields" + "'", str48, "exclude_fields");
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str48 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str49 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str50 = mongoDBRiverDefinition39.script;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder0.build();
        boolean boolean14 = mongoDBRiverDefinition13.getmongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition13.getRiverIndexName();
        java.lang.String str16 = mongoDBRiverDefinition13.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "drop_collection" + "'", str16, "drop_collection");
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        boolean boolean45 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getParentTypes();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        int int48 = mongoDBRiverDefinition39.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(byteSizeValue47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str46 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str49 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_size" + "'", str49, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.getMongoServers();
        int int46 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 60000 + "'", int46 == 60000);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.setconnectTimeout((int) (short) 1);
        builder0.scriptType = "admin";
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str44 = mongoDBRiverDefinition39.typeName;
        boolean boolean45 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str46 = mongoDBRiverDefinition39.getNAME_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "name" + "'", str46, "name");
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        builder3.setstatisticsTypeName("bulk_timeout");
        java.lang.String str8 = builder3.includeCollection;
        java.lang.String str9 = builder3.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.riverIndexName = "bulk";
        boolean boolean15 = builder12.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.getmongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("initial_timestamp", "exclude_fields", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?exclude_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str42 = mongoDBRiverDefinition39.getDB_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "db" + "'", str42, "db");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 30000 + "'", int43 == 30000);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        java.lang.String str8 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("db");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoOplogFilter;
        java.lang.String str12 = builder10.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoLocalUser("password");
        com.mongodb.BasicDBObject basicDBObject22 = builder8.getmongoCollectionFilter();
        builder8.setmongoAdminUser("servers");
        builder8.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder8.socketTimeout(1000);
        builder8.indexName = "concurrent_requests";
        java.lang.String str31 = builder8.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str47 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "is_mongos" + "'", str45, "is_mongos");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "socket_timeout" + "'", str46, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "collection" + "'", str47, "collection");
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.String str45 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gridfs" + "'", str45, "gridfs");
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("actions");
        builder0.dropCollection = true;
        java.lang.String str13 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet18 = builder17.getparentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        boolean boolean50 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str51 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str53 = mongoDBRiverDefinition39.getMongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "type" + "'", str51, "type");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int49 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str50 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str51 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str52 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "initial_timestamp" + "'", str50, "initial_timestamp");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "index" + "'", str52, "index");
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "script" + "'", str44, "script");
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "store_statistics" + "'", str46, "store_statistics");
        org.junit.Assert.assertNotNull(strSet47);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.riverIndexName("secondary_read_preference");
        java.lang.String str16 = builder11.getmongoAdminPassword();
        builder11.setisMongos((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        java.lang.String str6 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("exclude_fields");
        builder10.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.getSIZE_FIELD();
        boolean boolean54 = mongoDBRiverDefinition52.disableIndexRefresh;
        java.lang.String str55 = mongoDBRiverDefinition52.getACTIONS_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition52.statisticsTypeName;
        boolean boolean57 = mongoDBRiverDefinition52.isAdvancedTransformation();
        java.lang.String str58 = mongoDBRiverDefinition52.riverIndexName;
        boolean boolean59 = mongoDBRiverDefinition52.getmongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet60 = mongoDBRiverDefinition52.getParentTypes();
        builder10.setincludeFields(strSet60);
        builder10.setindexName("script.default_lang");
        java.util.List<com.mongodb.ServerAddress> serverAddressList64 = builder10.mongoServers;
        boolean boolean65 = builder10.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "size" + "'", str53, "size");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "actions" + "'", str55, "actions");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(serverAddressList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        int int45 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = mongoDBRiverDefinition39.initialTimestamp;
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.typeName;
        java.lang.String str49 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str50 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "flush_interval" + "'", str50, "flush_interval");
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getmongoGridFS();
        boolean boolean48 = mongoDBRiverDefinition39.getimportAllCollections();
        org.elasticsearch.common.unit.TimeValue timeValue49 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str50 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "local" + "'", str50, "local");
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        java.lang.String str20 = builder0.getmongoLocalUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder0.mongoServers;
        builder0.setriverName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.skipInitialImport(true);
        builder0.setsocketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.storeStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        builder10.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder10.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder10.mongoClientOptions = mongoClientOptions19;
        java.lang.String str21 = builder10.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder10.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder23.setmongoOplogFilter(basicDBObject24);
        int int26 = builder23.socketTimeout;
        builder23.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.mongoCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str32 = builder31.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.indexName("credentials");
        boolean boolean35 = builder31.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.indexName("credentials");
        java.lang.String str40 = builder36.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str44 = builder43.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.indexName("credentials");
        java.lang.String str47 = builder43.getscript();
        boolean boolean48 = builder43.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int50 = builder49.getsocketTimeout();
        boolean boolean51 = builder49.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.getmongoCollectionFilter();
        builder49.setmongoOplogFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder43.mongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder42.mongoOplogFilter(basicDBObject56);
        builder31.setmongoOplogFilter(basicDBObject56);
        builder23.setmongoCollectionFilter(basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder10.mongoOplogFilter(basicDBObject56);
        builder3.setmongoOplogFilter(basicDBObject56);
        boolean boolean64 = builder3.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        org.elasticsearch.common.logging.ESLogger eSLogger48 = mongoDBRiverDefinition39.getlogger();
        boolean boolean49 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str50 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str51 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str52 = mongoDBRiverDefinition39.getMongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(eSLogger48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        int int11 = builder3.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSIZE_FIELD();
        boolean boolean53 = mongoDBRiverDefinition51.disableIndexRefresh;
        java.lang.String str54 = mongoDBRiverDefinition51.getACTIONS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition51.getMongoOplogNamespace();
        java.lang.Boolean boolean56 = mongoDBRiverDefinition51.isMongos();
        boolean boolean57 = mongoDBRiverDefinition51.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition51.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder3.parentTypes(strSet58);
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = builder3.mongoServers;
        builder3.setstatisticsIndexName("sandbox");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "size" + "'", str52, "size");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "null.null" + "'", str55, "null.null");
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(serverAddressList60);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.dropCollection(false);
        boolean boolean8 = builder7.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder7.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.mongoLocalPassword;
        builder10.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject14 = builder10.mongoCollectionFilter;
        builder7.mongoOplogFilter = basicDBObject14;
        builder7.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.setmongoCollectionFilter(basicDBObject8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.mongoOplogFilter(basicDBObject16);
        int int18 = builder6.throttleSize;
        java.lang.String str19 = builder6.getmongoLocalUser();
        int int20 = builder6.getsocketTimeout();
        int int21 = builder6.socketTimeout;
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) builder6);
        builder6.setstatisticsIndexName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder6.mongoLocalPassword("is_mongos");
        java.lang.String str27 = builder26.getriverIndexName();
        java.lang.String str28 = builder26.getmongoLocalPassword();
        boolean boolean29 = builder26.skipInitialImport;
        builder26.throttleSize = (byte) 100;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "is_mongos" + "'", str28, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        boolean boolean44 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1000 + "'", int45 == 1000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_collection" + "'", str46, "include_collection");
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "localhost" + "'", str42, "localhost");
        org.junit.Assert.assertNull(strSet43);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        int int45 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str46 = mongoDBRiverDefinition39.includeCollection;
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean47 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.parentTypes;
        boolean boolean49 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str50 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "import_all_collections" + "'", str50, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String str19 = builder10.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList62 = mongoDBRiverDefinition59.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder10.mongoServers(serverAddressList62);
        builder9.setmongoServers(serverAddressList62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder9.storeStatistics(true);
        builder66.setmongoDb("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder66.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.throttleSize(1000);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(serverAddressList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        org.bson.types.Binary binary8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.initialTimestamp(binary8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        builder0.setmongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.indexName("script.default_lang");
        builder0.mongoLocalPassword = "bulk_timeout";
        builder0.mongoLocalPassword = "servers";
        builder0.settypeName("disable_index_refresh");
        boolean boolean12 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("credentials");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str50 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bulk_timeout" + "'", str50, "bulk_timeout");
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.throttleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.statisticsTypeName("localhost");
        boolean boolean38 = builder37.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder37.riverIndexName("concurrent_requests");
        org.bson.types.Binary binary43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.initialTimestamp(binary43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str48 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isMongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "import_all_collections" + "'", str48, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isDropCollection();
        int int48 = mongoDBRiverDefinition39.getConnectTimeout();
        org.elasticsearch.common.logging.ESLogger eSLogger49 = mongoDBRiverDefinition39.getlogger();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(eSLogger49);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject4 = builder0.mongoCollectionFilter;
        builder0.mongoGridFS = true;
        int int7 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        boolean boolean50 = mongoDBRiverDefinition47.isMongoGridFS();
        java.lang.String str51 = mongoDBRiverDefinition47.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue52 = mongoDBRiverDefinition47.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition47.mongoServers;
        java.lang.String str54 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition47.getMongoDb();
        boolean boolean56 = mongoDBRiverDefinition47.getdisableIndexRefresh();
        java.lang.String str57 = mongoDBRiverDefinition47.getSOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition47.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.excludeFields(strSet58);
        builder0.mongoAdminUser = "advanced_transformation";
        builder0.setstatisticsIndexName("advanced_transformation");
        builder0.scriptType = "user";
        com.mongodb.BasicDBObject basicDBObject66 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "socket_timeout" + "'", str57, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject66);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.mongoDb("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.includeCollection("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder58.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.isMongos((java.lang.Boolean) true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = builder58.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder58.connectTimeout(97);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(serverAddressList67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "is_mongos" + "'", str7, "is_mongos");
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean50 = mongoDBRiverDefinition39.getmongoUseSSL();
        boolean boolean51 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.Boolean boolean52 = mongoDBRiverDefinition39.isMongos;
        int int53 = mongoDBRiverDefinition39.getThrottleSize();
        int int54 = mongoDBRiverDefinition39.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        boolean boolean55 = builder0.getadvancedTransformation();
        java.lang.String str56 = builder0.getriverIndexName();
        builder0.typeName = "name";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.mongoAdminPassword = "drop_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder6.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoSSLVerifyCertificate(false);
        builder13.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.indexName("local");
        java.lang.String str18 = builder17.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.throttleSize(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoLocalPassword("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int24 = builder23.getsocketTimeout();
        boolean boolean25 = builder23.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        builder23.setmongoOplogFilter(basicDBObject30);
        builder23.throttleSize = 10;
        builder23.setsocketTimeout(10);
        java.lang.String[] strArray76 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        builder23.setparentTypes((java.util.Set<java.lang.String>) strSet77);
        builder22.parentTypes = strSet77;
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder0.mongoCollection("include_fields");
        java.lang.String str84 = builder83.mongoLocalPassword;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.Boolean boolean7 = builder0.isMongos;
        builder0.setriverIndexName("drop_collection");
        builder0.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getSIZE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions42 = mongoDBRiverDefinition39.getMongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "size" + "'", str41, "size");
        org.junit.Assert.assertNull(mongoClientOptions42);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.statisticsTypeName;
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition17.includeFields;
        java.lang.String str20 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "initial_timestamp" + "'", str20, "initial_timestamp");
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.Boolean boolean48 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str50 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        java.lang.String str51 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str52 = mongoDBRiverDefinition39.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "socket_timeout" + "'", str50, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoLocalUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str49 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str50 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "is_mongos" + "'", str50, "is_mongos");
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setmongoDb("script.disable_dynamic");
        java.lang.String str9 = builder6.riverIndexName;
        builder6.setstatisticsIndexName("script_type");
        builder6.setadvancedTransformation(false);
        boolean boolean14 = builder6.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str51 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script_type" + "'", str48, "script_type");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "import_all_collections" + "'", str49, "import_all_collections");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "skip_initial_import" + "'", str51, "skip_initial_import");
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        java.lang.Boolean boolean6 = builder3.getisMongos();
        builder3.setmongoDb("import_all_collections");
        builder3.setscriptType("index");
        com.mongodb.BasicDBObject basicDBObject11 = builder3.getmongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "import_all_collections" + "'", str47, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str43 = mongoDBRiverDefinition39.indexName;
        java.lang.String str44 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverIndexName();
        boolean boolean46 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str47 = mongoDBRiverDefinition39.getTypeName();
        boolean boolean48 = mongoDBRiverDefinition39.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "credentials" + "'", str43, "credentials");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "servers" + "'", str44, "servers");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        builder0.riverIndexName = "concurrent_bulk_requests";
        builder0.includeCollection = "advanced_transformation";
        java.util.Set<java.lang.String> strSet59 = builder0.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.dropCollection(true);
        builder61.indexName = "parent_types";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(true);
        builder13.setconnectTimeout((int) 'a');
        builder13.riverName = "port";
        builder13.setmongoSSLVerifyCertificate(true);
        builder13.script = "import_all_collections";
        java.lang.String str22 = builder13.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoAdminPassword();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "advanced_transformation" + "'", str46, "advanced_transformation");
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.storeStatistics(false);
        java.lang.String str12 = builder11.getscript();
        int int13 = builder11.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.mongoSSLVerifyCertificate;
        java.lang.String str14 = mongoDBRiverDefinition12.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition12.mongoLocalPassword;
        java.lang.String str16 = mongoDBRiverDefinition12.getCREDENTIALS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition12.getMongoAdminUser();
        java.lang.String str18 = mongoDBRiverDefinition12.getScript();
        java.lang.String str19 = mongoDBRiverDefinition12.getTypeName();
        java.lang.String str20 = mongoDBRiverDefinition12.script;
        com.mongodb.BasicDBObject basicDBObject21 = mongoDBRiverDefinition12.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "credentials" + "'", str16, "credentials");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(basicDBObject21);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.statisticsTypeName("script.disable_dynamic");
        builder7.setmongoCollection("is_mongos");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("advanced_transformation");
        boolean boolean8 = builder0.getmongoSecondaryReadPreference();
        builder0.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverIndexName("store_statistics");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        java.lang.String str12 = builder11.getincludeCollection();
        int int13 = builder11.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.mongoLocalPassword("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.socketTimeout(1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        builder0.throttleSize = '#';
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder0.getinitialTimestamp();
        builder0.setmongoSecondaryReadPreference(true);
        builder0.settypeName("import_all_collections");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(wildcardTimestamp22);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoCollection();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str43 = mongoDBRiverDefinition39.script;
        java.lang.String str44 = mongoDBRiverDefinition39.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.mongoCollectionFilter;
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.typeName("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.mongoSSLVerifyCertificate;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        builder3.setstatisticsTypeName("bulk_timeout");
        java.lang.String str8 = builder3.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder3.socketTimeout(27017);
        builder3.setmongoLocalPassword("null.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        boolean boolean55 = builder0.getadvancedTransformation();
        builder0.statisticsIndexName = "bulk_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.mongoLocalPassword("script");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        java.lang.String str9 = builder0.statisticsTypeName;
        boolean boolean10 = builder0.mongoSecondaryReadPreference;
        java.util.Set<java.lang.String> strSet11 = builder0.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        java.lang.String str53 = mongoDBRiverDefinition51.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean54 = mongoDBRiverDefinition51.skipInitialImport;
        java.lang.String str55 = mongoDBRiverDefinition51.getCOLLECTION_FIELD();
        boolean boolean56 = mongoDBRiverDefinition51.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "advanced_transformation" + "'", str53, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "collection" + "'", str55, "collection");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.lang.String str9 = builder0.includeCollection;
        builder0.indexName = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        java.lang.String str52 = mongoDBRiverDefinition51.getSIZE_FIELD();
        boolean boolean53 = mongoDBRiverDefinition51.disableIndexRefresh;
        boolean boolean54 = mongoDBRiverDefinition51.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject55 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.mongoCollectionFilter(basicDBObject55);
        boolean boolean57 = builder0.mongoUseSSL;
        java.lang.String str58 = builder0.mongoAdminUser;
        builder0.setmongoSSLVerifyCertificate(true);
        builder0.storeStatistics = false;
        builder0.storeStatistics = true;
        java.lang.String str65 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "size" + "'", str52, "size");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        int int45 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str46 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminUser;
        boolean boolean48 = mongoDBRiverDefinition39.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "bulk_size" + "'", str46, "bulk_size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        builder36.mongoDb = "";
        builder36.mongoCollection = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder36.statisticsTypeName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str43 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "localhost" + "'", str42, "localhost");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "is_mongos" + "'", str43, "is_mongos");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean48 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean49 = mongoDBRiverDefinition39.mongoUseSSL;
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str52 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "concurrent_bulk_requests" + "'", str52, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "advanced_transformation" + "'", str53, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "disable_index_refresh" + "'", str54, "disable_index_refresh");
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.scriptType("bulk_timeout");
        builder31.indexName = "options";
        java.util.Set<java.lang.String> strSet38 = builder31.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str40 = builder39.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder39.setmongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder39.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject49 = builder48.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder39.mongoOplogFilter(basicDBObject49);
        builder31.mongoOplogFilter = basicDBObject49;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder50);
    }
}

